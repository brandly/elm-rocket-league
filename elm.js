!function(n){"use strict";function e(n,e,r){return r.a=n,r.f=e,r}function x(r){return e(2,r,function(e){return function(n){return r(e,n)}})}function s(t){return e(3,t,function(r){return function(e){return function(n){return t(r,e,n)}}})}function l(o){return e(4,o,function(t){return function(r){return function(e){return function(n){return o(t,r,e,n)}}}})}function r(a){return e(5,a,function(o){return function(t){return function(r){return function(e){return function(n){return a(o,t,r,e,n)}}}}})}function t(i){return e(6,i,function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return i(a,o,t,r,e,n)}}}}}})}function o(c){return e(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return c(i,a,o,t,r,e,n)}}}}}}})}function z(u){return e(8,u,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return u(c,i,a,o,t,r,e,n)}}}}}}}})}function a(l){return e(9,l,function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return l(u,c,i,a,o,t,r,e,n)}}}}}}}}})}function D(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function A(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function N(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function F(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function T(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function S(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,u){return 8===n.a?n.f(e,r,t,o,a,i,c,u):n(e)(r)(t)(o)(a)(i)(c)(u)}function L(n,e,r,t,o,a,i,c,u,l){return 9===n.a?n.f(e,r,t,o,a,i,c,u,l):n(e)(r)(t)(o)(a)(i)(c)(u)(l)}function P(n,e){for(var r,t=[],o=i(n,e,0,t);o&&(r=t.pop());o=i(r.a,r.b,0,t));return o}function i(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&B(5),!1;if(100<r)return t.push({a:n,b:e}),!0;for(var o in n.$<0&&(n=Wr(n),e=Wr(e)),n)if(!i(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:n<e?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}x(P),x(function(n,e){return!P(n,e)}),x(function(n,e){return y(n,e)<0}),x(function(n,e){return y(n,e)<1}),x(function(n,e){return 0<y(n,e)});var c=x(function(n,e){return 0<=y(n,e)}),u=x(function(n,e){e=y(n,e);return e<0?Hr:e?kr:Ir}),f=0;function M(n,e){var r,t={};for(r in n)t[r]=n[r];for(r in e)t[r]=e[r];return t}function d(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r={$:1,a:n.a,b:e};n=n.b;for(var t=r;n.b;n=n.b)t=t.b={$:1,a:n.a,b:e};return r}x(d);var h={$:0};function v(n,e){return{$:1,a:n,b:e}}var p=x(v);function g(n){for(var e=h,r=n.length;r--;)e={$:1,a:n[r],b:e};return e}function b(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var C=s(function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(D(n,e.a,r.a));return g(t)});l(function(n,e,r,t){for(var o=[];e.b&&r.b&&t.b;e=e.b,r=r.b,t=t.b)o.push(A(n,e.a,r.a,t.a));return g(o)}),r(function(n,e,r,t,o){for(var a=[];e.b&&r.b&&t.b&&o.b;e=e.b,r=r.b,t=t.b,o=o.b)a.push(N(n,e.a,r.a,t.a,o.a));return g(a)}),t(function(n,e,r,t,o,a){for(var i=[];e.b&&r.b&&t.b&&o.b&&a.b;e=e.b,r=r.b,t=t.b,o=o.b,a=a.b)i.push(F(n,e.a,r.a,t.a,o.a,a.a));return g(i)}),x(function(r,n){return g(b(n).sort(function(n,e){return y(r(n),r(e))}))}),x(function(r,n){return g(b(n).sort(function(n,e){e=D(r,n,e);return e===Ir?0:e===Hr?-1:1}))});var w=s(function(n,e,r){for(var t=Array(n),o=0;o<n;o++)t[o]=r(e+o);return t}),$=x(function(n,e){for(var r=Array(n),t=0;t<n&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,{a:r,b:e}}),_=x(function(n,e){return e[n]}),V=s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=r[a];return o[n]=e,o}),q=(x(function(n,e){for(var r=e.length,t=Array(r+1),o=0;o<r;o++)t[o]=e[o];return t[r]=n,t}),s(function(n,e,r){for(var t=r.length,o=0;o<t;o++)e=D(n,r[o],e);return e}),s(function(n,e,r){for(var t=r.length-1;0<=t;t--)e=D(n,r[t],e);return e})),E=x(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;o++)t[o]=n(e[o]);return t});function B(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=D(n,e+a,r[a]);return o}),s(function(n,e,r){return r.slice(n,e)}),s(function(n,e,r){var t=e.length,o=n-t;r.length<o&&(o=r.length);for(var a=Array(t+o),i=0;i<t;i++)a[i]=e[i];for(i=0;i<o;i++)a[i+t]=r[i];return a}),x(function(n,e){return e}),x(function(n,e){return console.log(n+": <internals>"),e});var R=x(function(n,e){return n+e}),I=(x(function(n,e){return n-e}),x(function(n,e){return n*e}),x(function(n,e){return n/e}),x(function(n,e){return n/e|0}),x(Math.pow)),k=(x(function(n,e){return e%n}),x(function(n,e){e%=n;return 0===n?B(11):0<e&&n<0||e<0&&0<n?e+n:e})),H=Math.cos,j=Math.sin,U=Math.tan,W=x(Math.atan2),O=Math.ceil,G=Math.floor,Y=Math.round,J=Math.sqrt,K=Math.log,Q=isNaN;x(function(n,e){return n&&e}),x(function(n,e){return n||e}),x(function(n,e){return n!==e}),x(function(n,e){return n+e}),x(function(n,e){return n+e}),x(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;){var a=e.charCodeAt(o);a<55296||56319<a?(t[o]=n(e[o]),o++):(t[o]=n(e[o]+e[o+1]),o+=2)}return t.join("")}),x(function(n,e){for(var r=[],t=e.length,o=0;o<t;){var a=e[o],i=e.charCodeAt(o);o++,i<55296||56319<i||(a+=e[o],o++),n(a)&&r.push(a)}return r.join("")}),s(function(n,e,r){for(var t=r.length,o=0;o<t;){var a=r[o],i=r.charCodeAt(o);o++,i<55296||56319<i||(a+=r[o],o++),e=D(n,a,e)}return e}),s(function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);a<56320||57343<a||(o=r[--t]+o),e=D(n,o,e)}return e});var X=x(function(n,e){return e.split(n)}),Z=x(function(n,e){return e.join(n)}),nn=s(function(n,e,r){return r.slice(n,e)});x(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),n(t))return!0}return!1});var en=x(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),!n(t))return!1}return!0}),rn=x(function(n,e){return!!~e.indexOf(n)}),tn=x(function(n,e){return 0==e.indexOf(n)}),on=(x(function(n,e){return n.length<=e.length&&e.lastIndexOf(n)==e.length-n.length}),x(function(n,e){var r=n.length;if(r<1)return h;for(var t=0,o=[];-1<(t=e.indexOf(n,t));)o.push(t),t+=r;return g(o)}));function an(n){return n+""}var cn={$:2,b:function(n){return"number"!=typeof n||(n<=-2147483647||2147483647<=n||(0|n)!==n)&&(!isFinite(n)||n%1)?hn("an INT",n):Zr(n)}},un={$:2,b:function(n){return"string"==typeof n?Zr(n):n instanceof String?Zr(n+""):hn("a STRING",n)}},ln=x(function(n,e){return{$:6,d:n,b:e}});x(function(n,e){return{$:7,e:n,b:e}});var fn=x(function(n,e){return{$:10,b:e,h:n}}),sn=x(function(n,e){return{$:9,f:n,g:[e]}}),vn=s(function(n,e,r){return{$:9,f:n,g:[e,r]}}),dn=(l(function(n,e,r,t){return{$:9,f:n,g:[e,r,t]}}),r(function(n,e,r,t,o){return{$:9,f:n,g:[e,r,t,o]}}),t(function(n,e,r,t,o,a){return{$:9,f:n,g:[e,r,t,o,a]}}),o(function(n,e,r,t,o,a,i){return{$:9,f:n,g:[e,r,t,o,a,i]}}),z(function(n,e,r,t,o,a,i,c){return{$:9,f:n,g:[e,r,t,o,a,i,c]}}),a(function(n,e,r,t,o,a,i,c,u){return{$:9,f:n,g:[e,r,t,o,a,i,c,u]}}),x(function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return Jr(D(Kr,"This is not valid JSON! "+n.message,e))}}),x(mn));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Zr(n.c):hn("null",e);case 3:return gn(e)?pn(n.b,e,g):hn("a LIST",e);case 4:return gn(e)?pn(n.b,e,bn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return qt(t)?t:Jr(D(Qr,r,t.a));case 7:r=n.e;if(!gn(e))return hn("an ARRAY",e);if(e.length<=r)return hn("a LONGER array. Need index "+r+" but only see "+e.length+" entries",e);t=mn(n.b,e[r]);return qt(t)?t:Jr(D(Xr,r,t.a));case 8:if("object"!=typeof e||null===e||gn(e))return hn("an OBJECT",e);var o,a=h;for(o in e)if(e.hasOwnProperty(o)){t=mn(n.b,e[o]);if(!qt(t))return Jr(D(Qr,o,t.a));a={$:1,a:{a:o,b:t.a},b:a}}return Zr(pt(a));case 9:for(var i=n.f,c=n.g,u=0;u<c.length;u++){t=mn(c[u],e);if(!qt(t))return t;i=i(t.a)}return Zr(i);case 10:t=mn(n.b,e);return qt(t)?mn(n.h(t.a),e):t;case 11:for(var l=h,f=n.g;f.b;f=f.b){t=mn(f.a,e);if(qt(t))return t;l={$:1,a:t.a,b:l}}return Jr(nt(pt(l)));case 1:return Jr(D(Kr,n.a,e));case 0:return Zr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;a<t;a++){var i=mn(n,e[a]);if(!qt(i))return Jr(D(Xr,a,i.a));o[a]=i.a}return Zr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function bn(e){return D(Vt,e.length,function(n){return e[n]})}function hn(n,e){return Jr(D(Kr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Sn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Sn(n.g,e.g)}}function Sn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;t<r;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=x(function(n,e){return JSON.stringify(e,null,n)+""});function yn(n){return{$:0,a:n}}s(function(n,e,r){return r[n]=e,r});var Mn=x(function(n,e){return{$:3,b:n,d:e}}),Cn=x(function(n,e){return{$:4,b:n,d:e}}),Tn=0;function Ln(n){n={$:0,e:Tn++,f:n,g:null,h:[]};return Nn(n),n}function wn(e){return{$:2,b:function(n){n({$:0,a:Ln(e)})},c:null}}function $n(n,e){n.h.push(e),Nn(n)}var zn=x(function(e,r){return{$:2,b:function(n){$n(e,r),n({$:0,a:f})},c:null}}),Dn=!1,An=[];function Nn(n){if(An.push(n),!Dn){for(Dn=!0;n=An.shift();)!function(e){for(;e.f;){var n=e.f.$;if(0===n||1===n){for(;e.g&&e.g.$!==n;)e.g=e.g.i;if(!e.g)return;e.f=e.g.b(e.f.a),e.g=e.g.i}else{if(2===n)return e.f.c=e.f.b(function(n){e.f=n,Nn(e)});if(5===n){if(0===e.h.length)return;e.f=e.f.b(e.h.shift())}else e.g={$:3===n?0:1,b:e.f.b,i:e.g},e.f=e.f.d}}}(n);Dn=!1}}function Fn(n,e,r,t,o,a){e=D(dn,n,e?e.flags:void 0);qt(e)||B(2);var i={},e=r(e.a),c=e.a,u=a(l,c),a=function(n,e){var r,t;for(t in _n){var o=_n[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=function(n,e){var t={g:e,h:void 0},o=n.c,a=n.d,i=n.e,c=n.f;return t.h=Ln(D(Mn,function n(r){return D(Mn,n,{$:5,b:function(n){var e=n.a;return 0===n.$?A(a,t,e,r):i&&c?N(o,t,e.i,e.j,r):A(o,t,i?e.i:e.j,r)}})},n.b))}(o,e)}return r}(i,l);function l(n,e){n=D(t,n,c);u(c=n.a,e),Hn(i,n.b,o(c))}return Hn(i,e.b,o(c)),a?{ports:a}:{}}l(function(n,e,r,t){return Fn(e,t,n.gc,n.gE,n.gz,function(){return function(){}})});var _n={},Vn=x(function(e,r){return{$:2,b:function(n){e.g(r),n({$:0,a:f})},c:null}}),qn=x(function(n,e){return D(zn,n.h,{$:0,a:e})});function En(e){return function(n){return{$:1,k:e,l:n}}}function Bn(n){return{$:2,m:n}}x(function(n,e){return{$:3,n:n,o:e}});var Rn,In=[],kn=!1;function Hn(n,e,r){if(In.push({p:n,q:e,r:r}),!kn){kn=!0;for(var o;o=In.shift();)!function(n,e){var r,t={};for(r in jn(!0,o.q,t,null),jn(!1,e,t,null),n)$n(n[r],{$:"fx",a:t[r]||{i:h,j:h}})}(o.p,o.r);kn=!1}}function jn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return D(n?_n[e].e:_n[e].f,function(n){for(var e=r;e;e=e.t)n=e.s(n);return n},t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:h,j:h},n?r.i={$:1,a:e,b:r.i}:r.j={$:1,a:e,b:r.j},r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)jn(n,i.a,r,t);return;case 3:return void jn(n,e.o,r,{s:e.n,t:t})}}x(function(n,e){return e}),x(function(e,r){return function(n){return e(r(n))}});var Un="undefined"!=typeof document?document:{};function Wn(n){return{$:0,a:n}}l(function(n,e,r,t){t=t.node;return t.parentNode.replaceChild(re(n,function(){}),t),{}});var On=x(function(a,i){return x(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:ne(n),e:r,f:a,b:t}})})(void 0),Gn=x(function(a,i){return x(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:ne(n),e:r,f:a,b:t}})})(void 0);x(function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}}),x(function(n,e){return{$:5,l:[n,e],m:function(){return n(e)},k:void 0}}),s(function(n,e,r){return{$:5,l:[n,e,r],m:function(){return D(n,e,r)},k:void 0}}),l(function(n,e,r,t){return{$:5,l:[n,e,r,t],m:function(){return A(n,e,r,t)},k:void 0}}),r(function(n,e,r,t,o){return{$:5,l:[n,e,r,t,o],m:function(){return N(n,e,r,t,o)},k:void 0}}),t(function(n,e,r,t,o,a){return{$:5,l:[n,e,r,t,o,a],m:function(){return F(n,e,r,t,o,a)},k:void 0}}),o(function(n,e,r,t,o,a,i){return{$:5,l:[n,e,r,t,o,a,i],m:function(){return T(n,e,r,t,o,a,i)},k:void 0}}),z(function(n,e,r,t,o,a,i,c){return{$:5,l:[n,e,r,t,o,a,i,c],m:function(){return S(n,e,r,t,o,a,i,c)},k:void 0}}),a(function(n,e,r,t,o,a,i,c,u){return{$:5,l:[n,e,r,t,o,a,i,c,u],m:function(){return m(n,e,r,t,o,a,i,c,u)},k:void 0}});var Yn=x(function(n,e){return{$:"a0",n:n,o:e}}),Jn=x(function(n,e){return{$:"a1",n:n,o:e}}),Kn=(x(function(n,e){return{$:"a2",n:n,o:e}}),x(function(n,e){return{$:"a3",n:n,o:e}}));s(function(n,e,r){return{$:"a4",n:e,o:{f:n,o:r}}}),x(function(n,e){return"a0"===e.$?D(Yn,e.n,function(n,e){var r=It(e);return{$:e.$,a:r?A(Bt,r<3?Xn:Zn,Rt(n),e.a):D(Et,n,e.a)}}(n,e.o)):e});var Qn,Xn=x(function(n,e){return{a:n(e.a),b:e.b}}),Zn=x(function(n,e){return{aG:n(e.aG),dR:e.dR,dF:e.dF}});function ne(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;"a2"!==t?(r=e[t]||(e[t]={}),"a3"===t&&"class"===o?ee(r,o,a):r[o]=a):"className"===o?ee(e,o,a):e[o]=a}return e}function ee(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function re(n,e){var r=n.$;if(5===r)return re(n.k||(n.k=n.m()),e);if(0===r)return Un.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=re(t,a)).elm_event_node_ref=a,i}if(3===r)return te(i=n.h(n.g),e,n.d),i;var i=n.f?Un.createElementNS(n.f,n.c):Un.createElement(n.c);Rn&&"a"==n.c&&i.addEventListener("click",Rn(i)),te(i,e,n.d);for(var c=n.e,u=0;u<c.length;u++)i.appendChild(re(1===r?c[u]:c[u].b,e));return i}function te(n,e,r){for(var t in r){var o=r[t];"a1"===t?function(n,e){var r,t=n.style;for(r in e)t[r]=e[r]}(n,o):"a0"===t?function(n,e,r){var t,o=n.elmFs||(n.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(t,i)}i=function(u,n){function l(n){var e=l.q,r=mn(e.a,n);if(qt(r)){for(var t,o=It(e),e=r.a,a=o?o<3?e.a:e.aG:e,r=1==o?e.b:3==o&&e.dR,i=(r&&n.stopPropagation(),(2==o?e.b:3==o&&e.dF)&&n.preventDefault(),u);t=i.j;){if("function"==typeof t)a=t(a);else for(var c=t.length;c--;)a=t[c](a);i=i.p}i(a,r)}}return l.q=n,l}(e,a),n.addEventListener(t,i,Qn&&{passive:It(a)<2}),o[t]=i}else n.removeEventListener(t,i),o[t]=void 0}}(n,e,o):"a3"===t?function(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}(n,o):"a4"===t?function(n,e){for(var r in e){var t=e[r],o=t.f,t=t.o;void 0!==t?n.setAttributeNS(o,r,t):n.removeAttributeNS(o,r)}}(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){Qn=!0}}))}catch(n){}function oe(n,e){var r=[];return ie(n,e,r,0),r}function ae(n,e,r,t){t={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(t),t}function ie(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void ae(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;o<r;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,u=i.length,l=u===c.length;l&&u--;)l=i[u]===c[u];if(l)return void(e.k=n.k);e.k=e.m();var f=[];return ie(n.k,e.k,f,0),void(0<f.length&&ae(r,1,t,f));case 4:for(var s=n.j,v=e.j,d=!1,m=n.k;4===m.$;)d=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var p=e.k;4===p.$;)d=!0,"object"!=typeof v?v=[v,p.j]:v.push(p.j),p=p.k;return d&&s.length!==v.length?void ae(r,0,t,e):((d?function(n,e){for(var r=0;r<n.length;r++)if(n[r]!==e[r])return!1;return!0}(s,v):s===v)||ae(r,2,t,v),void ie(m,p,r,t+1));case 0:return void(n.a!==e.a&&ae(r,3,t,e.a));case 1:return void ce(n,e,r,t,le);case 2:return void ce(n,e,r,t,fe);case 3:if(n.h!==e.h)return void ae(r,0,t,e);f=ue(n.d,e.d);f&&ae(r,4,t,f);f=e.i(n.g,e.g);return void(f&&ae(r,5,t,f))}}}function ce(n,e,r,t,o){var a;n.c===e.c&&n.f===e.f?((a=ue(n.d,e.d))&&ae(r,4,t,a),o(n,e,r,t)):ae(r,0,t,e)}function ue(n,e,r){var t,o,a,i,c;for(o in n)"a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o?o in e?(a=n[o])===(i=e[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(n,e){return n.$==e.$&&xn(n.a,e.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null:(i=ue(n[o],e[o]||{},o))&&((t=t||{})[o]=i);for(c in e)c in n||((t=t||{})[c]=e[c]);return t}function le(n,e,r,t){var o=n.e,a=e.e,n=o.length,e=a.length;e<n?ae(r,6,t,{v:e,i:n-e}):n<e&&ae(r,7,t,{v:n,e:a});for(var i=n<e?n:e,c=0;c<i;c++){var u=o[c];ie(u,a[c],r,++t),t+=u.b||0}}function fe(n,e,r,t){for(var o=[],a={},i=[],c=n.e,u=e.e,l=c.length,f=u.length,s=0,v=0,d=t;s<l&&v<f;){var m,p=(m=c[s]).a,g=(w=u[v]).a,b=m.b,h=w.b,x=void 0,S=void 0;if(p!==g){var P,y,M,C,T=c[s+1],L=u[v+1];if(T&&(y=T.b,S=g===(P=T.a)),L&&(C=L.b,x=p===(M=L.a)),x&&S)ie(b,C,o,++d),ve(a,o,p,h,v,i),d+=b.b||0,de(a,o,p,y,++d),d+=y.b||0,s+=2,v+=2;else if(x)d++,ve(a,o,g,h,v,i),ie(b,C,o,d),d+=b.b||0,s+=1,v+=2;else if(S)de(a,o,p,b,++d),d+=b.b||0,ie(y,h,o,++d),d+=y.b||0,s+=2,v+=1;else{if(!T||P!==M)break;de(a,o,p,b,++d),ve(a,o,g,h,v,i),d+=b.b||0,ie(y,C,o,++d),d+=y.b||0,s+=2,v+=2}}else ie(b,h,o,++d),d+=b.b||0,s++,v++}for(;s<l;)de(a,o,(m=c[s]).a,b=m.b,++d),d+=b.b||0,s++;for(;v<f;){var w,$=$||[];ve(a,o,(w=u[v]).a,w.b,void 0,$),v++}(0<o.length||0<i.length||$)&&ae(r,8,t,{w:o,x:i,y:$})}var se="_elmW6BL";function ve(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return ie(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}ve(n,e,r+se,t,o,a)}function de(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return ie(t,a.z,i,o),void ae(e,9,o,{w:i,A:a})}de(n,e,r+se,t,o)}else{e=ae(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:e}}}function me(n,e,r,t){!function n(e,r,t,o,a,i,c){var u=t[o];var l=u.r;for(;l===a;){var f,s=u.$;if(1===s?me(e,r.k,u.s,c):8===s?(u.t=e,u.u=c,0<(f=u.s.w).length&&n(e,r,f,0,a,i,c)):9===s?(u.t=e,u.u=c,(s=u.s)&&(s.A.s=e,0<(f=s.w).length&&n(e,r,f,0,a,i,c))):(u.t=e,u.u=c),!(u=t[++o])||(l=u.r)>i)return o}var v=r.$;if(4===v){for(var d=r.k;4===d.$;)d=d.k;return n(e,d,t,o,a+1,i,e.elm_event_node_ref)}var m=r.e;var p=e.childNodes;for(var g=0;g<m.length;g++){var b=1===v?m[g]:m[g].b,h=++a+(b.b||0);if(a<=l&&l<=h&&(o=n(p[g],b,t,o,a,h,c),!(u=t[o])||(l=u.r)>i))return o;a=h}return o}(n,e,r,0,0,e.b,t)}function pe(n,e,r,t){return 0===r.length?n:(me(n,e,r,t),ge(n,r))}function ge(n,e){for(var r=0;r<e.length;r++){var t=e[r],o=t.t,t=function(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,r=re(e,r);r.elm_event_node_ref||(r.elm_event_node_ref=n.elm_event_node_ref);t&&r!==n&&t.replaceChild(r,n);return r}(n,e.s,e.u);case 4:return te(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return ge(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;t<r.i;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];t<o.length;t++)n.insertBefore(re(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=ge(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(!n)return;for(var r=Un.createDocumentFragment(),t=0;t<n.length;t++){var o=n[t].A;r.appendChild(2===o.c?o.s:re(o.z,e.u))}return r}(r.y,e);n=ge(n,r.w);for(var o=r.x,a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:re(c.z,e.u);n.insertBefore(c,n.childNodes[i.r])}t&&n.appendChild(t);return n}(n,e);case 5:return e.s(n);default:B(10)}}(o,t);o===n&&(n=t)}return n}function be(n){if(3===n.nodeType)return{$:0,a:n.textContent};if(1!==n.nodeType)return{$:0,a:""};for(var e=h,r=n.attributes,t=r.length;t--;)var o=r[t],e={$:1,a:D(Kn,o.name,o.value),b:e};for(var a=n.tagName.toLowerCase(),i=h,c=n.childNodes,t=c.length;t--;)i={$:1,a:be(c[t]),b:i};return A(On,a,e,i)}var he=l(function(e,n,r,i){return Fn(n,i,e.gc,e.gE,e.gz,function(r,n){var t=e.gH,o=i.node,a=be(o);return Pe(n,function(n){var e=t(n),n=oe(a,e);o=pe(o,a,n,r),a=e})})}),xe=(l(function(e,n,r,t){return Fn(n,t,e.gc,e.gE,e.gz,function(t,n){var o=e.dO&&e.dO(t),a=e.gH,i=Un.title,c=Un.body,u=be(c);return Pe(n,function(n){Rn=o;var e=a(n),r=On("body")(h)(e.cY),n=oe(u,r);c=pe(c,u,n,t),u=r,Rn=0,i!==e.gB&&(Un.title=i=e.gB)})})}),"undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)}),Se="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)};function Pe(r,t){t(r);var o=0;function a(){o=1===o?0:(Se(a),t(r),1)}return function(n,e){r=n,e?(t(r),2===o&&(o=1)):(0===o&&Se(a),o=2)}}x(function(n,e){return D(bo,Zt,{$:2,b:function(){e&&history.go(e),n()},c:null})}),x(function(n,e){return D(bo,Zt,{$:2,b:function(){history.pushState({},"",e),n()},c:null})}),x(function(n,e){return D(bo,Zt,{$:2,b:function(){history.replaceState({},"",e),n()},c:null})});var ye={addEventListener:function(){},removeEventListener:function(){}},Me="undefined"!=typeof document?document:ye,Ce="undefined"!=typeof window?window:ye,Te=s(function(e,r,t){return wn({$:2,b:function(){function n(n){Ln(t(n))}return e.addEventListener(r,n,Qn&&{passive:!0}),function(){e.removeEventListener(r,n)}},c:null})}),Le=x(function(n,e){e=mn(n,e);return qt(e)?rt(e.a):tt});function we(r,t){return{$:2,b:function(e){Se(function(){var n=document.getElementById(r);e(n?{$:0,a:t(n)}:{$:1,a:kt(r)})})},c:null}}function $e(e){return{$:2,b:function(n){Se(function(){n({$:0,a:e()})})},c:null}}function ze(){var n=Me.body,e=Me.documentElement;return{k:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),l:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}}x(function(e,n){return we(n,function(n){return n[e](),f})}),x(function(n,e){return $e(function(){return Ce.scroll(n,e),f})}),s(function(n,e,r){return we(n,function(n){return n.scrollLeft=e,n.scrollTop=r,f})});var De=t(function(a,i,c,u,l,n){var f=9728!==i&&9729!==i;return{$:2,b:function(r){var t=new Image;function o(n){var e=n.createTexture();return n.bindTexture(n.TEXTURE_2D,e),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,l),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,a),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,u),f&&n.generateMipmap(n.TEXTURE_2D),n.bindTexture(n.TEXTURE_2D,null),e}t.onload=function(){var n=t.width,e=t.height;r(0==(n&n-1)&&0==(e&e-1)||!f&&33071===c&&33071===u?{$:0,a:{$:0,fR:o,a:n,b:e}}:{$:1,a:D(Lo,n,e)})},t.onerror=function(){r({$:1,a:To})},"data:"!==n.slice(0,5)&&(t.crossOrigin="Anonymous"),t.src=n},c:null}}),Ae=0;function Ne(n,e){for(;e.b;e=e.b)n(e.a)}function Fe(n){for(var e=0;n.b;n=n.b)e++;return e}function _e(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)}function Ve(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)}var qe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Ee=r(function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}}),Be=x(function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)}),Re=x(function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)}),Ie=x(function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)}),ke=x(function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),He=x(function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),je=x(function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)}),Ue=x(function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)}),We=x(function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)}),Oe=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],Ge=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},_e,Ve,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function Ye(n,e,r){r=n.createShader(r);return n.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(r),r}function Je(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function Ke(n,e,r,t){for(var c=r.a.ec,u=[],o=0;o<c;o++)u.push(String.fromCharCode(97+o));var a=Je(n,e.type);if(void 0===a)throw Error("No info available for: "+e.type);var i=0,l=a.size*a.arraySize*c,f=new a.type(Fe(r.b)*l);Ne(function(n){!function(e,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)e[t++]=1===r?o[a]:o[a][i];else u.forEach(function(n){for(i=0;i<r;i++)e[t++]=1===r?o[n][a]:o[n][a][i]})}(f,a.size*a.arraySize,i,n,t[e.name]||e.name),i+=l},r.b);r=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),r}function Qe(n,e){if(0<e.a.em){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint16Array(Fe(n)*e),o=0;return Ne(function(n){if(1===e)t[o++]=n;else for(r=0;r<e;r++)t[o++]=n[String.fromCharCode(97+r)]},n),t}(e.c,e.a.em);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.ec*Fe(e.b),indexBuffer:null,buffers:{}}}var Xe=x(function(h,n){var x=h.f,S=x.gl;return S&&(S.viewport(0,0,S.drawingBufferWidth,S.drawingBufferHeight),x.depthTest.b||(S.depthMask(!0),x.depthTest.b=!0),x.stencilTest.c!==x.STENCIL_WRITEMASK&&(S.stencilMask(x.STENCIL_WRITEMASK),x.stencilTest.c=x.STENCIL_WRITEMASK),_e(x),Ve(x),S.clear(S.COLOR_BUFFER_BIT|S.DEPTH_BUFFER_BIT|S.STENCIL_BUFFER_BIT),Ne(function(n){if(n.d.b.b){var e,r,t,o,a;if(n.b.id&&n.c.id&&(i=x.programs[e=n.b.id+"#"+n.c.id]),!i){n.b.id?r=x.shaders[n.b.id]:n.b.id=Ae++,r||(r=Ye(S,n.b.src,S.VERTEX_SHADER),x.shaders[n.b.id]=r),n.c.id?t=x.shaders[n.c.id]:n.c.id=Ae++,t||(t=Ye(S,n.c.src,S.FRAGMENT_SHADER),x.shaders[n.c.id]=t);var i,c=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(S,r,t);(i={glProgram:c,attributes:Object.assign({},n.b.attributes,n.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,n,e,r){var t=e.glProgram,i=e.currentUniforms,c=0,u=n.f;for(var o={},l=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<l;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(n,e){var r=e.name,t=a.getUniformLocation(n,r);switch(e.type){case a.INT:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};case a.FLOAT:return function(n){i[r]!==n&&(a.uniform1f(t,n),i[r]=n)};case a.FLOAT_VEC2:return function(n){i[r]!==n&&(a.uniform2f(t,n[0],n[1]),i[r]=n)};case a.FLOAT_VEC3:return function(n){i[r]!==n&&(a.uniform3f(t,n[0],n[1],n[2]),i[r]=n)};case a.FLOAT_VEC4:return function(n){i[r]!==n&&(a.uniform4f(t,n[0],n[1],n[2],n[3]),i[r]=n)};case a.FLOAT_MAT4:return function(n){i[r]!==n&&(a.uniformMatrix4fv(t,!1,new Float32Array(n)),i[r]=n)};case a.SAMPLER_2D:var o=c++;return function(n){a.activeTexture(a.TEXTURE0+o);var e=u.textures.get(n);e||(e=n.fR(a),u.textures.set(n,e)),a.bindTexture(a.TEXTURE_2D,e),i[r]!==n&&(a.uniform1i(t,o),i[r]=n)};case a.BOOL:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};default:return function(){}}}(t,s)}return o}(S,h,i,Object.assign({},n.b.uniforms,n.c.uniforms));for(var u=S.getProgramParameter(c,S.ACTIVE_ATTRIBUTES),l=0;l<u;l++){var f=S.getActiveAttrib(c,l),s=S.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}x.programs[e=n.b.id+"#"+n.c.id]=i}x.lastProgId!==e&&(S.useProgram(i.glProgram),x.lastProgId=e),o=i.uniformSetters,Object.keys(a=n.e).forEach(function(n){var e=o[n];e&&e(a[n])});var v=x.buffers.get(n.d);for(v||(v=Qe(S,n.d),x.buffers.set(n.d,v)),l=0;l<i.activeAttributes.length;l++){s=i.activeAttributeLocations[l],void 0===v.buffers[(f=i.activeAttributes[l]).name]&&(v.buffers[f.name]=Ke(S,f,n.d,i.attributes)),S.bindBuffer(S.ARRAY_BUFFER,v.buffers[f.name]);var d=Je(S,f.type);if(1===d.arraySize)S.enableVertexAttribArray(s),S.vertexAttribPointer(s,d.size,d.baseType,!1,0,0);else for(var m=4*d.size,p=m*d.arraySize,g=0;g<d.arraySize;g++)S.enableVertexAttribArray(s+g),S.vertexAttribPointer(s+g,d.size,d.baseType,!1,p,m*g)}for(x.toggle=!x.toggle,Ne(rl(x),n.a),l=0;l<9;l++){var b=x[Oe[l]];b.toggle!==x.toggle&&b.enabled&&(Ge[l](x),b.enabled=!1,b.toggle=x.toggle)}v.indexBuffer?(S.bindBuffer(S.ELEMENT_ARRAY_BUFFER,v.indexBuffer),S.drawElements(n.d.a.eY,v.numIndices,S.UNSIGNED_SHORT,0)):S.drawArrays(n.d.a.eY,0,v.numIndices)}},h.g)),n}),Ze=s(function(n,e,r){return function(n,e,r,t){return{$:3,d:ne(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},ir,cr)}),nr=x(function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a}),er=x(function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push(function(n){n.clearDepth(e.a)})}),rr=x(function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push(function(n){n.clearStencil(e.a)})}),tr=x(function(n){n.contextAttributes.antialias=!0}),or=x(function(n,e){n.sceneSettings.push(function(n){n.clearColor(e.a,e.b,e.c,e.d)})}),ar=x(function(n){n.contextAttributes.preserveDrawingBuffer=!0});function ir(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ne(function(n){return D(el,e,n)},n.h);var r=Un.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach(function(n){n(t)}),t.getExtension("OES_standard_derivatives"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),qe(function(){return D(Xe,n,r)})):(r=Un.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function cr(n,e){return e.f=n.f,Xe(e)}var ur=x(function(n,e){return new Float64Array([n,e])});function lr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1])}x(function(n,e){return new Float64Array([n,e[1]])}),x(function(n,e){return new Float64Array([e[0],n])}),x(function(n,e){var r=new Float64Array(2);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r}),x(function(n,e){var r=new Float64Array(2);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r}),x(function(n,e){var r=new Float64Array(2);r[0]=n[0]-e[0],r[1]=n[1]-e[1];e=1/lr(r);return r[0]=r[0]*e,r[1]=r[1]*e,r}),x(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return Math.sqrt(r*r+e*e)}),x(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return r*r+e*e}),x(function(n,e){var r=new Float64Array(2);return r[0]=e[0]*n,r[1]=e[1]*n,r}),x(function(n,e){return n[0]*e[0]+n[1]*e[1]});var fr=new Float64Array(3),sr=new Float64Array(3),vr=new Float64Array(3),dr=s(function(n,e,r){return new Float64Array([n,e,r])});function mr(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r}function pr(n,e,r){return void 0===r&&(r=new Float64Array(3)),br(mr(n,e,r),r)}function gr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2])}function br(n,e){void 0===e&&(e=new Float64Array(3));var r=1/gr(n);return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e}function hr(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]}x(function(n,e){return new Float64Array([n,e[1],e[2]])}),x(function(n,e){return new Float64Array([e[0],n,e[2]])}),x(function(n,e){return new Float64Array([e[0],e[1],n])}),x(function(n,e){var r=new Float64Array(3);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r}),x(mr),x(pr),x(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return Math.sqrt(r*r+t*t+e*e)}),x(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return r*r+t*t+e*e});var xr=x(function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])});function Sr(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[1]*e[2]-n[2]*e[1],r[1]=n[2]*e[0]-n[0]*e[2],r[2]=n[0]*e[1]-n[1]*e[0],r}x(hr),x(Sr),x(function(n,e){var r,t=fr,o=new Float64Array(3);return t[0]=n[3],t[1]=n[7],t[2]=n[11],r=hr(e,t)+n[15],t[0]=n[0],t[1]=n[4],t[2]=n[8],o[0]=(hr(e,t)+n[12])/r,t[0]=n[1],t[1]=n[5],t[2]=n[9],o[1]=(hr(e,t)+n[13])/r,t[0]=n[2],t[1]=n[6],t[2]=n[10],o[2]=(hr(e,t)+n[14])/r,o});var Pr=l(function(n,e,r,t){return new Float64Array([n,e,r,t])});function yr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]+n[3]*n[3])}x(function(n,e){return new Float64Array([n,e[1],e[2],e[3]])}),x(function(n,e){return new Float64Array([e[0],n,e[2],e[3]])}),x(function(n,e){return new Float64Array([e[0],e[1],n,e[3]])}),x(function(n,e){return new Float64Array([e[0],e[1],e[2],n])}),x(function(n,e){var r=new Float64Array(4);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r[3]=n[3]+e[3],r}),x(function(n,e){var r=new Float64Array(4);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3],r}),x(function(n,e){var r=new Float64Array(4);r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3];e=1/yr(r);return r[0]=r[0]*e,r[1]=r[1]*e,r[2]=r[2]*e,r[3]=r[3]*e,r}),x(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return Math.sqrt(r*r+t*t+o*o+e*e)}),x(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return r*r+t*t+o*o+e*e}),x(function(n,e){var r=new Float64Array(4);return r[0]=e[0]*n,r[1]=e[1]*n,r[2]=e[2]*n,r[3]=e[3]*n,r}),x(function(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]+n[3]*e[3]});var Mr=new Float64Array(16),Cr=new Float64Array(16);function Tr(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2*o/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*o/(t-r),i[6]=0,i[7]=0,i[8]=(e+n)/(e-n),i[9]=(t+r)/(t-r),i[10]=-(a+o)/(a-o),i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*a*o/(a-o),i[15]=0,i}function Lr(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2/(t-r),i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-2/(a-o),i[11]=0,i[12]=-(e+n)/(e-n),i[13]=-(t+r)/(t-r),i[14]=-(a+o)/(a-o),i[15]=1,i}function wr(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[3],c=n[4],u=n[5],l=n[6],f=n[7],s=n[8],v=n[9],d=n[10],m=n[11],p=n[12],g=n[13],b=n[14],h=n[15],x=e[0],S=e[1],P=e[2],y=e[3],M=e[4],C=e[5],T=e[6],L=e[7],w=e[8],$=e[9],z=e[10],D=e[11],A=e[12],N=e[13],n=e[14],e=e[15];return r[0]=t*x+c*S+s*P+p*y,r[1]=o*x+u*S+v*P+g*y,r[2]=a*x+l*S+d*P+b*y,r[3]=i*x+f*S+m*P+h*y,r[4]=t*M+c*C+s*T+p*L,r[5]=o*M+u*C+v*T+g*L,r[6]=a*M+l*C+d*T+b*L,r[7]=i*M+f*C+m*T+h*L,r[8]=t*w+c*$+s*z+p*D,r[9]=o*w+u*$+v*z+g*D,r[10]=a*w+l*$+d*z+b*D,r[11]=i*w+f*$+m*z+h*D,r[12]=t*A+c*N+s*n+p*e,r[13]=o*A+u*N+v*n+g*e,r[14]=a*A+l*N+d*n+b*e,r[15]=i*A+f*N+m*n+h*e,r}function $r(n,e,r){var t=new Float64Array(16);return t[0]=n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function zr(n,e,r){var t=new Float64Array(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n,t[13]=e,t[14]=r,t[15]=1,t}new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),t(Tr),l(function(n,e,r,t){var o=r*Math.tan(n*Math.PI/360),n=-o;return Tr(n*e,o*e,n,o,r,t)}),t(Lr),l(function(n,e,r,t){return Lr(n,e,r,t,-1,1)}),x(wr),x(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[4],c=n[5],u=n[6],l=n[8],f=n[9],s=n[10],v=n[12],d=n[13],m=n[14],p=e[0],g=e[1],b=e[2],h=e[4],x=e[5],S=e[6],P=e[8],y=e[9],M=e[10],C=e[12],n=e[13],e=e[14];return r[0]=t*p+i*g+l*b,r[1]=o*p+c*g+f*b,r[2]=a*p+u*g+s*b,r[3]=0,r[4]=t*h+i*x+l*S,r[5]=o*h+c*x+f*S,r[6]=a*h+u*x+s*S,r[7]=0,r[8]=t*P+i*y+l*M,r[9]=o*P+c*y+f*M,r[10]=a*P+u*y+s*M,r[11]=0,r[12]=t*C+i*n+l*e+v,r[13]=o*C+c*n+f*e+d,r[14]=a*C+u*n+s*e+m,r[15]=1,r}),x(function(n,e){var r=new Float64Array(16),t=(e=br(e,fr))[0],o=e[1],a=e[2],i=Math.cos(n),e=1-i,n=Math.sin(n);return r[0]=t*t*e+i,r[1]=o*t*e+a*n,r[2]=a*t*e-o*n,r[3]=0,r[4]=t*o*e-a*n,r[5]=o*o*e+i,r[6]=o*a*e+t*n,r[7]=0,r[8]=t*a*e+o*n,r[9]=o*a*e-t*n,r[10]=a*a*e+i,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}),s(function(n,e,r){var t=new Float64Array(16),o=1/gr(e),a=e[0]*o,i=e[1]*o,c=e[2]*o,u=Math.cos(n),l=1-u,f=Math.sin(n),s=a*f,v=i*f,d=c*f,m=a*i*l,p=a*c*l,g=i*c*l,b=a*a*l+u,h=m+d,x=p-v,S=m-d,P=i*i*l+u,y=g+s,M=p+v,C=g-s,T=c*c*l+u,e=r[0],o=r[1],n=r[2],f=r[3],a=r[4],m=r[5],d=r[6],i=r[7],p=r[8],v=r[9],g=r[10],s=r[11],c=r[12],l=r[13],u=r[14],r=r[15];return t[0]=e*b+a*h+p*x,t[1]=o*b+m*h+v*x,t[2]=n*b+d*h+g*x,t[3]=f*b+i*h+s*x,t[4]=e*S+a*P+p*y,t[5]=o*S+m*P+v*y,t[6]=n*S+d*P+g*y,t[7]=f*S+i*P+s*y,t[8]=e*M+a*C+p*T,t[9]=o*M+m*C+v*T,t[10]=n*M+d*C+g*T,t[11]=f*M+i*C+s*T,t[12]=c,t[13]=l,t[14]=u,t[15]=r,t}),s($r),l(function(n,e,r,t){var o=new Float64Array(16);return o[0]=t[0]*n,o[1]=t[1]*n,o[2]=t[2]*n,o[3]=t[3]*n,o[4]=t[4]*e,o[5]=t[5]*e,o[6]=t[6]*e,o[7]=t[7]*e,o[8]=t[8]*r,o[9]=t[9]*r,o[10]=t[10]*r,o[11]=t[11]*r,o[12]=t[12],o[13]=t[13],o[14]=t[14],o[15]=t[15],o}),x(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],n=n[2];return r[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r[4]=e[4]*o,r[5]=e[5]*o,r[6]=e[6]*o,r[7]=e[7]*o,r[8]=e[8]*n,r[9]=e[9]*n,r[10]=e[10]*n,r[11]=e[11]*n,r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15],r}),s(zr),l(function(n,e,r,t){var o=new Float64Array(16),a=t[0],i=t[1],c=t[2],u=t[3],l=t[4],f=t[5],s=t[6],v=t[7],d=t[8],m=t[9],p=t[10],g=t[11];return o[0]=a,o[1]=i,o[2]=c,o[3]=u,o[4]=l,o[5]=f,o[6]=s,o[7]=v,o[8]=d,o[9]=m,o[10]=p,o[11]=g,o[12]=a*n+l*e+d*r+t[12],o[13]=i*n+f*e+m*r+t[13],o[14]=c*n+s*e+p*r+t[14],o[15]=u*n+v*e+g*r+t[15],o}),x(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=e[0],c=e[1],u=e[2],l=e[3],f=e[4],s=e[5],v=e[6],d=e[7],m=e[8],p=e[9],g=e[10],n=e[11];return r[0]=i,r[1]=c,r[2]=u,r[3]=l,r[4]=f,r[5]=s,r[6]=v,r[7]=d,r[8]=m,r[9]=p,r[10]=g,r[11]=n,r[12]=i*t+f*o+m*a+e[12],r[13]=c*t+s*o+p*a+e[13],r[14]=u*t+v*o+g*a+e[14],r[15]=l*t+d*o+n*a+e[15],r}),s(function(n,e,r){var t=pr(n,e,fr),o=br(Sr(r,t,sr),sr),a=br(Sr(t,o,vr),vr),e=Mr,r=Cr;return e[0]=o[0],e[1]=a[0],e[2]=t[0],e[3]=0,e[4]=o[1],e[5]=a[1],e[6]=t[1],e[7]=0,e[8]=o[2],e[9]=a[2],e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,r[e[14]=0]=e[15]=1,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=1,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=1,r[11]=0,r[12]=-n[0],r[13]=-n[1],r[14]=-n[2],r[15]=1,wr(e,r)}),s(function(n,e,r){var t=new Float64Array(16);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=0,t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=0,t[8]=r[0],t[9]=r[1],t[10]=r[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t});var Dr=x(function(n,e){return n&e});function Ar(n){return D(ct,"\n    ",D(ut,"\n",n))}function Nr(n){return A(lt,x(function(n,e){return e+1}),0,n)}function Fr(n){return 97<=(n=mt(n))&&n<=122}function _r(n){return(n=mt(n))<=90&&65<=n}function Vr(n){return Fr(n)||_r(n)||function(n){n=mt(n);return n<=57&&48<=n}(n)}function qr(n){return n}function Er(n){return n}function Br(n){return A(ro,io(jr),no(h),n)}x(function(n,e){return n|e}),x(function(n,e){return n^e});var Rr=x(function(n,e){return e<<n}),ye=(x(function(n,e){return e>>n}),x(function(n,e){return e>>>n})),Ir=1,kr=2,Hr=0,jr=p,Ur=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=A(n,r.b,r.c,A(Ur,n,e,r.e));n=o,e=a,r=t}}),Wr=function(n){return A(Ur,s(function(n,e,r){return D(jr,{a:n,b:e},r)}),h,n)},Or=q,Gr=s(function(r,n,e){var t=e.c,e=e.d,o=x(function(n,e){return A(Or,n.$?r:o,e,n.a)});return A(Or,o,A(Or,r,n,e),t)}),Yr=function(n){return A(Gr,jr,h,n)},Jr=function(n){return{$:1,a:n}},Kr=x(function(n,e){return{$:3,a:n,b:e}}),Qr=x(function(n,e){return{$:0,a:n,b:e}}),Xr=x(function(n,e){return{$:1,a:n,b:e}}),Zr=function(n){return{$:0,a:n}},nt=function(n){return{$:2,a:n}},et=R,rt=function(n){return{$:0,a:n}},tt={$:1},ot=en,at=Pn,it=an,ct=x(function(n,e){return D(Z,n,b(e))}),ut=x(function(n,e){return g(D(X,n,e))}),lt=s(function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=D(n,r.a,e);n=o,e=a,r=t}}),ft=C,st=s(function(n,e,r){for(;;){if(1<=y(n,e))return r;var t=n,o=e-1,a=D(jr,e,r);n=t,e=o,r=a}}),vt=x(function(n,e){return A(st,n,e,h)}),dt=x(function(n,e){return A(ft,n,D(vt,0,Nr(e)-1),e)}),mt=function(n){var e=n.charCodeAt(0);return e<55296||56319<e?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},pt=function(n){return A(lt,jr,h,n)},gt=function(n){var e=n.charCodeAt(0);return isNaN(e)?tt:rt(e<55296||56319<e?{a:n[0],b:n.slice(1)}:{a:n[0]+n[1],b:n.slice(2)})},bt=x(function(n,e){return"\n\n("+it(n+1)+(") "+Ar(ht(e)))}),ht=function(n){return D(xt,n,h)},xt=x(function(n,e){n:for(;;)switch(n.$){case 0:var r=n.a,t=n.b,o=function(){var n=gt(r);if(1===n.$)return!1;var e=n.a,n=e.b;return function(n){return Fr(n)||_r(n)}(e.a)&&D(ot,Vr,n)}(),a=t,o=D(jr,o?"."+r:"['"+r+"']",e);n=a,e=o;continue n;case 1:var t=n.b,i="["+it(n.a)+"]",a=t,o=D(jr,i,e);n=a,e=o;continue n;case 2:var c=n.a;if(c.b){if(c.b.b){var u=(e.b?"The Json.Decode.oneOf at json"+D(ct,"",pt(e)):"Json.Decode.oneOf")+" failed in the following "+it(Nr(c))+" ways:";return D(ct,"\n\n",D(jr,u,D(dt,bt,c)))}n=a=t=c.a,e=o=e;continue n}return"Ran into a Json.Decode.oneOf with no possibilities"+(e.b?" at json"+D(ct,"",pt(e)):"!");default:i=n.a,c=n.b;return(u=e.b?"Problem with the value at json"+D(ct,"",pt(e))+":\n\n    ":"Problem with the given value:\n\n")+(Ar(D(at,4,c))+"\n\n")+i}}),St=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),Pt=[],yt=O,Mt=x(function(n,e){return K(e)/K(n)}),Ct=yt(D(Mt,2,32)),Tt=N(St,0,Ct,Pt,Pt),Lt=w,wt=(x(function(n,e){return n(e)}),x(function(n,e){return e(n)}),G),$t=function(n){return n.length},zt=x(function(n,e){return 0<y(n,e)?n:e}),Dt=$,At=x(function(n,e){for(;;){var r=D(Dt,32,n),t=r.b,r=D(jr,{$:0,a:r.a},e);if(!t.b)return pt(r);n=t,e=r}}),Nt=x(function(n,e){for(;;){var r=yt(e/32);if(1===r)return D(Dt,32,n).a;n=D(At,n,h),e=r}}),Ft=x(function(n,e){if(e.n){var r=32*e.n,t=wt(D(Mt,32,r-1)),n=n?pt(e.B):e.B,n=D(Nt,n,e.n);return N(St,$t(e.q)+r,D(zt,5,t*Ct),n,e.q)}return N(St,$t(e.q),Ct,Pt,e.q)}),_t=r(function(n,e,r,t,o){for(;;){if(e<0)return D(Ft,!1,{B:t,n:r/32|0,q:o});var a={$:1,a:A(Lt,32,e,n)};n=n,e=e-32,r=r,t=D(jr,a,t),o=o}}),Vt=x(function(n,e){if(0<n){var r=n%32,t=A(Lt,r,n-r,e);return F(_t,e,n-r-32,n,h,t)}return Tt}),qt=function(n){return!n.$},Et=sn,Bt=vn,Rt=function(n){return{$:0,a:n}},It=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},kt=Er,Ht=t(function(n,e,r,t,o,a){return{eh:a,ek:e,e0:t,e3:r,e6:n,e7:o}}),jt=rn,Ut=function(n){return n.length},Wt=nn,Ot=x(function(n,e){return n<1?e:A(Wt,n,Ut(e),e)}),Gt=on,Yt=x(function(n,e){return n<1?"":A(Wt,0,n,e)}),Jt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;o<n.length;++o){var a=n.charCodeAt(o);if(a<48||57<a)return tt;e=10*e+a-48}return o==t?tt:rt(45==r?-e:e)},Kt=r(function(n,e,r,t,o){if(""===o||D(jt,"@",o))return tt;var a=D(Gt,":",o);if(a.b){if(a.b.b)return tt;var i=a.a,a=Jt(D(Ot,i+1,o));if(1===a.$)return tt;a=a;return rt(T(Ht,n,D(Yt,i,o),a,e,r,t))}return rt(T(Ht,n,o,tt,e,r,t))}),Qt=l(function(n,e,r,t){if(""===t)return tt;var o=D(Gt,"/",t);if(o.b){o=o.a;return F(Kt,n,D(Ot,o,t),e,r,D(Yt,o,t))}return F(Kt,n,"/",e,r,t)}),Xt=s(function(n,e,r){if(""===r)return tt;var t=D(Gt,"?",r);if(t.b){t=t.a;return N(Qt,n,rt(D(Ot,t+1,r)),e,D(Yt,t,r))}return N(Qt,n,tt,e,r)}),Zt=(x(function(n,e){if(""===e)return tt;var r=D(Gt,"#",e);if(r.b){r=r.a;return A(Xt,n,rt(D(Ot,r+1,e)),D(Yt,r,e))}return A(Xt,n,tt,e)}),function(){for(;;)0}),no=yn,nn=no(0),eo=l(function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){t=c.a,a=c.b;if(a.b){c=a.b;return D(n,o,D(n,i,D(n,t,D(n,a.a,500<r?A(lt,n,e,pt(c)):N(eo,n,e,r+1,c)))))}return D(n,o,D(n,i,D(n,t,e)))}return D(n,o,D(n,i,e))}return D(n,o,e)}return e}),ro=s(function(n,e,r){return N(eo,n,e,0,r)}),to=x(function(r,n){return A(ro,x(function(n,e){return D(jr,r(n),e)}),h,n)}),oo=Mn,ao=x(function(e,n){return D(oo,function(n){return no(e(n))},n)}),io=s(function(r,n,t){return D(oo,function(e){return D(oo,function(n){return no(D(r,e,n))},t)},n)}),co=Vn,uo=x(function(n,e){return wn(D(oo,co(n),e))}),on=s(function(n,e){return D(ao,function(){return 0},Br(D(to,uo(n),e)))}),tn=s(function(){return no(0)}),Vn=x(function(n,e){return D(ao,n,e)});function lo(n){return{$:4,a:n}}function fo(n){return{$:2,a:n}}function so(n){return{$:3,a:n}}function vo(n){return{$:0,a:n}}function mo(n){return A(lt,x(function(n,e){return A(Io,n.a,n.b,e)}),Vo,n)}function po(e){return D(No,function(n){return D(Go,Ho("Unrecognized key: "+n),D(Wo,D(Fo,e,Rt),D(Uo,n,ko)))},D(jo,"key",Oo))}_n.Task={b:nn,c:on,d:tn,e:Vn,f:void 0};var go=En("Task"),bo=x(function(n,e){return go(D(ao,n,e))}),Vn=he,ho={$:0},xo=x(function(n,e){return{$:1,a:n,b:e}}),So=s(function(n,e,r){return n(e(r))}),Po=Cn,yo=x(function(n,e){return go(D(Po,D(So,D(So,no,n),Jr),D(oo,D(So,D(So,no,n),Zr),e)))}),Mo=Bn,Co=$e(function(){return{fd:ze(),gJ:{fu:Ce.pageXOffset,fv:Ce.pageYOffset,k:Me.documentElement.clientWidth,l:Me.documentElement.clientHeight}}}),To={$:0},Lo=x(function(n,e){return{$:1,a:n,b:e}}),wo=x(function(n,o){var e=n.cx,r=n.cz,t=n.cp,a=n.cR,i=n.ck;return N(l(function(n,e,r,t){return T(De,n,e,r,t,i,o)}),e,r,t,a)}),$o=x(function(e,r){return D(ao,function(n){return{$:1,a:{F:n,gr:e,gF:r}}},D(wo,e,r))}),zo=x(function(n,e){return D($o,n,e)}),Do={ck:!0,cp:10497,cx:9729,cz:9987,cR:10497},Ao=Bn,No=fn,Fo=s(function(n,e,r){return e(n(r))}),_o={$:-2},Vo=_o,qo=r(function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}}),Eo=r(function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return F(qo,n,e,r,t,o);var a=t.d,i=t.e;return F(qo,0,t.b,t.c,F(qo,1,a.b,a.c,a.d,a.e),F(qo,1,e,r,i,o))}var c=o.b,u=o.c,a=o.d,o=o.e;if(-1!==t.$||t.a)return F(qo,n,c,u,F(qo,0,e,r,t,a),o);var i;return F(qo,0,e,r,F(qo,1,t.b,t.c,t.d,i=t.e),F(qo,1,c,u,a,o))}),Bo=u,Ro=s(function(n,e,r){if(-2===r.$)return F(qo,0,n,e,_o,_o);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(D(Bo,n,o)){case 0:return F(Eo,t,o,a,A(Ro,n,e,i),c);case 1:return F(qo,t,o,e,i,c);default:return F(Eo,t,o,a,i,A(Ro,n,e,c))}}),Io=s(function(n,e,r){r=A(Ro,n,e,r);if(-1!==r.$||r.a)return r;return F(qo,1,r.b,r.c,r.d,r.e)}),ko=mo(g([{a:"ArrowLeft",b:{$:2,a:-1}},{a:"ArrowRight",b:{$:2,a:1}},{a:"ArrowUp",b:{$:3,a:1}},{a:"ArrowDown",b:{$:3,a:-1}},{a:" ",b:{$:0}},{a:"Shift",b:{$:1}},{a:"c",b:{$:4}}])),Ho=function(n){return{$:1,a:n}},jo=ln,Uo=x(function(n,e){n:for(;;){if(-2===e.$)return tt;var r=e.c,t=e.d,o=e.e;switch(D(Bo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return rt(r);default:n=n,e=o;continue n}}}),Wo=x(function(n,e){return e.$?tt:rt(n(e.a))}),Oo=un,Go=x(function(n,e){return e.$?n:e.a}),Yo=s(function(n,e,r){return{du:r,fa:e,fh:n}}),Jo=no(A(Yo,h,tt,0)),Ko=function(r){return{$:2,b:function(n){var e=r.f;2===e.$&&e.c&&e.c(),r.f=null,n({$:0,a:f})},c:null}},Qo={$:2,b:function(n){n({$:0,a:Date.now()})},c:null},Xo={$:2,b:function(n){var e=Se(function(){n({$:0,a:Date.now()})});return function(){xe(e)}},c:null},Zo=qn,na=wn,he=s(function(n,r,e){var t=e.fa,o={a:t,b:r};if(1!==o.a.$)return o.b.b?no(A(Yo,r,t,e.du)):D(oo,function(){return Jo},Ko(o.a.a));if(o.b.b)return D(oo,function(e){return D(oo,function(n){return no(A(Yo,r,rt(e),n))},Qo)},na(D(oo,Zo(n),Xo)));return Jo}),ea=Er,Cn=s(function(e,r,n){function t(n){return D(co,e,n.$?(0,n.a)(r-a):(0,n.a)(ea(r)))}var o=n.fh,a=n.du;return D(oo,function(n){return D(oo,function(){return no(A(Yo,o,rt(n),r))},Br(D(to,t,o)))},na(D(oo,Zo(e),Xo)))}),fn=x(function(n,e){return e.$?{$:1,a:D(So,n,e.a)}:{$:0,a:D(So,n,e.a)}});function ra(n){return{a:d(n.a?"w_":"d_",n.b),b:n}}_n["Browser.AnimationManager"]={b:Jo,c:he,d:Cn,e:0,f:fn};var ta=En("Browser.AnimationManager"),oa=function(n){return ta({$:1,a:n})},aa=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),ia=x(function(n,e){return{e1:e,fh:n}}),u=no(D(ia,h,Vo)),ca=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=A(n,r.b,r.c,A(ca,n,e,r.d));n=o,e=a,r=t}}),ua=t(function(u,l,f,n,e,r){var t=s(function(n,e,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:A(f,n,e,o)};var a=t.a,i=a.a,c=a.b,a=t.b;if(0<=y(i,n))return 0<y(i,n)?{a:t,b:A(f,n,e,o)}:{a:a,b:N(l,i,c,e,o)};n=n,e=e,r={a:a,b:A(u,i,c,o)}}}),r=A(ca,t,{a:Wr(n),b:r},e),e=r.a,r=r.b;return A(lt,x(function(n,e){return A(u,n.a,n.b,e)}),r,e)}),la=x(function(n,e){return{eg:e,er:n}}),fa=s(function(e,r,n){return D(ao,function(n){return{a:r,b:n}},A(Te,n.a?Ce:Me,n.b,function(n){return D(Zo,e,D(la,r,n))}))}),sa=x(function(n,e){return A(ca,Io,e,n)}),ln=s(function(o,n,e){var r=s(function(n,e,r){var t=r.c;return{a:r.a,b:r.b,c:D(jr,A(fa,o,n,e),t)}}),t=s(function(n,e,r){var t=r.b,o=r.c;return{a:D(jr,e,r.a),b:t,c:o}}),a=l(function(n,e,r,t){var o=t.c;return{a:t.a,b:A(Io,n,e,t.b),c:o}}),i=D(to,ra,n),e=T(ua,t,a,r,e.e1,mo(i),{a:h,b:Vo,c:h}),c=e.b,u=e.c;return D(oo,function(n){return no(D(ia,i,D(sa,c,mo(n))))},D(oo,function(){return Br(u)},Br(D(to,Ko,e.a))))}),va=s(function(n,e,r){e=n(e);return e.$?r:D(jr,e.a,r)}),da=x(function(n,e){return A(ro,va(n),h,e)}),un=s(function(n,e,r){var t=e.er,o=e.eg,e=D(da,function(n){var e=n.b,e=e.c;return P(n.a,t)?D(Le,e,o):tt},r.fh);return D(oo,function(){return no(r)},Br(D(to,co(n),e)))}),qn=x(function(n,e){return A(aa,e.a,e.b,D(Et,n,e.c))});function ma(n){return n.a}function pa(n){return n}function ga(n){return n}function ba(n){return A(lt,x(function(n,e){return D(jr,n,e)}),h,n.fD)}function ha(n){return n.F}function xa(n){return n<0?-n:n}function Sa(n){return D(lu,n,su)}function Pa(n){switch(n.$){case 2:return n.a.fs;case 0:return n.a.fs;case 1:default:return 0}}function ya(n){var e=n.fu,r=n.fv;return e*e+r*r+(n=n.cS)*n}function Ma(n){var e=n.fu,r=n.fv;return ou(e*e+r*r+(n=n.cS)*n)}function Ca(n){var e=(o=n.b).a,r=o.b,t=o.c,o=o.d;return D(lu,D(xu,n,vu),N(fu,-e,-r,-t,o))}function Ta(n){var e=n.b,r=e.a,t=e.b;return{ez:1-2*t*t-2*(n=e.c)*n,eA:2*r*t-2*(e=e.d)*n,eB:2*r*n+2*e*t,eD:2*r*t+2*e*n,eE:1-2*r*r-2*n*n,eF:2*t*n-2*e*r,eH:2*r*n-2*e*t,eI:2*t*n+2*e*r,eJ:1-2*r*r-2*t*t}}function La(n){return{ez:n.ez,eA:n.eD,eB:n.eH,eD:n.eA,eE:n.eE,eF:n.eI,eH:n.eB,eI:n.eF,eJ:n.eJ}}function wa(t){var n,e,r,o,a,i,c=t.di,u=t.dP,l=A(lt,x(function(n,e){return Pa(n)+e}),0,u),f=c?1/c:0,s=D(Hu,c/l,A(lt,function(n){var e=Pa(n),r=function(n){switch(n.$){case 2:return n.a.en;case 0:return n.a.en;case 1:default:return Bu}}(n),n=function(n){switch(n.$){case 2:return n.a.cF;case 0:return n.a.cF;case 1:default:return vu}}(n),r=N(Iu,t.cg,D(Lu,t.cg,n),e,r);return Eu(r)},Bu,u)),v=(v=1/(s=(n=(v=s).ez)*((r=v.eE)*(i=v.eJ)-(o=v.eI)*(a=v.eF))-(e=v.eA)*((c=v.eD)*i-a*(l=v.eH))+(u=v.eB)*(c*o-r*l)),s?{ez:(r*i-o*a)*v,eA:(u*o-e*i)*v,eB:(e*a-u*r)*v,eD:(a*l-c*i)*v,eE:(n*i-u*l)*v,eF:(c*u-n*a)*v,eH:(c*o-l*r)*v,eI:(l*e-n*o)*v,eJ:(n*r-c*e)*v}:Bu);return M(t,{c8:v,cq:D(ku,t.b5,v),cr:f})}function $a(n){return{$:4,a:D(Ju,n,h)}}function za(n){return n}function Da(n){return A(Rl,A(Bl,(e=n).eU,e.eR,.5),function(n){return A(Bl,n.eV,n.eS,.5)}(n),function(n){return A(Bl,n.eW,n.eT,.5)}(n));var e}function Aa(n){return n.eT}function Na(n){return n.eW}function Fa(n){return{a:D(Il,n.eU,function(n){return n.eR}(n)),b:D(Il,function(n){return n.eV}(n),function(n){return n.eS}(n)),c:D(Il,Na(n),Aa(n))}}function _a(n){return n}function Va(n){var e=(t=Fa(n)).a,r=t.b,t=t.c;return{fL:_a(Da(n)),f6:e/2,f7:r/2,f8:t/2}}function qa(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:2,a:f,b:l,c:u,d:c,e:i,f:a,g:o,h:t,i:r,j:e,k:n}}}}}}}}}}}}function Ea(n){return A(ef,0,1,.04045<n?D(rf,(n+.055)/1.055,2.4):n/12.92)}function Ba(n){var e=function(n){return{a5:n.d,cX:n.c,c7:n.b,dH:n.a}}(n),r=e.c7,n=e.cX;return A(bl,Ea(e.dH),Ea(r),Ea(n))}function Ra(n){return function(n){var e=n.fb,r=n.$7;return F(nf,0,D(tf,Ba,n.d3),D(tf,D(ef,0,1),e),D(tf,D(ef,0,1),r),{$:0,a:0})}({d3:n.d3,$7:{$:0,a:0},fb:n.fb})}function Ia(n){var e=D(yu,n.b5,Ca(n.cg)),n=Ta(e);return{dv:ma(e),d_:{fu:n.ez,fv:n.eD,cS:n.eH},d$:{fu:n.eA,fv:n.eE,cS:n.eI},d0:{fu:n.eB,fv:n.eF,cS:n.eJ}}}function ka(n){return n.b?rt(n.a):tt}function Ha(n){return n}function ja(n){return A(ro,of,h,n)}function Ua(n){return xa(n)}function Wa(n){var e=n.fb,r=n.$7;return F(nf,0,{$:0,a:Ba(n.d3)},{$:0,a:A(ef,0,1,e)},{$:0,a:A(ef,0,1,r)},{$:0,a:0})}function Oa(n){return n}function Ga(n){return n=Oa(n),gf(n)||pf(n)||n<=0?mf:{$:0,a:n}}function Ya(n){return n.fL}function Ja(n){return n.aL}function Ka(n){var e=Ha(Ja(n)),n=pa(Ya(n));return{$:2,a:D(_u,Sa(n),function(n){var e=4.1887902047863905*D(rf,n,3);return{en:D(xf,e,n),cF:vu,aL:n,fs:e}}(e))}}function Qa(d){return function(v){return function(s){return function(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(n){var e=d.a,r=d.b,t=d.c,o=Wf(f),t=Uf({ft:o.ft,fu:o.fu*e,fv:o.fv*r,cS:o.cS*t});return m(v,s,t,l,u,c,i,a,n)}}}}}}}}}}function Xa(n){return Yf(n)}function Za(n){return n.b?A(rs,n,h,0):Tt}function ni(n){return!n}function ei(n){return ls(n)}function ri(n){return vs(_a(n))}function ti(n){return n}function oi(n){return vs(ti(n))}function ai(n){return n.H}function ii(n){return D(ms,n.eR,n.eU)&&D(ms,n.eS,n.eV)&&D(ms,n.eT,n.eW)?n:{eR:D(ps,n.eU,n.eR),eS:D(ps,n.eV,n.eS),eT:D(ps,n.eW,n.eT),eU:D(gs,n.eU,n.eR),eV:D(gs,n.eV,n.eS),eW:D(gs,n.eW,n.eT)}}function ci(n){return n.ay}function ui(n){return n}function li(){return{$:2,a:z(function(n,e,r,t,o,a,i,c){return F(tl,D(Kl,!0,c),Cs,Ol,Ms,{aS:A(bl,0,0,1),b:r,c:e,d:a,e:n,cL:i,f:o})})}}function fi(n){return n}function si(n){return fi(n.fB)}function vi(n){return n.fT}function di(n){return n.fu}function mi(n){return n.fv}function pi(n){return n.cS}function gi(n){var e=pi(n.d0),r=mi(n.d0),t=di(n.d0),o=pi(n.d$),a=mi(n.d$),i=di(n.d$),c=pi(n.d_),u=mi(n.d_);return 0<(n=di(n.d_))*a*e+u*o*t+c*i*r-c*a*t-u*i*e-n*o*r}function bi(n){return n.dv}function hi(n){return{fu:-n.fu,fv:-n.fv,cS:-n.cS}}function xi(n){return n.d_}function Si(n){return n.d$}function Pi(n){return n.d0}function yi(n){var e=si(n),r=gi(e)?e:{dv:bi(o=e),d_:xi(o),d$:Si(o),d0:hi(Pi(o))},t=_a(bi(r)),e=ga(xi(r)),o=ga(Si(r)),r=ga(Pi(r)),r=N(js,t,e,o,r),n=vi(n);return{$:0,a:D(Nu,r,A(Hs,Ha(n.a),Ha(n.b),Ha(n.c)))}}function Mi(n){return Uu(g([yi(n)]))}function Ci(n){return n}function Ti(n){return n}function Li(n){return n.fu}function wi(n){return n.fv}function $i(n){return n.cS}function zi(n){var e=(i=Ti(n)).c,r=Li(c=i.a),t=wi(c),o=$i(c),a=Li(u=i.b),n=wi(u),i=$i(u),c=Li(e),u=wi(e),e=$i(e);return ii({eR:D(ps,r,D(ps,a,c)),eS:D(ps,t,D(ps,n,u)),eT:D(ps,o,D(ps,i,e)),eU:D(gs,r,D(gs,a,c)),eV:D(gs,t,D(gs,n,u)),eW:D(gs,o,D(gs,i,e))})}function Di(n){var e=Ti(n),r=e.a,t=e.b;return{a:{cA:e=oi(A(Js,r,t,n=e.c)),cF:ri(r)},b:{cA:e,cF:ri(t)},c:{cA:e,cF:ri(n)}}}function Ai(n){return{H:D(to,function(n){return{a:3*n,b:3*n+1,c:3*n+2}},D(vt,0,Nr(n)-1)),ay:Za(ja(D(to,function(n){return g([n.a,n.b,n.c])},n)))}}function Ni(n){return(n=function(n){if(n.$){var u=n.c;return rt(z(function(n,e,r,t,o,a,i,c){return F(tl,D(Kl,t,c),pv,Ol,u,{b:r,c:e,d:a,e:n,cL:i,f:o})}))}return tt}(n)).$?Yu:{$:2,a:n.a}}function Fi(n){return!n.$}function _i(n){return n=D(yu,n.b5,Ca(n.cg)),ma(n)}function Vi(n){return n.fU}function qi(n){var e=Ma(n);return{fu:n.fu/e,fv:n.fv/e,cS:n.cS/e}}function Ei(n){return D(Av,n.dv,n.d$)}function Bi(n){return{fu:-n.fu,fv:-n.fv,cS:-n.cS}}function Ri(n){return 1===n.$}function Ii(n){return 1===n.$}function ki(n){return{gm:Bi(n.gm),gs:n.gt,gt:n.gs}}function Hi(n){return n}function ji(n){if(0<ya(n)){var e=qi(n),n=xa(e.fu)<.9?D(Gc,e,qs):D(Gc,e,Es);return{a:n,b:D(Gc,e,n)}}return{a:qs,b:Es}}function Ui(b){return function(g){return function(p){return function(m){return function(d){return function(v){return function(s){return function(f){return function(l){return function(n){var e=4/(b.r*b.r*1e7*13),r=4/(13*b.r),t=D(Mu,p.b5,d),o=D(Mu,p.b5,l),a=D(Mu,p.b5,s),i=D(Mu,g.b5,f),c=D(Mu,g.b5,v),u=D(Mu,g.b5,m);return D(jr,F(Ad,_d({aZ:0,gm:u,a_:a}),b,g,p,{V:1e6,Y:-1e6,ad:0,ae:0,K:r,G:12/13,R:e,L:vu,D:D(Gc,a,u),E:D(Gc,u,a)}),D(jr,F(Ad,_d({aZ:0,gm:c,a_:o}),b,g,p,{V:1e6,Y:-1e6,ad:0,ae:0,K:r,G:12/13,R:e,L:vu,D:D(Gc,o,c),E:D(Gc,c,o)}),D(jr,F(Ad,_d({aZ:0,gm:i,a_:t}),b,g,p,{V:1e6,Y:-1e6,ad:0,ae:0,K:r,G:12/13,R:e,L:vu,D:D(Gc,t,i),E:D(Gc,i,t)}),n)))}}}}}}}}}}function Wi(n){return 0<n.di?rt(n.di):tt}function Oi(n){return n.dv}function Gi(n){return ma(n.cg)}function Yi(n){return-n}function Ji(n){if(t=D(zt,xa((r=n).fu),D(zt,xa(r.fv),xa(r.cS)))){var e=r.cS/t,n=r.fv/t,r=r.fu/t,t=ou(r*r+n*n+e*e);return rt({fu:r/t,fv:n/t,cS:e/t})}return tt}function Ki(n){return Gn(function(n){return"script"==n?"p":n}(n))}function Qi(n){function e(n){return Zm(1e4*n)/100}var r=n.b,t=n.c,o=n.d;return t=g(["rgba(",ep(e(n.a)),"%,",ep(e(r)),"%,",ep(e(t)),"%,",ep(Zm(1e3*o)/1e3),")"]),D(ct,"",t)}function Xi(n){return n}function Zi(n){return A(Gl,{dh:n.dh,dI:n.dI,dZ:n.dZ},{bK:n.bK,b0:n.b0,b9:n.b9,ca:n.ca},{bK:n.bK,b0:n.b0,b9:n.b9,ca:n.ca})}function nc(n){return F(tl,g([Zi(n),N(fp,!1,!1,!1,!1)]),pp,dp,mp,{})}function ec(n){return nc({bK:7680,dh:15,dI:8,b0:516,dZ:D(rf,2,n+4),b9:5386,ca:5386})}function rc(n){return bi(n)}function tc(n){return.5*n}function oc(n){return N(sp,515,n.am,n.aj,n.ai)}function ac(n){return hi(Pi(n))}function ic(n){return n.gI}function cc(e){var n=ic(e.fJ),r={dv:rc(n),d_:function(n){return xi(n)}(n),d$:function(n){return Si(n)}(n),d0:hi(ac(n))},t=$a(e.fZ);if(1===(l=N($p,r,1,tt,g([t]))).$)return h;var o=l.a,a=D(Rp,Vs,n),i=D(is,.99,D(ps,Ua(e.fN),Yi(Aa(o)))),c=Fa(o),u=function(n){var e=n,r=D(zt,xa(e.fu),D(zt,xa(e.fv),xa(e.cS)));if(r){var t=e.cS/r,n=e.fv/r,e=e.fu/r;return ou(e*e+n*n+t*t)*r}return 0}(A(Ip,c.a,c.b,c.c)),r=D(is,1.01,D(cs,u,Yi(Na(o)))),l=D(Vp,e.fJ,{fA:e.fA,f1:r,gk:i}),o=(c=Bp(l).eO)?ga(hi(ac(n))):pa(rc(n)),i=(r=function(){var n=e.gC;switch(n.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:n.a};case 4:return{a:4,b:n.a};default:return{a:5,b:0}}}()).a,n=r.b,r=D(cp,e.f$,e.gL),n=pl({ez:0,eA:o.fu,eB:Pl(r),eC:e.fi,eD:0,eE:o.fv,eF:yl(r),eG:Ha(u),eH:0,eI:o.cS,eJ:Ml(r),eK:i,eL:0,eM:c,eN:0,eO:n}),f=T(lp,n,a,l,zp,t,{W:h,ag:h,ah:h}),s=e.gg;switch(s.$){case 0:return ja(g([A(op,f.W,{a:v=s.a,b:tp},Pp),A(op,f.ag,Fp,Pp)]));case 1:var v=s.a;return ja(g([A(op,f.W,Fp,Pp),g([Dp]),A(op,f.ah,v.bS,vp),g([ec(0)]),A(op,f.W,{a:v,b:tp},_p),A(op,f.ag,Fp,Pp)]));default:var d=s.a,v=s.b;return ja(g([A(op,f.W,{a:v,b:tp},Pp),g([Dp]),D(hp,f.ah,d),A(Ep,f.W,v,Nr(d)),A(op,f.ag,Fp,Pp)]))}}function uc(n){return D(Op,Ia(n),ha(n).aE)}function lc(n){return P(n,cf)}function fc(n){return n.d_}function sc(n){return n.d$}function vc(n){return D(Av,n.dv,n.d_)}function dc(n){return D(Av,n.dv,n.d0)}function mc(n){var e={dv:n.bM,d_:sc(n.f5),d$:D(Qp,fc(e=n.f5),sc(e)),d0:fc(n.f5)};return A(eg,dc,n.bG,A(Zp,vc,Yi(n.bI),A(Zp,Ei,n.bB,e)))}function pc(n){return n}function gc(n){return function(n){for(;;){if(P(n.gd,0)&&P(n.ge,0))return Ap;if(!D(Gp,Ua(n.gd),Ua(n.ge))){var e=xa(pc(n.ge)/3.141592653589793),r=xa(pc(n.gd)/3.141592653589793),t=ga(n.gD),o=t.fu,a=t.fv,i=t.cS,t=D(cp,1,n.d6);return{ce:r*Ml(t),fK:!1,co:r*yl(t),dE:e/r,cH:r*Pl(t),dU:3,fu:o,fv:a,cS:i}}n={d6:n.d6,gd:n.ge,ge:n.gd,gD:hi(n.gD)}}}({d6:n.d6,gd:n.ep,ge:0,gD:n.gD})}function bc(n){var e=tc(Ua(n.gG));return{dG:{$:0,a:rg(e)},gI:n.gI}}function hc(n){return e=Ba(n),n=Pl(r=e),e=yl(r),r=Ml(r),A(ap,.4124*n+.3576*e+.1805*r,.2126*n+.7152*e+.0722*r,.0193*n+.1192*e+.9505*r);var e,r}function xc(n){return{fu:Yf(n),fv:ls(n)}}function Sc(n){var e=function(n){var e=n,r=xa(e.cS),t=xa(e.fv),n=xa(e.fu);if(y(n,t)<1){if(y(n,r)<1){var o=ou(e.cS*e.cS+e.fv*e.fv);return{fu:0,fv:-e.cS/o,cS:e.fv/o}}o=ou(e.fv*e.fv+e.fu*e.fu);return{fu:-e.fv/o,fv:e.fu/o,cS:0}}if(y(t,r)<1){o=ou(e.cS*e.cS+e.fu*e.fu);return{fu:e.cS/o,fv:0,cS:-e.fu/o}}o=ou(e.fu*e.fu+e.fv*e.fv);return{fu:-e.fv/o,fv:e.fu/o,cS:0}}(n);return{a:e,b:{fu:n.fv*e.cS-n.cS*e.fv,fv:n.cS*e.fu-n.fu*e.cS,cS:n.fu*e.fv-n.fv*e.fu}}}function Pc(n){return n}function yc(n){return n.fK}function Mc(n){return pl({ez:n.fu,eA:n.cH,eB:0,eC:0,eD:n.fv,eE:n.co,eF:0,eG:0,eH:n.cS,eI:n.ce,eJ:0,eK:0,eL:n.dU,eM:n.dE,eN:0,eO:0})}_n["Browser.Events"]={b:u,c:ln,d:un,e:0,f:qn};var Cc,Tc,Lc,wc,$c,zc,Dc,Ac,Nc,Fc,_c,Vc,qc,Ec,Bc,Rc,Ic=En("Browser.Events"),kc=s(function(n,e,r){return Ic(A(aa,n,e,r))}),Hc=D(kc,0,"keydown"),jc=D(kc,0,"keyup"),Uc=cn,Wc=x(function(n,e){var r=n,t=e,n=t.f2;if(n.b){e=n.b;return M(t,{fD:D(jr,M(r,{M:n.a}),t.fD),f2:e})}return M(t,{fD:D(jr,M(r,{M:t.gl}),t.fD),gl:t.gl+1})}),Oc=x(function(n,e){return{fu:n.fu+e.fu,fv:n.fv+e.fv,cS:n.cS+e.cS}}),Gc=x(function(n,e){return{fu:n.fv*e.cS-n.cS*e.fv,fv:n.cS*e.fu-n.fu*e.cS,cS:n.fu*e.fv-n.fv*e.fu}}),Yc=x(function(n,e){return{fu:n*e.fu,fv:n*e.fv,cS:n*e.cS}}),Jc=x(function(n,e){return{fu:n.fu-e.fu,fv:n.fv-e.fv,cS:n.cS-e.cS}}),Kc=l(function(n,e,r,t){r=D(Jc,r,ma(t.b5)),e=D(Yc,n,e),r=D(Gc,r,e);return M(t,{cl:D(Oc,t.cl,e),cP:D(Oc,t.cP,r)})}),Qc=l(function(n,e,r,t){return 0<t.di?N(Kc,n,ga(e),pa(r),t):t}),Xc=45,Zc=100,nu=12,eu=1e4,he={fu:0,fv:0,cS:-1},ru={fu:1,fv:0,cS:0},Cn={fu:0,fv:1,cS:0},tu={d9:rt(-30),c1:4.4,c2:2.3,a7:he,cm:ru,c6:5,dl:1e5,dm:.6,dr:0,aL:.5,dL:Cn,dM:.01,bo:.3,dS:160},ou=J,au=x(function(n,e){var r=e.cS-n.cS,t=e.fv-n.fv,e=e.fu-n.fu,n=D(zt,xa(e),D(zt,xa(t),xa(r)));if(n){r=r/n,t=t/n,e=e/n;return ou(e*e+t*t+r*r)*n}return 0}),iu=x(function(r,n){return A(ro,x(function(n,e){return r(n)?D(jr,n,e):e}),h,n)}),cu={$:2},uu=s(function(n,e,r){return{fu:n,fv:e,cS:r}}),lu=x(function(n,e){return{$:0,a:n,b:e}}),fu=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),su=N(fu,0,0,0,1),vu={fu:0,fv:0,cS:0},du=D(lu,vu,su),mu={fI:0,f3:.3},pu=x(function(n,e){return ou(A(lt,function(n){return zt(ya(n))},e*e,n.ay))}),gu=x(function(n,e){var r=n.aL;return D(zt,Ma(n.cF)+r,e)}),bu=x(function(n,e){switch(n.$){case 0:return D(pu,n.a,e);case 2:return D(gu,n.a,e);case 1:return 340282347e30;default:return D(zt,e,Ma(n.a))}}),hu=x(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fu,c=e.fv,u=e.cS,l=-a*u+r*c-t*i,n=-a*c+o*i-r*u,e=-a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fu:e*-a+u*-r+n*-o-l*-t,fv:n*-a+u*-t+l*-r-e*-o,cS:l*-a+u*-o+e*-t-n*-r}}),xu=x(function(n,e){return D(hu,n.b,D(Jc,e,n.a))}),Su=x(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.a,c=e.b,n=e.c,e=e.d;return N(fu,r*e+t*n-o*c+a*i,-r*n+t*e+o*i+a*c,r*c-t*i+o*e+a*n,-r*i-t*c-o*n+a*e)}),Pu=x(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fu,c=e.fv,u=e.cS,l=a*u+r*c-t*i,n=a*c+o*i-r*u,e=a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fu:e*a+u*-r+n*-o-l*-t,fv:n*a+u*-t+l*-r-e*-o,cS:l*a+u*-o+e*-t-n*-r}}),yu=x(function(n,e){var r=n.b,t=e.b;return D(lu,D(Oc,n.a,D(Pu,r,e.a)),D(Su,r,t))}),Mu=x(function(n,e){return D(Pu,n.b,e)}),Cu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=D(jr,D(Mu,n,e.a),r);n=t,e=o,r=a}}),Tu=x(function(n,e){return A(Cu,n,e,h)}),Lu=x(function(n,e){var r=n.a,t=n.b,o=t.a,a=t.b,i=t.c,c=t.d,u=e.fu,l=e.fv,f=e.cS,n=c*f+o*l-a*u,t=c*l+i*u-o*f,e=c*u+a*f-i*l,f=-o*u-a*l-i*f;return{fu:e*c+f*-o+t*-i-n*-a+r.fu,fv:t*c+f*-a+n*-o-e*-i+r.fv,cS:n*c+f*-i+e*-a-t*-o+r.cS}}),wu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=D(jr,D(Lu,n,e.a),r);n=t,e=o,r=a}}),$u=x(function(n,e){return A(wu,n,e,h)}),zu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a.ay,o=n,a=e.b,t=D(jr,{cA:D(Mu,n,e.a.cA),ay:pt(D($u,n,t))},r);n=o,e=a,r=t}}),Du=x(function(n,e){return{ez:n.ez*e.ez+n.eA*e.eD+n.eB*e.eH,eA:n.ez*e.eA+n.eA*e.eE+n.eB*e.eI,eB:n.ez*e.eB+n.eA*e.eF+n.eB*e.eJ,eD:n.eD*e.ez+n.eE*e.eD+n.eF*e.eH,eE:n.eD*e.eA+n.eE*e.eE+n.eF*e.eI,eF:n.eD*e.eB+n.eE*e.eF+n.eF*e.eJ,eH:n.eH*e.ez+n.eI*e.eD+n.eJ*e.eH,eI:n.eH*e.eA+n.eI*e.eE+n.eJ*e.eI,eJ:n.eH*e.eB+n.eI*e.eF+n.eJ*e.eJ}}),Au=x(function(n,e){n=Ta(n);return D(Du,n,D(Du,e,La(n)))}),Nu=x(function(n,e){var r=e.ay,t=e.dX,o=e.fn,a=e.cF,i=e.fs,c=e.en;return{bJ:A(zu,n,e.bJ,h),en:D(Au,n,c),cF:D(Lu,n,a),dX:D(Tu,n,t),fn:D(Tu,n,o),ay:D($u,n,r),fs:i}}),Fu=x(function(n,e){var r=e.cF;return{cA:D(Mu,n,e.cA),cF:D(Lu,n,r)}}),_u=x(function(n,e){var r=e.aL,t=e.fs;return{en:e.en,cF:D(Lu,n,e.cF),aL:r,fs:t}}),Vu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a,o=n,a=e.b,i=D(jr,function(){switch(t.$){case 0:return{$:0,a:D(Nu,n,t.a)};case 1:return{$:1,a:D(Fu,n,t.a)};case 2:return{$:2,a:D(_u,n,t.a)};default:return{$:3,a:D(Lu,n,t.a)}}}(),r);n=o,e=a,r=i}}),qu=x(function(n,e){return A(Vu,n,e,h)}),Eu=x(function(n,e){return{ez:n.ez+e.ez,eA:n.eA+e.eA,eB:n.eB+e.eB,eD:n.eD+e.eD,eE:n.eE+e.eE,eF:n.eF+e.eF,eH:n.eH+e.eH,eI:n.eI+e.eI,eJ:n.eJ+e.eJ}}),Bu={ez:0,eA:0,eB:0,eD:0,eE:0,eF:0,eH:0,eI:0,eJ:0},Ru=l(function(n,e,r,t){var o=-n*r*t,a=-n*e*t,i=-n*e*r;return{ez:n*(r*r+t*t),eA:i,eB:a,eD:i,eE:n*(t*t+e*e),eF:o,eH:a,eI:o,eJ:n*(e*e+r*r)}}),Iu=l(function(n,e,r,t){var o=n.a.fu,a=n.a.fv,i=n.a.cS,t=D(Au,n,t),e=N(Ru,r,o-e.fu,a-e.fv,i-e.cS);return D(Eu,t,e)}),ku=x(function(n,e){n=Ta(n);return D(Du,La(n),D(Du,e,n))}),Hu=x(function(n,e){return{ez:n*e.ez,eA:n*e.eA,eB:n*e.eB,eD:n*e.eD,eE:n*e.eE,eF:n*e.eF,eH:n*e.eH,eI:n*e.eI,eJ:n*e.eJ}}),ju=x(function(n,e){var r=function(n){var e=A(lt,x(function(n,e){return e+Pa(n)}),0,n);return 0<e?A(lt,function(n){return Oc(D(Yc,Pa(n)/e,function(){switch(n.$){case 0:return n.a.cF;case 3:return n.a;case 2:default:return n.a.cF}}()))},vu,n):vu}(n),t=Sa(r),o=Ca(t),a=D(qu,o,n),r=D(yu,du,t),o=D(yu,r,o);return wa({d2:.01,cd:vu,d4:A(lt,bu,0,a),cg:t,F:e,cl:vu,M:-1,c8:Bu,cq:Bu,cr:0,ey:.01,di:0,eP:mu,dP:a,cP:vu,b5:r,cQ:vu,dY:D(qu,o,n)})}),Uu=x(function(n,e){n=A(lt,x(function(n,e){return D(jr,n,e)}),h,n);return D(ju,n,e)}),Wu={fu:0,fv:0,cS:1},Ou=Uu(g([{$:1,a:{cA:Wu,cF:vu}}])),Gu={$:0},Yu=Gu,Ju=x(function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=D(jr,r,e)}}),Ku=x(function(n,e){return{$:1,a:n,b:e}}),Qu={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"ci"}},Xu={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aS"}},Zu={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"a9",sceneProperties:"e"}},nl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cU",colorTexture:"ci",sceneProperties:"e"}},el=x(function(n,e){switch(e.$){case 0:return D(nr,n,e);case 1:return D(er,n,e);case 2:return D(rr,n,e);case 3:return D(tr,n,e);case 4:return D(or,n,e);default:return D(ar,n,e)}}),rl=x(function(n,e){switch(e.$){case 0:return D(Be,n,e);case 1:return D(Re,n,e);case 2:return D(Ie,n,e);case 3:return D(ke,n,e);case 4:return D(He,n,e);case 5:return D(je,n,e);case 6:return D(Ue,n,e);case 7:return D(We,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}}),tl=Ee,ol=x(function(n,e){return y(n,e)<0?n:e}),al=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return{eR:e,eS:t,eT:a,eU:n,eV:r,eW:o};var c=i.a,u=i.b,l=c.fu,f=c.fv,c=c.cS;n=D(ol,l,n),e=D(zt,l,e),r=D(ol,f,r),t=D(zt,f,t),o=D(ol,c,o),a=D(zt,c,a),i=u}}),il=x(function(n,e){var r=n.fu,t=n.fv,n=n.cS;return S(al,r,r,t,t,n,n,e)}),cl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"_",lights12:"bS",lights34:"cu",lights56:"cv",lights78:"cw",materialColor:"dj",sceneProperties:"e",viewMatrix:"f"}},ul={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"_",lights12:"bS",lights34:"cu",lights56:"cv",lights78:"cw",materialColorTexture:"dk",normalMapTexture:"bg",sceneProperties:"e",useNormalMap:"br",viewMatrix:"f"}},ll=(fn=function(n){return{$:5,a:n}})(1029),fl=fn(1028),sl=s(function(n,e,r){return 1===e?D(jr,n?ll:fl,r):r}),vl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"d3",enabledLights:"_",lights12:"bS",lights34:"cu",lights56:"cv",lights78:"cw",metallic:"$7",roughness:"fb",sceneProperties:"e",viewMatrix:"f"}},dl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cW",constantBaseColor:"c_",constantMetallic:"c$",constantRoughness:"c0",enabledLights:"_",lights12:"bS",lights34:"cu",lights56:"cv",lights78:"cw",metallicTexture:"dp",normalMapTexture:"bg",roughnessTexture:"dN",sceneProperties:"e",useNormalMap:"br",viewMatrix:"f"}},ml={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cG"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"as",sceneProperties:"e",viewMatrix:"f"}},pl=function(n){var e=new Float64Array(16);return e[0]=n.ez,e[1]=n.eD,e[2]=n.eH,e[3]=n.eL,e[4]=n.eA,e[5]=n.eE,e[6]=n.eI,e[7]=n.eM,e[8]=n.eB,e[9]=n.eF,e[10]=n.eJ,e[11]=n.eN,e[12]=n.eC,e[13]=n.eG,e[14]=n.eK,e[15]=n.eO,e},gl=l(function(n,e,r,t){t=pa(t),r=pa(r),e=pa(e),n=pa(n);return pl({ez:n.fu,eA:e.fu,eB:r.fu,eC:t.fu,eD:n.fv,eE:e.fv,eF:r.fv,eG:t.fv,eH:n.cS,eI:e.cS,eJ:r.cS,eK:t.cS,eL:0,eM:0,eN:0,eO:0})}),ln=(u=x(function(n,e){return{$:0,a:n,b:e}}))({ec:1,em:0,eY:6}),bl=dr,hl=ln(g([{cG:A(bl,0,0,0)},{cG:A(bl,1,0,1)},{cG:A(bl,1,1,2)},{cG:A(bl,0,1,3)}])),xl=x(function(n,e){return{$:1,a:n,b:e}}),Sl=x(function(n,e){if(e.$)return{a:e.a.F,b:1};return{a:n,b:0}}),Pl=function(n){return n[0]},yl=function(n){return n[1]},Ml=function(n){return n[2]},Cl=Pr,Tl=N(Cl,0,0,0,0),Ll=x(function(n,e){return e.$?{a:e.a.F,b:Tl}:{a:n,b:N(Cl,Pl(e=e.a),yl(e),Ml(e),1)}}),wl=x(function(n,e){var r,t={a:n,b:e};if(t.a.$)return D(xl,{a:r=t.a.a.F,b:Tl},D(Sl,r,e));if(t.b.$)return D(xl,D(Ll,r=t.b.a.F,n),D(Sl,r,e));return{$:0,a:t.a.a}}),$l=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),zl=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Dl=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),Al=ur,Nl=D(Al,0,0),Fl=x(function(n,e){return e.$?{a:e.a.F,b:Nl}:{a:n,b:function(n){return D(Al,n,1)}(e.a)}}),_l=l(function(n,e,r,t){var o,a=N(Dl,n,e,r,t);if(a.a.$)return N(zl,{a:o=a.a.a.F,b:Tl},D(Fl,o,e),D(Fl,o,r),D(Sl,o,t));if(a.b.$)return N(zl,D(Ll,o=a.b.a.F,n),{a:o,b:Nl},D(Fl,o,r),D(Sl,o,t));if(a.c.$)return N(zl,D(Ll,o=a.c.a.F,n),D(Fl,o,e),{a:o,b:Nl},D(Sl,o,t));if(a.d.$)return N(zl,D(Ll,o=a.d.a.F,n),D(Fl,o,e),D(Fl,o,r),{a:o,b:1});return A($l,a.a.a,a.b.a,a.c.a)}),Vl=xr,ql={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cG"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"as",sceneProperties:"e",viewMatrix:"f"}},El={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cG"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"as",sceneProperties:"e",viewMatrix:"f"}},Bl=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),Rl=s(function(n,e,r){return{fu:n,fv:e,cS:r}}),Il=x(function(n,e){return e-n}),kl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cG"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"as",sceneProperties:"e",viewMatrix:"f"}},Hl=r(function(r,T,L,w,$){var n=D(il,T,g([L,w,$])),n=Va(n);return D(Ku,n,function(){switch(r.$){case 0:if(r.b.$){var u=r.b.a.F;return z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,0,c),kl,Qu,hl,{ci:u,b:r,c:e,d:a,as:N(gl,T,L,w,$),e:n,f:o})})}var l=r.b.a;return z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,0,c),ml,Xu,hl,{aS:l,b:r,c:e,d:a,as:N(gl,T,L,w,$),e:n,f:o})});case 1:if(r.b.$){u=r.b.a.F,s=r.c;return z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,0,c),kl,nl,hl,{cU:za(s),ci:u,b:r,c:e,d:a,as:N(gl,T,L,w,$),e:n,f:o})})}var f=r.b.a,s=r.c;return z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,0,c),ml,Zu,hl,{cU:s,a9:D(Vl,za(s),f),b:r,c:e,d:a,as:N(gl,T,L,w,$),e:n,f:o})});case 2:var n=D(wl,r.b,r.c);if(n.$){var e=n.a,v=e.a,e=n.b,d=e.a,m=e.b;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,0,c),El,ul,hl,{_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dk:v,b:r,c:e,bg:d,d:a,as:N(gl,T,L,w,$),e:n,br:m,f:o})})}var p=n.a;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,0,c),ql,cl,hl,{_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dj:p,b:r,c:e,d:a,as:N(gl,T,L,w,$),e:n,f:o})});default:e=N(_l,r.b,r.c,r.d,r.e);if(e.$){var n=e.a,g=n.a,b=n.b,n=e.b,h=n.a,x=n.b,n=e.c,S=n.a,P=n.b,n=e.d,d=n.a,m=n.b;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,0,c),El,dl,hl,{cW:g,c_:b,c$:P,c0:x,_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dp:S,b:r,c:e,bg:d,d:a,as:N(gl,T,L,w,$),dN:h,e:n,br:m,f:o})})}var y=e.a,M=e.b,C=e.c;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,0,c),ql,vl,hl,{d3:y,_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,$7:C,b:r,c:e,d:a,as:N(gl,T,L,w,$),fb:M,e:n,f:o})})}}())}),jl=s(function(n,e,r){return{$:3,a:n,b:e,c:r}})({ec:1,em:3,eY:4}),Ul=(un=g([{aK:D(Al,0,1)},{aK:D(Al,1,1)},{aK:D(Al,2,1)},{aK:D(Al,3,1)},{aK:D(Al,0,-1)},{aK:D(Al,1,-1)},{aK:D(Al,2,-1)},{aK:D(Al,3,-1)}]),qn=g([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),D(jl,un,qn)),Wl={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aK"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"as",sceneProperties:"e",shadowLight:"cL",viewMatrix:"f"}},Ol={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Gl=s(function(n,e,r){var t=n.dI,o=n.dh,a=n.dZ,i=x(function(n,e){return e(n)}),c=x(function(n,e){return e(n)}),n=function(n){return D(Fo,i(n.b0),D(Fo,c(n.bK),D(Fo,c(n.b9),c(n.ca))))};return D(n,r,D(n,e,A(qa,t,o,a)))}),Yl=A(Gl,{dh:0,dI:0,dZ:15},{bK:7680,b0:519,b9:7680,ca:7683},{bK:7680,b0:519,b9:7680,ca:7682}),Jl=A(Gl,{dh:0,dI:0,dZ:15},{bK:7680,b0:519,b9:7680,ca:7682},{bK:7680,b0:519,b9:7680,ca:7683}),Kl=x(function(n,e){return D(jr,n?Jl:Yl,e)}),Ql=l(function(u,l,f,s){return{$:2,a:z(function(n,e,r,t,o,a,i,c){return F(tl,D(Kl,t,c),Wl,Ol,Ul,{b:r,c:e,d:a,as:N(gl,u,l,f,s),e:n,cL:i,f:o})})}}),Xl=o(function(n,e,r,t,o,a,i){r=F(Hl,r,t,o,a,i),e={a:n,b:e};return e.a?e.b?$a(g([r,N(Ql,t,o,a,i)])):r:e.b?N(Ql,t,o,a,i):Yu}),Zl=r(function(n,e,r,t,o){return S(Xl,!0,!1,n,e,r,t,o)}),nf=r(function(n,e,r,t,o){return{$:3,a:n,b:e,c:r,d:t,e:o}}),ef=s(function(n,e,r){return y(r,n)<0?n:0<y(r,e)?e:r}),rf=I,tf=x(function(n,e){return e.$?{$:1,a:e.a}:{$:0,a:n(e.a)}}),of=x(function(n,e){return e.b?A(ro,jr,e,n):n}),cn=40,Ee=131,af=(Cc=(J=161)/10.8,fn=x(function(n,e){return g([{a:-Cc*n,b:Cc*e},{a:-Cc*n,b:-Cc*e},{a:Cc*n,b:Cc*e},{a:Cc*n,b:-Cc*e}])}),ja(g([D(to,function(n){return{ar:A(uu,n.a,n.b,0),b_:1,bp:-eu}},ja(g([g([{a:Cc,b:0},{a:-Cc,b:0},{a:0,b:Cc},{a:0,b:-Cc},{a:2.7*Cc,b:0},{a:2.7*-Cc,b:0},{a:4.1*Cc,b:0},{a:4.1*-Cc,b:0}]),D(fn,4.05,1.75),D(fn,3.2,.9),D(fn,2.2,1.75),D(fn,2.4,3.4),D(fn,1,2)]))),D(to,function(n){return{ar:A(uu,n.a,n.b,0),b_:0,bp:-eu}},g([{a:0,b:3.6*Cc},{a:0,b:3.6*-Cc},{a:4*-Cc,b:3*Cc},{a:4*-Cc,b:3*-Cc},{a:4*Cc,b:3*Cc},{a:4*Cc,b:3*-Cc}]))]))),cf={$:1},uf=x(function(n,e){return{fL:e,aL:Ua(n)}}),lf=x(function(n,e){return D(uf,e,n)}),ff={fu:0,fv:0,cS:0},sf=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),vf=s(function(n,e,r){return N(sf,n/255,e/255,r/255,1)}),df=(tn={d3:A(vf,140,142,141),fb:.5},Wa({d3:tn.d3,$7:1,fb:tn.fb})),dr=Er,mf={$:1},pf=function(n){return n===1/0||n===-1/0},gf=Q,bf=x(function(n,e){return D(lu,n,e.b)}),hf=x(function(n,e){var r=e,e=D(yu,r.b5,Ca(r.cg)),e=D(yu,D(bf,pa(n),e),r.cg);return M(r,{b5:e,dY:D(qu,e,r.dP)})}),xf=x(function(n,e){e*=2*n/5*e;return{ez:e,eA:0,eB:0,eD:0,eE:e,eF:0,eH:0,eI:0,eJ:e}}),ln=function(n){return Uu(g([Ka(n)]))},Sf=x(function(n,e){return{fu:e.fu-n.fu,fv:e.fv-n.fv,cS:e.cS-n.cS}}),Pf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"cF",uv:"T"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},yf=l(function(u,n,l,f){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,f,c),Pf,Qu,l,{ci:u,b:r,c:e,d:a,e:n,f:o})}))}),Mf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"cF"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Cf=l(function(u,n,l,f){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,f,c),Mf,Xu,l,{aS:u,b:r,c:e,d:a,e:n,f:o})}))}),Tf=x(function(n,e){return{$:3,a:n,b:e}}),Lf={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aS",pointRadius:"cE",sceneProperties:"e"}},wf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"cF"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"cE",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},$f=l(function(u,l,n,f){return D(Tf,n,z(function(n,e,r,t,o,a,i,c){return F(tl,c,wf,Lf,f,{aS:u,b:r,c:e,cE:l,d:a,e:n,f:o})}))}),zf=r(function(u,l,n,f,s){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,s,c),Mf,Zu,f,{a9:D(Vl,za(l),u),b:r,c:e,d:a,e:n,f:o})}))}),Df={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"a9",pointRadius:"cE",sceneProperties:"e"}},Af=r(function(u,l,f,n,s){return D(Tf,n,z(function(n,e,r,t,o,a,i,c){return F(tl,c,wf,Df,s,{a9:D(Vl,za(l),u),b:r,c:e,cE:f,d:a,e:n,f:o})}))}),Nf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cA",position:"cF"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ff=l(function(l,n,f,s){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,s,c),Nf,cl,f,{_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dj:l,b:r,c:e,d:a,e:n,f:o})}))}),_f={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cA",position:"cF",tangent:"fk",uv:"T"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vf=t(function(l,f,s,n,v,d){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,d,c),_f,ul,v,{_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dk:l,b:r,c:e,bg:f,d:a,e:n,br:s,f:o})}))}),qf=t(function(l,f,s,n,v,d){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,d,c),Nf,vl,v,{d3:l,_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,$7:s,b:r,c:e,d:a,fb:f,e:n,f:o})}))}),Ef=r(function(u,l,n,f,s){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){return F(tl,A(sl,t,s,c),Pf,nl,f,{cU:za(l),ci:u,b:r,c:e,d:a,e:n,f:o})}))}),Bf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"cA",position:"cF",uv:"T"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rf=l(function(l,n,f,s){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,s,c),Bf,ul,f,{_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dk:l,b:r,c:e,bg:l,d:a,e:n,br:0,f:o})}))}),If=a(function(l,f,s,v,d,m,n,p,g){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,g,c),Bf,dl,p,{cW:l,c_:f,c$:m,c0:v,_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dp:d,b:r,c:e,bg:l,d:a,dN:s,e:n,br:0,f:o})}))}),kf=x(function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.F;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Yu;case 5:case 6:case 7:v=e.c,C=e.d;return N(yf,r,Va(M=e.a),v,C);case 8:case 9:default:return Yu}}else{var t=n.b.a;switch(e.$){case 0:return Yu;case 1:case 2:case 3:case 4:case 5:case 6:case 7:v=e.c,C=e.d;return N(Cf,t,Va(M=e.a),v,C);case 8:case 9:v=e.c;return N(Cf,t,Va(M=e.a),v,0);default:v=e.d;return N($f,t,e.b,Va(M=e.a),v)}}case 1:if(n.b.$){r=n.b.a.F,a=n.c;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Yu;case 5:case 6:case 7:v=e.c,C=e.d;return F(Ef,r,a,Va(M=e.a),v,C);case 8:case 9:default:return Yu}}else{var o=n.b.a,a=n.c;switch(e.$){case 0:return Yu;case 1:case 2:case 3:case 4:case 5:case 6:case 7:v=e.c,C=e.d;return F(zf,o,a,Va(M=e.a),v,C);case 8:case 9:v=e.c;return F(zf,o,a,Va(M=e.a),v,0);default:v=e.d;return F(Af,o,a,e.b,Va(M=e.a),v)}}case 2:var i=D(wl,n.b,n.c);if(i.$){var c=i.a,u=c.a,c=i.b,l=c.a,f=c.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Yu;case 6:v=e.c,d=e.d;return N(Rf,u,Va(M=e.a),v,d);case 7:v=e.c,d=e.d;return T(Vf,u,l,f,Va(M=e.a),v,d);case 8:case 9:default:return Yu}}else{var s=i.a;switch(e.$){case 0:case 1:return Yu;case 2:var v=e.c,d=e.d;return N(Ff,s,Va(M=e.a),v,d);case 3:return Yu;case 4:var v=e.c,d=e.d;return N(Ff,s,Va(M=e.a),v,d);case 5:return Yu;case 6:case 7:v=e.c,d=e.d;return N(Ff,s,Va(M=e.a),v,d);case 8:case 9:default:return Yu}}default:c=N(_l,n.b,n.c,n.d,n.e);if(c.$){var i=c.a,m=i.a,p=i.b,i=c.b,g=i.a,b=i.b,i=c.c,h=i.a,x=i.b,i=c.d,l=i.a,f=i.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Yu;case 6:v=e.c,C=e.d;return L(If,m,p,g,b,h,x,Va(M=e.a),v,C);case 7:M=e.a,v=e.c,C=e.d;return function(h){return function(b){return function(g){return function(p){return function(m){return function(d){return function(v){return function(s){return function(n){return function(f){return function(l){return D(Ku,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return F(tl,A(sl,t,l,c),_f,dl,f,{cW:h,c_:b,c$:d,c0:p,_:i,bS:u.bS,cu:u.cu,cv:u.cv,cw:u.cw,dp:m,b:r,c:e,bg:v,d:a,dN:g,e:n,br:s,f:o})}))}}}}}}}}}}}(m)(p)(g)(b)(h)(x)(l)(f)(Va(M))(v)(C);case 8:case 9:default:return Yu}}else{var S=c.a,P=c.b,y=c.c;switch(e.$){case 0:case 1:return Yu;case 2:v=e.c,C=e.d;return T(qf,S,P,y,Va(M=e.a),v,C);case 3:return Yu;case 4:v=e.c,C=e.d;return T(qf,S,P,y,Va(M=e.a),v,C);case 5:return Yu;case 6:case 7:var M,v=e.c,C=e.d;return T(qf,S,P,y,Va(M=e.a),v,C);case 8:case 9:default:return Yu}}}}),Hf=x(function(n,e){return{$:5,a:n,b:e}}),jf=x(function(n,e){var r=n.a,t=n.b,o=n.c,n=e.fL;return{fL:{fu:r*n.fu,fv:t*n.fv,cS:o*n.cS},f6:r*e.f6,f7:t*e.f7,f8:o*e.f8}}),Uf=function(n){return new Float64Array([n.fu,n.fv,n.cS,n.ft])},Wf=function(n){return{fu:n[0],fv:n[1],cS:n[2],ft:n[3]}},Of=x(function(n,e){switch(e.$){case 0:return Gu;case 5:return D(Hf,e.a,D(Of,n,e.b));case 1:var r=e.b;return D(Ku,D(jf,n,e.a),D(Qa,n,r));case 3:return e;case 2:return{$:2,a:D(Qa,n,r=e.a)};default:r=e.a;return{$:4,a:D(to,Of(n),r)}}}),Gf=x(function(n,e){return D(Of,n,e)}),Yf=H,Jf=l(function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}}),Kf=l(function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}}),Qf=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),Xf=l(function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}}),Zf=l(function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}}),ns=l(function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}}),es=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Pr=function(n){switch(n.$){case 0:return n;case 1:return N(es,n.a,n.b,n.c,1);case 2:return N(Jf,n.a,n.b,n.c,1);case 3:return N(Kf,n.a,n.b,n.c,1);case 4:return N(Qf,n.a,n.b,n.c,1);case 5:return N(ns,n.a,n.b,n.c,1);case 6:return N(Xf,n.a,n.b,n.c,1);case 7:return N(Zf,n.a,n.b,n.c,1);case 8:case 9:default:return n}},rs=s(function(n,e,r){for(;;){var t=D(Dt,32,n),o=t.a,t=t.b;if(y($t(o),32)<0)return D(Ft,!0,{B:e,n:r,q:o});n=t,e=D(jr,{$:1,a:o},e),r=r+1}}),ts=x(function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}}),os=x(function(n,e){return!D(ts,D(So,ni,n),e)}),as=x(function(n,e){function r(n){var e=n.a,r=n.b,n=n.c;return 0<=e&&y(e,t)<0&&0<=r&&y(r,t)<0&&0<=n&&y(n,t)<0}var t=n.a;return D(os,r,e)?{H:e,ay:n}:{H:D(iu,r,e),ay:n}}),is=x(function(n,e){return n*e}),cs=x(function(n,e){return e+n}),us=x(function(n,e){return n/e}),ls=j,fs=r(function(n,e,r,t,o){for(;;){var a=t(e/r),a=D(jr,a,o);if(P(e,n))return a;n=n,e=e-1,r=r,t=t,o=a}}),ur=x(function(n,e){return n<1?h:F(fs,0,n,n,e,h)}),ss={$:0},vs=function(n){return new Float64Array([n.fu,n.fv,n.cS])},ds=x(function(n,e){var r=n.cF,t=n.T,o=t.a,t=t.b;return D(jr,{cA:oi(n.cA),cF:ri(r),T:D(Al,o,t)},e)}),ms=x(function(n,e){return y(e,n)<1}),ps=x(function(n,e){return D(zt,n,e)}),gs=x(function(n,e){return D(ol,n,e)}),bs=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return ii({eR:e,eS:t,eT:a,eU:n,eV:r,eW:o});var c=i.a,u=i.b,l=Ml(c.cF),f=yl(c.cF),c=Pl(c.cF);n=D(ol,n,c),e=D(zt,e,c),r=D(ol,r,f),t=D(zt,t,f),o=D(ol,o,l),a=D(zt,a,l),i=u}}),hs=x(function(n,e){var r=Ml(n.cF),t=yl(n.cF),n=Pl(n.cF);return S(bs,n,n,t,t,r,r,e)}),xs=x(function(n,e){var r=n,n=e,e=Yf(n);return{fu:e*Yf(r),fv:e*ls(r),cS:ls(n)}}),Ss=(xr=D(vt,0,71),un=D(ur,72,D(Bl,0,6.283185307179586)),Tc=yt(36),Lc=D(vt,0,Tc-1),wc=D(ur,Tc,D(Bl,1.5707963267948966,-1.5707963267948966)),un=Za(ja(D(to,function(e){return D(to,function(n){return{cA:ui(D(xs,e,n)),cF:A(Rl,D(is,Xa(n)*Xa(e),1),D(is,Xa(n)*ei(e),1),D(is,ei(n),1)),T:{a:D(us,e,6.283185307179586),b:D(us,D(cs,1.5707963267948966,n),3.141592653589793)}}},wc)},un))),$c=x(function(n,e){return n*(Tc+1)+e}),xr=ja(D(to,function(o){return ja(D(to,function(n){var e=D($c,o+1,n),r=D($c,o,n),t=D($c,o+1,n+1),n=D($c,o,n+1);return g([{a:n,b:t,c:e},{a:n,b:e,c:r}])},Lc))},xr)),Pr(function(n){var e=A(Gr,ds,h,ci(n));if(e.b){var r=e.a,t=e.b,e=D(jl,e,ai(n)),t=D(hs,r,t);return N(Xf,t,n,e,0)}return ss}(D(as,un,xr)))),Ps=k,qn=x(function(n,e){for(;;){var r=D(Ps,144,2*n+3),t=D(Ps,144,2*n+2),o=2*n+1,a=2*n,r=D(jr,{a:144,b:a,c:t},D(jr,{a:a,b:r,c:t},D(jr,{a:a,b:o,c:r},D(jr,{a:o,b:145,c:r},e))));if(!n)return r;n=n-1,e=r}}),ys=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),I=x(function(n,e){for(;;){var r=A(ys,0,6.283185307179586,n/72),r=D(jr,{cc:r,cB:0,cI:1},D(jr,{cc:r,cB:1,cI:1},e));if(!n)return r;n=n-1,e=r}}),Ms=(c=D(I,71,g([{cc:0,cB:0,cI:0},{cc:0,cB:1,cI:0}])),fn=D(qn,71,h),D(jl,c,fn)),Cs={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"cc",offsetScale:"cB",radiusScale:"cI"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cL",viewMatrix:"f"}},Ts=x(function(n,e){return{eq:P(n.eq,e.eq),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,N:e.N+(n.N*e.s+n.O*e.v+n.P*e.y)*e.cJ,O:e.O+(n.N*e.t+n.O*e.w+n.P*e.z)*e.cJ,P:e.P+(n.N*e.u+n.O*e.x+n.P*e.A)*e.cJ,cJ:n.cJ*e.cJ}}),Ls=x(function(n,e){var r=e;switch(r.$){case 0:return Yu;case 5:var t=r.b,o=D(Ts,r.a,n);return D(Hf,o,t);case 1:case 3:case 2:default:return D(Hf,n,r)}}),ws=x(function(n,e){return D(Ls,function(n){n=ti(n);return{eq:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,N:n.fu,O:n.fv,P:n.cS,cJ:1}}(n),e)}),$s=l(function(n,e,r,t){r=D(kf,r,Ss),r=(e={a:n,b:e}).a?e.b?$a(g([r,li()])):r:e.b?li():Yu,e=Ja(t);return D(ws,D(Sf,ff,Ya(t)),D(Gf,{a:e,b:e,c:e},r))}),Q=x(function(n,e){return N($s,!0,!0,n,e)}),zs=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),Ds=s(function(n,e,r){return{$:2,a:n,b:e,c:r}}),As=x(function(n,e){return{$:0,a:n,b:e}}),Ns=function(n){switch(n.$){case 0:return D(As,n.a,n.b);case 1:return A(zs,n.a,n.b,n.c);case 2:return A(Ds,n.a,n.b,n.c);default:return F(nf,n.a,n.b,n.c,n.d,n.e)}},Fs=x(function(n,e){var r=e;if(n.$)return wa(M(r,{di:0}));e=n.a,n=r.dP;return!n.b||!n.b.b&&1===n.a.$?r:wa(M(r,{di:e}))}),H=x(function(n,e){return M(e,{eP:n})}),un=(j=D(lf,ff,2),ur=D(Q,Ns(df),j),D(hf,A(uu,0,0,2),D(Fs,Ga(1),D(H,dr({fI:.8,f3:.3}),D(ln,j,{aE:ur,M:cf}))))),_s=xr={fu:0,fv:0,cS:1},Vs={dv:ff,d_:ru,d$:Cn,d0:_s},qs={fu:1,fv:0,cS:0},Es={fu:0,fv:1,cS:0},Bs=g([qs,Es,Wu]),Rs={fu:-1,fv:0,cS:0},Is={fu:0,fv:-1,cS:0},ks={fu:0,fv:0,cS:-1},Hs=s(function(n,e,r){var t=r/2,o=e/2,a=n/2,i=n*e*r,c={fu:-a,fv:o,cS:t},u={fu:a,fv:o,cS:t},l={fu:a,fv:-o,cS:t},f={fu:-a,fv:-o,cS:t},s={fu:-a,fv:o,cS:-t},v={fu:a,fv:o,cS:-t},d={fu:a,fv:-o,cS:-t},t={fu:-a,fv:-o,cS:-t},n={ez:i/12*(e*e+r*r),eA:0,eB:0,eD:0,eE:i/12*(n*n+r*r),eF:0,eH:0,eI:0,eJ:i/12*(e*e+n*n)};return{bJ:g([{cA:ks,ay:g([s,v,d,t])},{cA:Wu,ay:g([f,l,u,c])},{cA:Is,ay:g([l,f,t,d])},{cA:Es,ay:g([v,s,c,u])},{cA:Rs,ay:g([t,f,c,s])},{cA:qs,ay:g([d,v,u,l])}]),en:n,cF:vu,dX:Bs,fn:Bs,ay:g([t,d,v,s,f,l,u,c]),fs:i}}),js=l(function(n,e,r,t){var o=t.cS,a=r.cS,i=e.cS,c=t.fv,u=r.fv,l=e.fv,f=t.fu,t=r.fu,r=e.fu,e=r+u+o;if(0<e){var s=2*ou(e+1);return D(lu,n,N(fu,(a-c)/s,(f-i)/s,(l-t)/s,.25*s))}if(0<y(r,u)&&0<y(r,o)){s=2*ou(1+r-u-o);return D(lu,n,N(fu,.25*s,(t+l)/s,(f+i)/s,(a-c)/s))}if(0<y(u,o)){s=2*ou(1+u-r-o);return D(lu,n,N(fu,(t+l)/s,.25*s,(c+a)/s,(f-i)/s))}s=2*ou(1+o-r-u);return D(lu,n,N(fu,(f+i)/s,(c+a)/s,.25*s,(l-t)/s))}),Us=z(function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{eR:e,eS:t,eT:a,eU:n,eV:r,eW:o};var u=c.b,l=Ci(i(c.a));n=D(gs,l.eU,n),e=D(ps,l.eR,e),r=D(gs,l.eV,r),t=D(ps,l.eS,t),o=D(gs,l.eW,o),a=D(ps,l.eT,a),i=i,c=u}}),Ws=s(function(n,e,r){e=Ci(n(e));return m(Us,e.eU,e.eR,e.eV,e.eS,e.eW,e.eT,n,r)}),Os=x(function(n,e){return{fu:e.fv*n.cS-e.cS*n.fv,fv:e.cS*n.fu-e.fu*n.cS,cS:e.fu*n.fv-e.fv*n.fu}}),Gs={fu:0,fv:0,cS:0},Ys=x(function(n,e){var r=n,t=e,o=D(zt,xa(t.fu),D(zt,xa(t.fv),xa(t.cS)));if(o){n=t.cS/o,e=t.fv/o,t=t.fu/o,o=ou(t*t+e*e+n*n);return{fu:r*t/o,fv:r*e/o,cS:r*n/o}}return Gs})(1),Js=s(function(n,e,r){r=D(Sf,e,r),e=D(Sf,n,e);return Ys(D(Os,r,e))}),Ks=x(function(n,e){return{$:2,a:n,b:e}})({ec:3,em:0,eY:4}),k=s(function(n,e,r){return{a:n,b:e,c:r}}),Qs=(I=D(is,-.5,1),qn=D(is,-.5,1),c=D(is,-.5,1),fn=A(Rl,c,qn,I),Q=D(is,.5,1),H=A(Rl,c,qn,Q),dr=D(is,.5,1),ln=A(Rl,c,dr,I),j=A(Rl,c,dr,Q),ur=D(is,.5,1),c=A(Rl,ur,qn,I),I=A(Rl,ur,dr,I),qn=A(Rl,ur,qn,Q),Q=A(Rl,ur,dr,Q),Pr(function(n){if(n.b){var e=n.a,r=n.b,t=Ks(D(to,Di,n)),r=A(Ws,zi,e,r);return N(Jf,r,n,t,0)}return ss}(g([A(k,fn,I,c),A(k,fn,ln,I),A(k,H,qn,Q),A(k,H,Q,j),A(k,c,I,Q),A(k,c,Q,qn),A(k,fn,j,ln),A(k,fn,H,j),A(k,fn,c,qn),A(k,fn,qn,H),A(k,ln,Q,I),A(k,ln,j,Q)])))),Xs={$:0},Zs=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),nv=s(function(n,e,r){var t=e.a,o=e.b,e=n(e.c),o=n(o),n=n(t),t=oi(A(Js,n,o,e)),n={cA:t,cF:ri(n)},o={cA:t,cF:ri(o)},e={cA:t,cF:ri(e)};return D(jr,n,D(jr,o,D(jr,e,r)))}),ev=l(function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?tt:rt(A(n,e.a,r.a,t.a))}),rv=4294967295>>>32-Ct,tv=_,ov=s(function(n,e,r){for(;;){var t=D(tv,rv&e>>>n,r);if(t.$)return D(tv,rv&e,t.a);n=n-Ct,e=e,r=t.a}}),av=x(function(n,e){var r=e.a,t=e.b,o=e.c,e=e.d;return n<0||-1<y(n,r)?tt:-1<y(n,r>>>5<<5)?rt(D(tv,rv&n,e)):rt(A(ov,t,n,o))}),iv=x(function(n,e){return D(av,n,ci(e))}),cv=x(function(n,e){e=pa(e),n=pa(n);return{a:{a:n.fu,b:n.fv,c:n.cS},b:{a:e.fu,b:e.fv,c:e.cS}}}),uv=A(bl,0,0,0),lv=t(function(n,e,r,t,o,a){var i=a.a,c=a.b,u=a.c,a=D(Uo,D(cv,n,e),o);if(a.$){o={cA:uv,cF:ri(e)},e={cA:uv,cF:ri(n)},n=u+1;return{a:D(jr,{a:r,b:u,c:n},D(jr,{a:r,b:n,c:t},i)),b:D(jr,o,D(jr,e,c)),c:u+2}}return{a:D(jr,{a:r,b:a.a,c:t},i),b:c,c:u}}),fv=r(function(n,e,r,t,o){for(;;){if(!r.b)return{a:o.a,b:pt(o.b)};var a=r.a,i=a.a,c=a.b,u=r.b,l=n(a.c),f=n(c),s=n(i),v=t+2,d=t+1,a=n,c=e,i=u,u=t+3,d=T(lv,l,s,v,t,e,T(lv,f,l,d,v,e,T(lv,s,f,t,d,e,o)));n=a,e=c,r=i,t=u,o=d}}),sv=r(function(n,e,r,t,o){for(;;){if(!e.b)return{a:t,b:o,c:r};var a=e.a,i=a.a,c=a.b,u=e.b,l=n(a.c),f=n(c),s=n(i),a=r+2,c=r+1,i=r,s=A(Io,D(cv,s,l),a,A(Io,D(cv,l,f),c,A(Io,D(cv,f,s),i,o)));n=n,e=u,r=r+3,t=D(jr,{a:i,b:c,c:a},t),o=s}}),vv=s(function(n,e,r){var t,o=D(da,function(n){var e=n.a,r=n.b,n=n.c;return N(ev,s(function(n,e,r){return{a:n,b:e,c:r}}),D(iv,e,t),D(iv,r,t),D(iv,n,t))},ai(t=r)),a=A(ro,nv(e),h,o),r=F(sv,e,o,0,h,Vo),o=F(fv,e,r.b,o,0,{a:r.a,b:h,c:r.c}),r=o.a,o=o.b,a=o.b?d(a,o):a;return A(Zs,n,D(as,Za(a),r),D(jl,a,r))}),dv=(Dr=function(n){switch(n.$){case 0:return Xs;case 1:case 2:var e=n.a,r=D(to,Ti,n.b);return A(vv,e,Er,Ai(r));case 3:return A(vv,e=n.a,Er,n.b);case 4:case 5:case 6:case 7:var e;return A(vv,e=n.a,function(n){return n.cF},n.b);case 8:case 9:default:return Xs}})(Qs),mv=x(function(n,e){return D(Ls,function(n){var e=_a(bi(n)),r=ga(Pi(n)),t=ga(Si(n)),o=ga(xi(n));return{eq:gi(n),s:o.fu,t:o.fv,u:o.cS,v:t.fu,w:t.fv,x:t.cS,y:r.fu,z:r.fv,A:r.cS,N:e.fu,O:e.fv,P:e.cS,cJ:1}}(n),e)}),pv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"cA",position:"cF"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cL",viewMatrix:"f"}},gv=l(function(n,e,r,t){r=D(kf,r,Qs),r=(e={a:n,b:e}).a?e.b?$a(g([r,Ni(dv)])):r:e.b?Ni(dv):Yu,e=vi(t);return D(mv,si(t),D(Gf,{a:e.a,b:e.b,c:e.c},r))}),bv=x(function(n,e){return N(gv,!0,!1,n,e)}),hv=x(function(n,e){return N(gv,!0,!0,n,e)}),xv=x(function(n,e){return{fB:fi(n),fT:{a:Ua(e.a),b:Ua(e.b),c:Ua(e.c)}}}),Sv={aB:0,ao:ff,aT:tt,aU:0,aV:0,bk:0,S:0,cO:0,bn:0},Pv=$a,yv=x(function(n,e){return{fu:e.fu+n.fu,fv:e.fv+n.fv,cS:e.cS+n.cS}}),Mv=x(function(n,e){return{dv:D(yv,n,bi(e)),d_:xi(e),d$:Si(e),d0:Pi(e)}}),Cv=x(function(n,e){return{fu:n*e.fu,fv:n*e.fv,cS:n*e.cS}}),ye=function(){var n=g([M(Sv,{ao:A(uu,1,1,0)}),M(Sv,{ao:A(uu,1,-1,0)}),M(Sv,{ao:A(uu,-1,1,0)}),M(Sv,{ao:A(uu,-1,-1,0)})]),e={a:2.8,b:2,c:.5},r=D(xv,Vs,e),t=A(uu,-35,0,3.1),o=(o={d3:A(vf,0,180,180),fb:.5},Wa({d3:o.d3,$7:0,fb:o.fb})),o=Pv(g([D(hv,o,D(xv,Vs,e)),D(bv,o,D(xv,D(Mv,D(Cv,-.3,xi(Vs)),D(Mv,D(Cv,.5,Pi(Vs)),Vs)),{a:2.2,b:1.8,c:.5}))]));return D(hf,t,D(Fs,Ga(1190),D(Mi,r,{aE:o,M:{$:0,a:n}})))}(),_={fD:h,fO:h,fP:h,f2:h,ei:vu,gl:0,gw:Tt},Rr=s(function(n,e,r){return M(r,{ei:D(Yc,function(n){return n}(n),ga(e))})}),Tv=D(Wc,un,D(Wc,ye,A(Rr,9.807,he,_))),Lv=Mo(h),wv=s(function(n,e,r){var t=n,o=r,a=.5*e,i=Yf(a),c=ls(a),u=t.dv,l=o.fu-u.fu,f=o.fv-u.fv,s=o.cS-u.cS,v=t.fU,d=v.fu*c,n=i*d,r=d*d,e=v.fv*c,a=i*e,o=d*e,t=e*e,c=v.cS*c,i=i*c,d=d*c,e=e*c,c=c*c;return{fu:u.fu+(1-2*(t+c))*l+2*(o-i)*f+2*(d+a)*s,fv:u.fv+2*(o+i)*l+(1-2*(r+c))*f+2*(e-n)*s,cS:u.cS+2*(d-a)*l+2*(e+n)*f+(1-2*(r+t))*s}}),$v=x(function(n,e){var r=.5*n,n=ls(r),r=Yf(r),e=qi(e);return N(fu,e.fu*n,e.fv*n,e.cS*n,r)}),zv=s(function(n,e,r){var t=r.b;return D(lu,r.a,D(Su,D($v,e,n),t))}),Dv=s(function(n,e,r){var t=r,o=D(yu,t.b5,Ca(t.cg)),r=A(wv,n,e,ma(o)),o=A(zv,ga(Vi(n)),function(n){return n}(e),D(bf,pa(r),o)),o=D(yu,o,t.cg);return M(t,{cq:D(ku,o,t.c8),b5:o,dY:D(qu,o,t.dP)})}),Av=x(function(n,e){return{fU:e,dv:n}}),Nv=D(Av,ff,Cn),Fv=x(function(n,e){n=D(xv,Vs,{a:e,b:n,c:.1});return A(Dv,Nv,1.5707963267948966,D(Mi,n,{aE:D(bv,Ns(df),n),M:cu}))}),_v=s(function(n,e,r){return{fu:n,fv:e,cS:r}}),Vv=x(function(n,e){var r=n.d0,t=n.d$,n=n.d_;return{fu:n.fu*e.fu+t.fu*e.fv+r.fu*e.cS,fv:n.fv*e.fu+t.fv*e.fv+r.fv*e.cS,cS:n.cS*e.fu+t.cS*e.fv+r.cS*e.cS}}),qv=x(function(n,e){var r=e.b;return D(lu,D(Oc,n,e.a),r)}),Ev=x(function(n,e){var r=e,e=D(yu,r.b5,Ca(r.cg)),e=D(yu,D(qv,function(n){return n}(n),e),r.cg);return M(r,{b5:e,dY:D(qu,e,r.dP)})}),un=s(function(n,t,e){var r=D(Ev,A(_v,0,0,e/2),D(Fv,t,e)),o={a:5,b:30},a=o.a,i=o.b,o=D(Av,A(uu,a,0,a),ru),c=D(to,function(n){var e=90/i*n,r=A(_v,Yf(3.141592653589793*e/180)*a,0,-ls(3.141592653589793*e/180)*a);return function(n){return A(Dv,Ei(Ia(n)),(e-90)/180*3.141592653589793,n)}((n=D(Ev,A(_v,a,0,a),D(Fv,t,2)),D(Ev,D(Vv,Ia(n),r),n)))},D(to,qr,D(vt,1,i-1))),u=D(to,Ev(A(_v,0,0,e-2*a)),D(to,D(Dv,o,3.141592653589793),c));switch(n){case 0:return D(jr,r,u);case 1:return D(jr,r,c);case 2:return D(jr,r,d(c,u));default:return g([r])}}),ye=D(Av,ff,_s),Bv=(Rr={aC:15,l:.08*Ee,k:.17*Ee},_=2*ou(2*D(rf,10,2)),Rr=ja(g([D(to,Ev(A(_v,0,Ee/4+Rr.k/4,0)),A(un,2,Ee/2-Rr.k/2,cn)),D(to,Ev(A(_v,0,-Ee/4-Rr.k/4,0)),A(un,2,Ee/2-Rr.k/2,cn)),D(to,Ev(A(_v,0,0,Rr.l)),A(un,0,Rr.k,cn-Rr.l)),D(to,Ev(A(_v,-Rr.aC,0,0)),A(un,2,Rr.k,Rr.l)),g([A(Dv,ye,1.5707963267948966,D(Ev,A(_v,-Rr.k/2,Rr.aC/2,Rr.l/2),D(Fv,Rr.aC,Rr.l))),A(Dv,ye,-1.5707963267948966,D(Ev,A(_v,-Rr.k/2,-Rr.aC/2,Rr.l/2),D(Fv,Rr.aC,Rr.l))),A(Dv,Nv,1.5707963267948966,D(Ev,A(_v,-Rr.l,0,-Rr.aC/2),D(Fv,Rr.k,Rr.aC)))])])),ja(g([D(to,Ev(A(_v,J/2,0,0)),D(to,D(Dv,ye,3.141592653589793),Rr)),D(to,Ev(A(_v,J/2-10,-Ee/2+10,0)),D(to,D(Dv,ye,2.356194490192345),A(un,2,_,cn))),D(to,Ev(A(_v,0,-Ee/2,0)),D(to,D(Dv,ye,1.5707963267948966),A(un,2,J,cn))),D(to,Ev(A(_v,-J/2+10,-Ee/2+10,0)),D(to,D(Dv,ye,.7853981633974483),A(un,2,_,cn))),D(to,Ev(A(_v,-J/2,0,0)),Rr),D(to,Ev(A(_v,-J/2+10,Ee/2-10,0)),D(to,D(Dv,ye,-.7853981633974483),A(un,2,_,cn))),D(to,Ev(A(_v,0,Ee/2,0)),D(to,D(Dv,ye,-1.5707963267948966),A(un,2,J,cn))),D(to,Ev(A(_v,J/2-10,Ee/2-10,0)),D(to,D(Dv,ye,-2.356194490192345),A(un,2,_,cn)))]))),Rv=x(function(n,e){var r=n.d0,t=n.d$,n=n.d_;return{fu:n.fu*e.fu+t.fu*e.fv+r.fu*e.cS,fv:n.fv*e.fu+t.fv*e.fv+r.fv*e.cS,cS:n.cS*e.fu+t.cS*e.fv+r.cS*e.cS}}),Iv=x(function(n,e){return 0<y(n-e.bp,eu)}),kv=x(function(n,e){return ya(D(Jc,n,e))}),Hv=x(function(n,e){var r=D(kv,ma(n.b5),ma(e.b5)),t=n.d4+e.d4;return 0<t*t-r&&!!(n.di+e.di)}),jv=x(function(n,e){return n.fu*e.fu+n.fv*e.fv+n.cS*e.cS}),Uv=l(function(n,e,r,t){for(;;){if(!e.b)return r;var o=e.a,a=e.b,i=D(jv,o.cA,n);t=0<t-i?(n=n,e=a,r=o,i):(n=n,e=a,r=r,t)}}),Wv=x(function(n,e){if(n.b){var r=n.a;return rt(N(Uv,e,n.b,r,D(jv,r.cA,e)))}return tt}),Ov=s(function(n,e,r){return{fu:e.fu+n*(r.fu-e.fu),fv:e.fv+n*(r.fv-e.fv),cS:e.cS+n*(r.cS-e.cS)}}),Gv=r(function(n,e,r,t,o){var a=D(jv,n,r)+e,e=D(jv,n,t)+e;return a<0?D(jr,e<0?t:A(Ov,a/(a-e),r,t),o):e<0?D(jr,t,D(jr,A(Ov,a/(a-e),r,t),o)):o}),Yv=l(function(n,e,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;if(!a.b)return A(n,o,e,r);var i=n,c=e,o=A(n,o,a.a,r);n=i,e=c,r=o,t=a}}),Jv=s(function(n,e,r){if(r.b&&r.b.b)return N(Yv,n,r.a,e,r);return e}),Kv=x(function(n,e){var r=n.ay,t=n.cA;return A(Jv,x(function(n,e){e=qi(D(Jc,n,e)),e=D(Gc,t,e),n=-D(jv,n,e);return D(Jv,D(Gv,e,n),h)}),e,r)}),Qv=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,v=D(jv,e.cA,f)+r;o=0<v?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(c=r,u=s,l=D(jr,{gm:a=n,gs:{fu:f.fu-v*(i=e).cA.fu,fv:f.fv-v*e.cA.fv,cS:f.cS-v*e.cA.cS},gt:f},o),n=a,e=i,r=c,t=u,l)}}),Xv=l(function(n,e,r,t){var o=e.ay,e=(e=n.ay).b?e.a:vu,e=-D(jv,n.cA,e);return F(Qv,r,n,e,D(Kv,n,o),t)}),Zv=l(function(n,e,r,t){for(;;){if(!t.b)return{cy:r,dq:e};var o=t.a,o=o.fu*n.fu+o.fv*n.fv+o.cS*n.cS;n=n,e=0<e-o?o:e,r=0<r-o?r:o,t=t.b}}),nd=s(function(n,e,r){e=N(Zv,r,340282347e30,-340282347e30,e.ay),r=N(Zv,r,340282347e30,-340282347e30,n.ay),n=e.cy-r.dq,e=r.cy-e.dq;return e<0||n<0?tt:rt(0<e-n?n:e)}),ed=o(function(n,e,r,t,o,a,i){for(;;){if(!t.b)return 0<D(jv,D(Jc,e.cF,n.cF),a)?rt(Bi(a)):rt(a);var c=t.a,u=t.b;if(o.b){var l=o.b,f=D(Gc,c,o.a);if(0<xa((c=f).fu)-1e-6||0<xa(c.fv)-1e-6||0<xa(c.cS)-1e-6){c=qi(f),f=A(nd,n,e,c);if(1===f.$)return tt;f=f.a;i=f-i<0?(n=n,e=e,r=r,t=t,o=s=l,a=c,f):(n=n,e=e,r=r,t=t,o=s=l,a=a,i)}else n=n,e=e,r=r,t=t,o=s=l,a=a,i=i}else{var s=r;n=n,e=e,r=r,t=u,o=s,a=a,i=i}}}),rd=r(function(n,e,r,t,o){for(;;){if(!r.b)return S(ed,n,e,e.dX,n.dX,e.dX,t,o);var a=r.a,i=r.b,c=A(nd,n,e,a);if(1===c.$)return tt;c=c.a;o=c-o<0?(n=n,e=e,r=i,t=a,c):(n=n,e=e,r=i,t=t,o)}}),td=x(function(n,e){return F(rd,n,e,d(n.fn,e.fn),vu,340282347e30)}),od=s(function(n,e,r){var t=D(td,n,e);if(t.$)return r;var o=t.a,t=Bi(o),o=D(Wv,n.bJ,o);if(o.$)return r;o=o.a,e=D(Wv,e.bJ,t);return e.$?r:N(Xv,o,e.a,t,r)}),ad=l(function(n,e,r,t){for(;;){if(!e.b)return t;var o,a,i,c,u=e.a.ay,l=e.a.cA,f=e.b,u=D(jv,l,D(Jc,u.b?u.a:vu,n));if(u<0)return tt;t=y(u,r)<0?(a=f,c=rt({gm:Bi(l),gs:o=n,gt:D(Oc,n,D(Yc,i=u,l))}),n=o,e=a,r=i,c):(n=o=n,e=a=f,r=i=r,c=t)}}),id=l(function(n,e,r,t){r=N(ad,e,r.bJ,340282347e30,tt);return r.$?t:D(jr,n(r.a),t)}),cd=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,v=(f.fu-e.fu)*r.fu+(f.fv-e.fv)*r.fv+(f.cS-e.cS)*r.cS;o=0<v?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(i=e,u=s,l=D(jr,(a=n)({gm:c=r,gs:{fu:f.fu-v*r.fu,fv:f.fv-v*r.fv,cS:f.cS-v*r.cS},gt:f}),o),n=a,e=i,r=c,t=u,l)}}),ud=l(function(n,e,r,t){return F(cd,n,e.cF,e.cA,r.ay,t)}),ld=l(function(n,e,r,t){var o=e.cF,e=e.cA,o=(r.fu-o.fu)*e.fu+(r.fv-o.fv)*e.fv+(r.cS-o.cS)*e.cS;return 0<o?t:D(jr,n({gm:e,gs:{fu:r.fu-o*e.fu,fv:r.fv-o*e.fv,cS:r.cS-o*e.cS},gt:r}),t)}),fd=l(function(n,e,r,t){var o=e.cA,a=e.cF,e=r.cF,r={fu:e.fu-r.aL*o.fu,fv:e.fv-r.aL*o.fv,cS:e.cS-r.aL*o.cS},a=(r.fu-a.fu)*o.fu+(r.fv-a.fv)*o.fv+(r.cS-a.cS)*o.cS;return 0<a?t:D(jr,n({gm:o,gs:{fu:r.fu-a*o.fu,fv:r.fv-a*o.fv,cS:r.cS-a*o.cS},gt:r}),t)}),sd=x(function(n,e){n=D(Jc,n,e),e=Ma(n);return{fu:n.fu/e,fv:n.fv/e,cS:n.cS/e}}),vd=l(function(n,e,r,t){for(;;){if(n(r))return r;if(!t.b)return r;var o=t.b,a=D(e,t.a,r);n=n,e=e,r=a,t=o}}),dd=s(function(n,e,r){function t(n){var e=ya(n);return e-o<0?{a:rt(n),b:e}:r}var o=r.b,a=D(Jc,e,n),i=qi(a),c=-D(jv,n,i);if(c<0)return{$:0,a:t(n)};if(0<c*c-ya(a))return{$:0,a:t(e)};c=D(Oc,n,D(Yc,c,i)),i=ya(c);return i-o<0?{$:1,a:{a:c,b:i}}:{$:0,a:r}}),md=x(function(n,e){return N(vd,Ii,x(function(n,e){return e.$?e:A(dd,n.a,n.b,e.a)}),e,n)}),pd=x(function(n,e){return A(lt,md,{$:0,a:{a:tt,b:n*n}},e)}),gd=x(function(n,e){return{$:1,a:n,b:e}}),bd=x(function(n,o){return A(Jv,s(function(n,e,r){var t=D(Gc,o,D(Jc,e,n));return D(jv,t,n)<0?D(jr,{a:n,b:e},r):r}),h,n)}),hd=l(function(n,e,r,t){var o=r.b?-D(jv,e,r.a):-1;if(o-n<0&&0<o){r=D(bd,r,e);return r.b?{$:0,a:D(jr,r,t)}:D(gd,e,o)}return{$:0,a:t}}),xd=s(function(r,t,n){var e=n.bJ,n=x(function(n,e){return{a:rt(D(Jc,r,D(Yc,e,n))),b:t-e}}),o=x(function(n,e){return{a:rt(D(Oc,n,r)),b:t-ou(e)}}),e=N(vd,Ri,x(function(n,e){if(e.$)return e;e=e.a;return N(hd,t,n.cA,(n=n.ay,A(lt,x(function(n,e){return D(jr,D(Jc,n,r),e)}),h,n)),e)}),{$:0,a:h},e);return e.$?D(n,e.a,e.b):function(n){var e=D(pd,t,n);if(e.$){n=e.a;return D(o,n.a,n.b)}if(e.a.a.$)return e.a;e=e.a;return D(o,e.a.a,e.b)}(e.a)}),Sd=l(function(n,e,r,t){var o=e.cF,e=A(xd,o,e.aL,r),r=e.a,e=e.b;if(r.$)return t;r=r.a,o=D(sd,r,o);return D(jr,n({gm:o,gs:{fu:r.fu+e*o.fu,fv:r.fv+e*o.fv,cS:r.cS+e*o.cS},gt:r}),t)}),Pd=x(function(n,e){var r=e.cS-n.cS,t=e.fv-n.fv,n=e.fu-n.fu;return ou(n*n+t*t+r*r)}),yd=l(function(n,e,r,t){var o=e.aL,a=e.cF,i=D(sd,r,a),e=D(Pd,r,a)-o;return 0<e?t:D(jr,n({gm:i,gs:D(Oc,a,D(Yc,o-e,i)),gt:r}),t)}),Md=s(function(n,e,r){var t=e.aL,o=n.aL,a=e.cF,i=n.cF,e=D(Pd,a,i)-o-t,n=D(sd,a,i);return 0<e?r:D(jr,{gm:n,gs:D(Oc,i,D(Yc,o-e,n)),gt:D(Oc,a,D(Yc,-t,n))},r)}),Cd=s(function(n,e,r){switch(n.$){case 0:var t=n.a;switch(e.$){case 0:return A(od,t,e.a,r);case 1:return N(ud,ki,e.a,t,r);case 2:return N(Sd,ki,e.a,t,r);default:return N(id,ki,e.a,t,r)}case 1:var o=n.a;switch(e.$){case 1:return r;case 0:return N(ud,Er,o,e.a,r);case 2:return N(fd,Er,o,e.a,r);default:return N(ld,Er,o,e.a,r)}case 2:var a=n.a;switch(e.$){case 1:return N(fd,ki,e.a,a,r);case 0:return N(Sd,Er,a,e.a,r);case 2:return A(Md,a,e.a,r);default:return N(yd,Er,a,e.a,r)}default:var i=n.a;switch(e.$){case 1:return N(ld,ki,e.a,i,r);case 0:return N(id,Er,i,e.a,r);case 2:return N(yd,ki,e.a,i,r);default:return r}}}),Td=r(function(n,e,r,t,o){for(;;)if(r.b){var a=n,i=e,c=r.b,u=t,l=A(Cd,n,r.a,o);n=a,e=i,r=c,t=u,o=l}else{if(!e.b)return o;n=a=e.a,e=i=e.b,t=u=r=c=t,o=l=o}}),Ld=x(function(n,e){return n.b?F(Td,n.a,n.b,e,e,h):h}),wd=l(function(e,n,r,t){for(;;)if(r.b){var o=r.a,a=e,i=n,c=l=r.b,u=function(){if(D(Hv,e,o)){var n=D(Ld,e.dY,o.dY);return n.b?D(jr,{fE:e,fF:o,fQ:n},t):t}return t}();e=a,n=i,r=c,t=u}else{if(!n.b)return t;var l;e=a=n.a,n=i=l=n.b,r=c=l,t=u=t}}),$d=r(function(n,e,r,t,o){var a=e.gs,i=e.gt,c=e.gm,u=o.K,l=o.G,e=o.D,o=o.E,e=(n+1)*(D(jv,t.cQ,c)-D(jv,r.cQ,c))+D(jv,t.cd,o)+D(jv,r.cd,e);return-((i.fu-a.fu)*c.fu+(i.fv-a.fv)*c.fv+(i.cS-a.cS)*c.cS)*u-e*l}),zd=s(function(n,e,r){var t=r.D,o=r.E;return n.cr+e.cr+t.fu*(n.cq.ez*t.fu+n.cq.eA*t.fv+n.cq.eB*t.cS)+t.fv*(n.cq.eD*t.fu+n.cq.eE*t.fv+n.cq.eF*t.cS)+t.cS*(n.cq.eH*t.fu+n.cq.eI*t.fv+n.cq.eJ*t.cS)+o.fu*(e.cq.ez*o.fu+e.cq.eA*o.fv+e.cq.eB*o.cS)+o.fv*(e.cq.eD*o.fu+e.cq.eE*o.fv+e.cq.eF*o.cS)+o.cS*(e.cq.eH*o.fu+e.cq.eI*o.fv+e.cq.eJ*o.cS)+r.R}),Dd=l(function(n,e,r,t){var o=t.D,a=t.L,i=t.E,t=0<r.di?n:vu,n=0<e.di?n:vu;return a.fu*(r.cr*r.cl.fu+t.fu)+a.fv*(r.cr*r.cl.fv+t.fv)+a.cS*(r.cr*r.cl.cS+t.cS)-(a.fu*(e.cr*e.cl.fu+n.fu)+a.fv*(e.cr*e.cl.fv+n.fv)+a.cS*(e.cr*e.cl.cS+n.cS))+o.fu*(e.cq.ez*e.cP.fu+e.cq.eA*e.cP.fv+e.cq.eB*e.cP.cS)+o.fv*(e.cq.eD*e.cP.fu+e.cq.eE*e.cP.fv+e.cq.eF*e.cP.cS)+o.cS*(e.cq.eH*e.cP.fu+e.cq.eI*e.cP.fv+e.cq.eJ*e.cP.cS)+i.fu*(r.cq.ez*r.cP.fu+r.cq.eA*r.cP.fv+r.cq.eB*r.cP.cS)+i.fv*(r.cq.eD*r.cP.fu+r.cq.eE*r.cP.fv+r.cq.eF*r.cP.cS)+i.cS*(r.cq.eH*r.cP.fu+r.cq.eI*r.cP.fv+r.cq.eJ*r.cP.cS)}),Ad=r(function(n,e,r,t,o){return{ef:{V:o.V,Y:o.Y,ad:A(n,r,t,o)-e.r*N(Dd,e.ei,r,t,o),ae:1/A(zd,r,t,o),K:o.K,G:o.G,R:o.R,L:o.L,D:o.D,E:o.E},fg:0}}),Nd=l(function(n,e,r,t){var o=4/(n.r*n.r*1e7*13),a=4/(13*n.r),i=D(sd,ma(r.b5),ma(e.b5)),c=t/2,t=D(Yc,c,i),c=D(Yc,-c,i);return jr(F(Ad,D($d,0,{gm:i,gs:D(Oc,t,ma(e.b5)),gt:D(Oc,c,ma(r.b5))}),n,e,r,{V:1e6,Y:-1e6,ad:0,ae:0,K:a,G:12/13,R:o,L:i,D:D(Gc,i,t),E:D(Gc,c,i)}))}),Fd=s(function(n,e,r){var t=r.D,o=r.L,r=r.E;return t.fu*n.cd.fu+t.fv*n.cd.fv+t.cS*n.cd.cS-(o.fu*n.cQ.fu+o.fv*n.cQ.fv+o.cS*n.cQ.cS)+(o.fu*e.cQ.fu+o.fv*e.cQ.fv+o.cS*e.cQ.cS)+(r.fu*e.cd.fu+r.fv*e.cd.fv+r.cS*e.cd.cS)}),_d=l(function(n,e,r,t){var o=n.gm,a=n.a_,i=n.aZ,c=t.K,n=t.G,t=A(Fd,e,r,t);return-(i-D(jv,o,a))*c-t*n}),Vd=t(function(n,e,r,t,o,a){var i=D(Mu,r.b5,o),c=D(Mu,e.b5,t),u=4/(n.r*n.r*1e7*13),l=4/(13*n.r),o=i,t=i,i=ji(c),c=i.a,i=i.b;return D(jr,F(Ad,_d({aZ:0,gm:c,a_:t}),n,e,r,{V:1e6,Y:-1e6,ad:0,ae:0,K:l,G:12/13,R:u,L:vu,D:D(Gc,t,c),E:D(Gc,c,t)}),D(jr,F(Ad,_d({aZ:0,gm:i,a_:o}),n,e,r,{V:1e6,Y:-1e6,ad:0,ae:0,K:l,G:12/13,R:u,L:vu,D:D(Gc,o,i),E:D(Gc,i,o)}),a))}),qd=t(function(e,r,t,n,o,a){var i=4/(e.r*e.r*1e7*13),c=4/(13*e.r),u=D(Mu,t.b5,o),l=D(Mu,r.b5,n);return A(lt,function(n){return jr(F(Ad,D($d,0,{gm:n,gs:D(Oc,ma(r.b5),l),gt:D(Oc,ma(t.b5),u)}),e,r,t,{V:1e6,Y:-1e6,ad:0,ae:0,K:c,G:12/13,R:i,L:n,D:D(Gc,n,l),E:D(Gc,u,n)}))},a,Bs)}),Ed=l(function(n,e,r,t){switch(t.$){case 0:return F(qd,n,e,r,t.a,t.b);case 1:var o=t.b,a=t.d;return D(Fo,F(qd,n,e,r,t.a,t.c),F(Vd,n,e,r,o,a));case 2:var i=t.b,c=t.c,u=t.d,l=t.f,o=t.g,a=t.h;return D(Fo,F(qd,n,e,r,t.a,t.e),L(Ui,n,e,r,i,l,c,o,u,a));default:return N(Nd,n,e,r,t.a)}}),Bd=l(function(n,e,r,t){return{fG:e.M,fH:r.M,c4:A(lt,A(Ed,n,e,r),h,t)}}),Rd=s(function(n,e,r){var t=r.G;return-A(Fd,n,e,r)*t}),Id=o(function(n,e,r,t,o,a,i){var c=4/(n.r*n.r*1e7*13),u=4/(13*n.r),l=D(Jc,a.gt,ma(o.b5)),f=D(Jc,a.gs,ma(t.b5)),s=ji(a.gm),v=s.a,s=s.b;return D(jr,F(Ad,D($d,r,a),n,t,o,{V:1e6,Y:0,ad:0,ae:0,K:u,G:12/13,R:c,L:a.gm,D:D(Gc,a.gm,f),E:D(Gc,l,a.gm)}),D(jr,F(Ad,Rd,n,t,o,{V:e,Y:-e,ad:0,ae:0,K:u,G:12/13,R:c,L:v,D:D(Gc,v,f),E:D(Gc,l,v)}),D(jr,F(Ad,Rd,n,t,o,{V:e,Y:-e,ad:0,ae:0,K:u,G:12/13,R:c,L:s,D:D(Gc,s,f),E:D(Gc,l,s)}),i)))}),kd=x(function(n,e){e=.5*(n+e),e=1+e-xa(1-e);return.25*(e+xa(e))}),Hd=x(function(n,e){return D(kd,n.fI,e.fI)}),jd=x(function(n,e){return D(kd,n.f3,e.f3)}),Ud=x(function(n,e){var r=e.fE,t=e.fF,o=e.fQ,a=0<r.cr+t.cr?D(jd,r.eP,t.eP)*n.ej/(r.cr+t.cr):0,e=D(Hd,r.eP,t.eP);return{fG:r.M,fH:t.M,c4:A(lt,F(Id,n,a,e,r,t),h,o)}}),Wd=x(function(n,e){return D(Vt,n,function(){return e})}),Od=V,Gd=l(function(n,e,r,t){var o=rv&e>>>n,a=D(tv,o,t);if(a.$){var i=A(Od,rv&e,r,a.a);return A(Od,o,{$:1,a:i},t)}a=N(Gd,n-Ct,e,r,a.a);return A(Od,o,{$:0,a:a},t)}),Yd=s(function(n,e,r){var t=r.a,o=r.b,a=r.c,i=r.d;return n<0||-1<y(n,t)?r:-1<y(n,t>>>5<<5)?N(St,t,o,a,A(Od,rv&n,e,i)):N(St,t,o,N(Gd,o,n,e,a),i)}),Jd=x(function(n,e){if(e.b){var r={cY:M(e.a,{M:-1}),bs:0,bt:0,bu:0,bw:0,bx:0,by:0},n=D(Wd,n,r);return{a:A(lt,function(n){return D(Yd,n.M,{cY:n,bs:0,bt:0,bu:0,bw:0,bx:0,by:0})},n,e),b:rt(r)}}return{a:Tt,b:tt}}),Kd=r(function(n,e,r,t,o){for(;;){if(!o.b)return{fE:n,fF:e,c3:t,c4:r};var a=o.a.fg,i=o.a.ef,c=o.b,u=e.cY.cq,l=n.cY.cq,f=i.D,s=i.L,v=i.E,d=i.Y,m=i.V,p=i.ae*(i.ad-(f.fu*n.bw+f.fv*n.bx+f.cS*n.by-(s.fu*n.bs+s.fv*n.bt+s.cS*n.bu)+(s.fu*e.bs+s.fv*e.bt+s.cS*e.bu)+(v.fu*e.bw+v.fv*e.bx+v.cS*e.by))-i.R*a),d=a+p-d<0?d-a:0<a+p-m?m-a:p,m=d*n.cY.cr,p=d*e.cY.cr;n=0<n.cY.di?{cY:n.cY,bs:n.bs-m*s.fu,bt:n.bt-m*s.fv,bu:n.bu-m*s.cS,bw:n.bw+(l.ez*f.fu+l.eA*f.fv+l.eB*f.cS)*d,bx:n.bx+(l.eD*f.fu+l.eE*f.fv+l.eF*f.cS)*d,by:n.by+(l.eH*f.fu+l.eI*f.fv+l.eJ*f.cS)*d}:n,e=0<e.cY.di?{cY:e.cY,bs:e.bs+p*s.fu,bt:e.bt+p*s.fv,bu:e.bu+p*s.cS,bw:e.bw+(u.ez*v.fu+u.eA*v.fv+u.eB*v.cS)*d,bx:e.bx+(u.eD*v.fu+u.eE*v.fv+u.eF*v.cS)*d,by:e.by+(u.eH*v.fu+u.eI*v.fv+u.eJ*v.cS)*d}:e,r=D(jr,{ef:i,fg:a+d},r),t=t+xa(d),o=c}}),Qd=t(function(n,e,r,t,o,a){for(;;)if(t.b){var i,c=t.a.fG,u=t.a.fH,l=t.a.c4,f=t.b,s=c-o.cY.M&&o.cY.di?A(Yd,o.cY.M,o,a):a,v=c-o.cY.M?D(av,c,a):rt(o);a=v.$?(n=d=n,e=m=e,r=p=r,t=g=f,o=o,s):(i=v.a,(v=D(av,u,s)).$?(n=d=n,e=m=e,r=p=r,t=g=f,o=o,s):(n=d=n,e=m=(l=F(Kd,i,v.a,h,e,l)).c3,r=p=D(jr,{fG:c,fH:u,c4:l.c4},r),t=g=f,o=l.fE,0<l.fF.cY.di?A(Yd,u,l.fF,s):s))}else{if(!n||e-1e-6<0)return A(Yd,o.cY.M,o,a);var d=n-1,m=0,p=h,g=pt(r);n=d,e=m,r=p,t=g,o=o,a=a}}),Xd=E,Zd=x(function(e,n){var r=n.d,t=function(n){return n.$?{$:1,a:D(Xd,e,n.a)}:{$:0,a:D(Xd,t,n.a)}};return N(St,n.a,n.b,D(Xd,t,n.c),D(Xd,e,r))}),nm=x(function(n,e){var r=n.fu,t=n.fv,o=n.cS,a=e.b,i=a.a,c=a.b,n=a.c,a=a.d;return D(lu,e.a,N(fu,i+.5*(r*a+t*n-o*c),c+.5*(t*a+o*i-r*n),n+.5*(o*a+r*c-t*i),a+.5*(-r*i-t*c-o*n)))}),em=x(function(n,e){var r=n.r,t=n.ei,o=e.cY,a=e.bs,i=e.bt,c=e.bu,u=e.bw,l=e.bx,n=e.by,e=D(rf,1-o.ey,r),i={fu:(t.fu+o.cl.fu*o.cr)*r+o.cQ.fu*e+a,fv:(t.fv+o.cl.fv*o.cr)*r+o.cQ.fv*e+i,cS:(t.cS+o.cl.cS*o.cr)*r+o.cQ.cS*e+c},t=Ma(i),e=t&&o.d4&&0<=t*r-o.d4?D(Yc,o.d4/(t*r),i):i,c=D(rf,1-o.d2,r),t={fu:(o.cq.ez*o.cP.fu+o.cq.eA*o.cP.fv+o.cq.eB*o.cP.cS)*r+o.cd.fu*c+u,fv:(o.cq.eD*o.cP.fu+o.cq.eE*o.cP.fv+o.cq.eF*o.cP.cS)*r+o.cd.fv*c+l,cS:(o.cq.eH*o.cP.fu+o.cq.eI*o.cP.fv+o.cq.eJ*o.cP.cS)*r+o.cd.cS*c+n},c=(u=D(qv,{fu:e.fu*r,fv:e.fv*r,cS:e.cS*r},D(nm,{fu:t.fu*r,fv:t.fv*r,cS:t.cS*r},o.b5)),l=u.a,c=ou((n=(c=u.b).a)*n+(e=c.b)*e+(r=c.c)*r+(u=c.d)*u),D(lu,l,N(fu,n/c,e/c,r/c,u/c)));return{d2:o.d2,cd:t,d4:o.d4,cg:o.cg,F:o.F,cl:vu,M:o.M,c8:o.c8,cq:D(ku,c,o.c8),cr:o.cr,ey:o.ey,di:o.di,eP:o.eP,dP:o.dP,cP:vu,b5:c,cQ:i,dY:D(qu,c,o.dP)}}),rm=s(function(e,n,r){n=D(Zd,function(n){return 0<n.cY.M+1&&0<n.cY.di?D(em,e,n):n.cY},n);return M(r,{fD:D(iu,function(n){return 0<n.M+1},Yr(n)),gw:n})}),tm=x(function(n,e){var o={r:n,ei:e.ei,ej:Ma(e.ei)},r=A(lt,x(function(n,e){return D(jr,D(Ud,o,n),e)}),h,e.fP),n=D(Jd,e.gl,e.fD),a=n.a,n=n.b,r=A(lt,x(function(n,e){var r=n.fH,t=n.fO,n=D(av,n.fG,a);if(1===n.$)return e;n=n.a,r=D(av,r,a);return 1===r.$?e:D(jr,N(Bd,o,n.cY,r.a.cY,t),e)}),r,e.fO),n=n.$?a:T(Qd,20,0,h,r,n.a,a);return A(rm,o,n,e)}),om=x(function(n,e){return D(tm,Hi(n),function(r){return M(r,{fP:function(){var n=r.fD;if(n.b){var e=n.b;return N(wd,n.a,e,e,h)}return h}()})}(e))}),am=l(function(n,e,r,t){var o=D(Jc,r,ma(t.b5)),a=D(Yc,n,e),i=D(Gc,o,a),c=i.fu,u=i.fv,r=i.cS,n=t.cd,e=t.cq,o=t.cQ,i=t.cr;return M(t,{cd:{fu:n.fu+e.ez*c+e.eA*u+e.eB*r,fv:n.fv+e.eD*c+e.eE*u+e.eF*r,cS:n.cS+e.eH*c+e.eI*u+e.eJ*r},cQ:{fu:o.fu+i*a.fu,fv:o.fv+i*a.fv,cS:o.cS+i*a.cS}})}),im=l(function(n,e,r,t){return 0<t.di?N(am,n,ga(e),pa(r),t):t}),cm=s(function(n,e,r){return y(n,e)<1?A(ef,n,e,r):A(ef,e,n,r)}),um=x(function(n,e){return e.fu*n.fu+e.fv*n.fv+e.cS*n.cS}),lm=x(function(e,n){return D(ts,function(n){return P(n,e)},n)}),fm=x(function(t,n){var e=x(function(n,e){var r=e.a,e=e.b;return t(n)?{a:D(jr,n,r),b:e}:{a:r,b:D(jr,n,e)}});return A(ro,e,{a:h,b:h},n)}),sm=x(function(n,e){var r=e,e=D(fm,D(Fo,Er,n),r.fD),n=e.a,e=e.b,t=A(lt,D(Fo,function(n){return n.M},jr),h,e);return M(r,{fD:n,fO:A(lt,x(function(n,e){return D(lm,n.fG,t)||D(lm,n.fH,t)?e:D(jr,n,e)}),h,r.fO),f2:d(t,r.f2)})}),vm=x(function(n,e){return y(e,n)<0}),dm=x(function(n,e){var r=n.dv,t=n.d0,o=n.d$,n=n.d_;return{fu:r.fu+e.fu*n.fu+e.fv*o.fu+e.cS*t.fu,fv:r.fv+e.fu*n.fv+e.fv*o.fv+e.cS*t.fv,cS:r.cS+e.fu*n.cS+e.fv*o.cS+e.cS*t.cS}}),mm=x(function(n,e){return D(Av,D(dm,n,e.dv),D(Rv,n,e.fU))}),pm=x(function(n,e){return D(hu,n.b,e)}),gm=x(function(n,e){var i=n.fU,c=n.f4;return A(lt,x(function(n,e){var r=n.cA,t=n.ay,o=t.b?t.a:vu,n=D(jv,i,r);if(n<0){o=D(Jc,o,c),n=D(jv,r,o)/n;if(n<0)return e;var a={fu:i.fu*n+c.fu,fv:i.fv*n+c.fv,cS:i.cS*n+c.cS};return A(Jv,s(function(n,e,r){return r&&0<D(jv,D(Jc,a,n),D(Jc,e,n))}),!0,t)&&(e.$||n-e.a.bG<0)?rt({bG:n,cA:r,ar:a}):e}return e}),tt,e.bJ)}),bm=x(function(n,e){var r=n.f4,t=n.fU,o=e.cA,n=e.cF,e=D(jv,t,o);if(e<0){n=D(Jc,n,r),e=D(jv,o,n)/e;return e<0?tt:rt({bG:e,cA:o,ar:{fu:t.fu*e+r.fu,fv:t.fv*e+r.fv,cS:t.cS*e+r.cS}})}return tt}),hm=x(function(n,e){var r=n.f4,t=n.fU,o=e.cF,a=e.aL,n=2*(t.fu*(r.fu-o.fu)+t.fv*(r.fv-o.fv)+t.cS*(r.cS-o.cS)),e=t.fu*t.fu+t.fv*t.fv+t.cS*t.cS,a=n*n-4*e*((r.fu-o.fu)*(r.fu-o.fu)+(r.fv-o.fv)*(r.fv-o.fv)+(r.cS-o.cS)*(r.cS-o.cS)-a*a);if(a<0)return tt;e=(-n-ou(a))/(2*e);if(e<0)return tt;t={fu:r.fu+t.fu*e,fv:r.fv+t.fv*e,cS:r.cS+t.cS*e},o=D(Jc,t,o);return rt({bG:e,cA:o,ar:t})}),xm=x(function(n,e){switch(e.$){case 1:return D(bm,n,e.a);case 2:return D(hm,n,e.a);case 0:return D(gm,n,e.a);default:return tt}}),Sm=x(function(r,n){return A(lt,x(function(n,e){n=D(xm,r,n);if(n.$)return e;n=n.a;return e.$||n.bG-e.a.bG<0?rt(n):e}),tt,n.dY)}),Pm=x(function(t,n){n=n.fD;return A(lt,x(function(n,e){var r=D(Sm,t,n);if(r.$)return e;r=r.a;return e.$||r.bG-e.a.bG<0?rt({cY:n,bG:r.bG,cA:r.cA,ar:r.ar}):e}),tt,n)}),ym=x(function(n,e){var r=D(Pm,{fU:ga(Vi(n)),f4:pa(Oi(n))},e);if(r.$)return tt;n=r.a.cY,e=r.a.ar,r=r.a.cA;return rt({cY:n,cA:D(pm,D(yu,n.b5,Ca(n.cg)),r),ar:D(xu,D(yu,n.b5,Ca(n.cg)),e)})}),Mm=x(function(n,e){return e*n}),Cm=x(function(n,e){return e.fu*n.fu+e.fv*n.fv+e.cS*n.cS}),Tm=x(function(n,e){return e.fu*n.fu+e.fv*n.fv+e.cS*n.cS}),Lm=x(function(n,e){return{fu:e.fu-n.fu,fv:e.fv-n.fv,cS:e.cS-n.cS}}),wm=x(function(n,e){var r=e,e=ma(r.b5),n=pa(n),e=D(Gc,r.cd,{fu:n.fu-e.fu,fv:n.fv-e.fv,cS:n.cS-e.cS});return D(Oc,e,r.cQ)}),$m=x(function(n,e){return M(e,{F:n})}),zm=r(function(n,e,r,t,o){for(;;){if(!t.b)return D($m,{aE:ha(r).aE,M:{$:0,a:pt(o)}},r);var a,i,c,u,l=t.a,f=t.b,s=l.aT;o=(t=(r=(e=(n=(l=s.$?(u=D(is,.99,l.aU),M(l,{aU:D(is,.99,l.aU),bk:D(cs,l.bk,u)})):(a=s.a.cA,i=D(wm,s.a.ar,r),c=D(Rv,e,tu.cm),s=D(Tm,a,c),M(l,{aU:u=D(um,i,D(Lm,D(Cv,s,a),ui(c)))*Hi(n)/Ha(tu.aL),bk:D(cs,l.bk,l.aU)})),n),e),r),f),D(jr,l,o))}}),Dm=s(function(n,e,r){return{fu:r.fu+e*n.fu,fv:r.fv+e*n.fv,cS:r.cS+e*n.cS}}),Am=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return F(zm,n,r,t,o,h);var c=i.a,u=i.b,l=D(Rv,r,hi(tu.a7)),f=a?D(is,c.cN,c.cM):c.cM,s=a?D(is,c.cN,c.cn):c.cn,v=D(dm,r,Gi(t)),v=D(is,1-tu.dM,D(Cm,l,D(Sf,c.bD,v))),v=A(Dm,l,v,c.bD);n=n,r=r,t=N(im,f,c.cT,v,N(im,s,c.c5,c.bD,t)),o=o,a=a,i=u}}),Nm=x(function(n,e){var r=n.cq,t=ti(e),n=t.fu,e=t.fv,t=t.cS;return{fu:r.ez*n+r.eA*e+r.eB*t,fv:r.eD*n+r.eE*e+r.eF*t,cS:r.eH*n+r.eI*e+r.eJ*t}}),Fm=s(function(n,e,r){var t=D(dm,Ia(n),Gi(n)),t=D(Sf,t,e),e=D(Os,t,ui(r)),t=D(Os,D(Nm,n,e),t),t=D(um,ui(r),t),n=Wi(n);return n.$?t:1/Oa(n.a)+t}),_m=t(function(n,e,r,t,o,a){var i=D(wm,r,e),c=D(wm,r,n),e=A(Fm,e,r,t),r=A(Fm,n,r,t),t=D(um,D(Lm,i,c),ui(t));return A(cm,Yi(o),o,-t/(r+e)/a)}),Vm=l(function(n,e,r,t){var o=D(wm,r,e),r=D(wm,r,n),e=(e=Wi(e)).$?0:1/Oa(e.a),e=1/(((n=Wi(n)).$?0:1/Oa(n.a))+e);return-.2*D(um,D(Lm,o,r),ui(t))*e}),qm=s(function(n,e,r){var t=n,o=r,a=.5*e,i=Yf(a),c=ls(a),u=t.fU,l=u.fu*c,f=i*l,n=l*l,r=u.fv*c,e=i*r,a=l*r,t=r*r,c=u.cS*c,i=i*c,l=l*c,r=r*c,c=c*c;return{fu:(1-2*(t+c))*o.fu+2*(a-i)*o.fv+2*(l+e)*o.cS,fv:2*(a+i)*o.fu+(1-2*(n+c))*o.fv+2*(r-f)*o.cS,cS:2*(l-e)*o.fu+2*(r+f)*o.fv+(1-2*(n+t))*o.cS}}),Em=x(function(n,e){return{fu:n*e.fu,fv:n*e.fv,cS:n*e.cS}}),Bm=a(function(n,e,r,t,o,a,i,c,u){for(;;){if(!a.b)return S(Am,n,e,r,t,c,u,i);var l,f,s,v,d,m,p,g,b=a.a,h=a.b,x=b.aT;u=x.$?(n=n,e=e,r=r,t=t,o=o,a=h,i=i,c=D(jr,b,c),u):(l=x.a.ar,g=x.a.cA,f=x.a.cY,m=D(Rv,r,A(qm,D(Av,b.ao,tu.a7),b.S,tu.dL)),s=D(is,tu.c6,b.cO),p=P(b.aB,0)?0:D(Mm,n,b.aB),d=D(um,ui(g),ui(m)),v=D(Go,g,Ji(D(Lm,D(Em,d,ui(g)),ui(m)))),x=D(Go,g,Ji(D(Os,ui(g),ui(v)))),d=D(cs,T(_m,t,f,l,x,p,o),D(Mm,n,b.aV)),m=N(Vm,t,f,l,v),g=D(cs,D(Mm,m,m),D(is,.25,D(Mm,d,d))),g=(p=D(vm,D(Mm,s,s),g))?1:D(us,s,ou(g)),n=n,e=e,r=r,t=t,o=o,a=h,i=D(jr,{cT:v,d8:f,bD:l,c5:x,cn:d,cM:m,cN:g},i),c=D(jr,b,c),u||p)}}),Rm=z(function(n,e,r,t,o,a,i,c){for(;;){if(!o.b)return L(Bm,n,e,r,a,c,i,h,h,!1);var u,l,f,s,v,d,m=o.a,p=o.b,g=D(mm,r,D(Av,m.ao,tu.a7)),b=D(ym,g,D(sm,function(n){return P(ha(n).M,cu)},e));c=b.$?(n=n,e=e,r=r,t=t,o=p,a=a,i=D(jr,M(m,{aT:tt,bn:tu.bo}),i),c):(u=b.a.cY,d=b.a.cA,s=b.a.ar,v=D(cs,tu.bo,tu.aL),f=Ia(u),l=D(Rv,f,d),b=D(dm,f,s),d=D(au,b,Oi(g)),D(vm,v,d)?(f=A(cm,tu.dr,tu.dm,D(Il,tu.aL,d)),s=Ha(D(Il,f,tu.bo)),v=D(um,ui(l),D(wm,b,t)),v=(g=-1<y(d=D(um,ui(l),ui(Vi(g))),-.1)?{a:0,b:10}:{a:-v/d,b:-1/d}).b,g=(d=g.a)<0?tu.c1:tu.c2,d=D(Mm,n,A(cm,0,tu.dl,D(Go,0,D(Wo,Oa,Wi(t)))*(tu.dS*s*v-g*d))),n=n,e=e,r=r,t=t,o=p,a=N(im,d,l,b,a),i=D(jr,M(m,{aT:rt({cY:u,cA:l,ar:b}),cO:d,bn:f}),i),c+1):(n=n,e=e,r=r,t=t,o=p,a=a,i=D(jr,M(m,{aT:tt,bn:tu.bo}),i),c))}}),Im=l(function(n,e,r,t){var o=e.az;if(r.b&&r.b.b&&r.b.b.b&&r.b.b.b.b&&!r.b.b.b.b.b){var a=r.a,i=r.b,c=i.a,u=i.b,l=u.b.a,r=e.aI.a6,i=r.cZ?4e3:0,e=4e3*r.a1,u=M(u.a,{aB:i,aV:e}),l=M(l,{aB:i,aV:e}),a=M(a,{aB:i,aV:e,S:20*r.S/180*3.141592653589793}),r=M(c,{aB:i,aV:e,S:20*r.S/180*3.141592653589793});return m(Rm,n,o,Ia(t),t,g([a,r,u,l]),t,h,0)}return t}),km=x(function(r,n){return M(n,{fD:A(lt,x(function(n,e){return D(jr,function(n){return M(r(n),{M:n.M})}(n),e)}),h,n.fD)})}),E=x(function(n,r){function t(n){var e=r.au;return 2!==e.$?r:M(r,{au:{$:2,a:M(e=e.a,{aI:n(e.aI)})}})}function e(e){return t(function(n){return M(n,{a6:e(n.a6)})})}function o(n){return M(r,{au:{$:2,a:n}})}var a,i,c,u={a:r.au,b:n};n:for(;;)switch(u.a.$){case 2:switch(u.b.$){case 1:break n;case 0:var l=u.b.a,f=(g=u.a.a).aI,s=-1<y(f.aP,Zc),v=g.bQ+l,d=f.a6,m=D(Go,A(uu,0,0,0),D(Wo,_i,ka(D(iu,D(Fo,ha,D(Fo,function(n){return n.M},Fi)),ba(g.az))))),p=function(n){var e=n.ar;return!s&&0<y(v-n.bp,eu)&&Ha(D(au,m,e))<2.5};return{a:o(M(g,{bQ:v,aI:M(f,{aP:(c=function(n){var e,e=(e=D(to,function(n){return n.b_?nu:Zc},D(iu,p,g.bi)),A(lt,et,0,e));return D(ol,Zc,e+n)}(f.aP),d.bj?D(zt,0,c-.5):c)}),bi:D(to,function(n){return D(Iv,v,n)&&p(n)?M(n,{bp:v}):n},g.bi),az:D(om,l/1e3,D(km,function(n){var e=ha(n).M;if(e.$)return n;e=e.a;return(d.bj&&0<f.aP?A(Qc,3e4,D(Rv,Ia(n),tu.cm),_i(n)):Er)(N(Im,.001*l,g,e,n))},g.az))})),b:Lv};case 2:switch(u.b.a.$){case 0:var g;return{a:o(M(g=u.a.a,{az:D(km,function(n){return ha(n).M.$?n:N(Qc,4e5,A(Fo,Ia,Pi,n),_i(n),n)},g.az)})),b:Lv};case 1:return{a:e(function(n){return M(n,{bj:!0})}),b:Lv};case 2:var b=u.b.a.a;return{a:e(function(n){return M(n,{S:b})}),b:Lv};case 3:b=u.b.a.a;return{a:e(function(n){return M(n,{a1:b})}),b:Lv};default:return{a:t(function(n){return M(n,{bN:n.bN?0:1})}),b:Lv}}case 3:switch(u.b.a.$){case 0:return{a:r,b:Lv};case 1:return{a:e(function(n){return M(n,{bj:!1})}),b:Lv};case 2:b=u.b.a.a;return{a:e(function(n){return M(n,{S:P(b,n.S)?0:n.S})}),b:Lv};case 3:b=u.b.a.a;return{a:e(function(n){return M(n,{a1:P(b,n.a1)?0:n.a1})}),b:Lv};default:return{a:r,b:Lv}}default:return{a:r,b:Lv}}case 0:switch(u.b.$){case 1:break n;case 4:if(u.b.a.$){var h=u.b.a.a;return{a:M(r,{au:{$:1,a:function(){if(h.$){var n=h.b;return"Image not powers of 2: "+it(h.a)+(" "+it(n))}return"Load error"}()}}),b:Lv}}return{a:M(r,{au:{$:2,a:{bQ:0,aI:{aP:Xc,a6:{cZ:!1,bj:!1,a1:0,S:0},bN:0},bi:af,az:(a=D(Wc,(i=void 0,i=Ra({d3:a=u.b.a.a,fb:{$:0,a:.25}}),a=x(function(n,e){return A(uu,n,e,0)}),Ou({aE:F(Zl,i,D(a,-90,-90),D(a,-90,90),D(a,90,90),D(a,90,-90)),M:cu})),Tv),A(lt,Wc,a,Bv))}}}),b:Lv};default:return{a:r,b:Lv}}default:if(1===u.b.$)break n;return{a:r,b:Lv}}n=u.b;return{a:M(r,{cK:{l:n.b,k:n.a}}),b:Lv}}),Hm=On("div"),jm=On("p"),Um=Jn,Wm=Wn,Om=W,Gm=x(function(n,e){var r=n.d$,n=n.d_;return D(Om,e.fu*r.fu+e.fv*r.fv+e.cS*r.cS,e.fu*n.fu+e.fv*n.fv+e.cS*n.cS)}),Ym=function(n){return{$:0,a:n}},Jm={$:3},Km=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),Qm=x(function(n,e){return ja(D(to,n,e))}),Xm=function(n){return{$:1,a:n}},Zm=Y,np=function(n){return{$:2,a:n}},ep=an,rp=s(function(n,e,r){return A(Ze,n,e,r)}),tp=N(Cl,1,1,1,1),op=s(function(n,e,r){return D(to,function(n){return D(n,e,r)},n)}),ap=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),ip=x(function(n,e){var r=e.fu,e=e.fv;return A(ap,n*r/e,n,n*(1-r-e)/e)}),cp=x(function(n,e){return r=D(ip,n,e),A(bl,3.2406*(n=r.a)-1.5372*(e=r.b)-.4986*(r=r.c),-.9689*n+1.8758*e+.0415*r,.0557*n-.204*e+1.057*r);var r}),up=r(function(n,e,r,t,o){return T(o,n,N(Cl,t.cJ,t.cJ,t.cJ,t.eq?1:-1),function(n){return pl({ez:n.s,eA:n.v,eB:n.y,eC:n.N,eD:n.t,eE:n.w,eF:n.z,eG:n.O,eH:n.u,eI:n.x,eJ:n.A,eK:n.P,eL:0,eM:0,eN:0,eO:1})}(t),t.eq,e,r)}),lp=t(function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=D(Ts,o.a,t),o=i,a=a;continue n;case 1:return{W:D(jr,F(up,n,e,r,t,o.b),a.W),ag:a.ag,ah:a.ah};case 3:i=D(jr,F(up,n,e,r,t,o.b),a.ag);return{W:a.W,ag:i,ah:a.ah};case 2:var c=D(jr,F(up,n,e,r,t,o.a),a.ah);return{W:a.W,ag:a.ag,ah:c};default:c=o.a;return A(lt,N(lp,n,e,r,t),a,c)}}),fp=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),sp=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Y=x(function(n,e){return{$:6,a:n,b:e}}),vp=g([function(n){return N(sp,518,n.am,n.aj,n.ai)}({ai:1,aj:0,am:!1}),N(fp,!1,!1,!1,!1),D(Y,0,1)]),dp={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},mp=u({ec:1,em:0,eY:5})(g([{cF:D(Al,-1,-1)},{cF:D(Al,1,-1)},{cF:D(Al,-1,1)},{cF:D(Al,1,1)}])),pp={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cF"},uniforms:{}},gp=nc({bK:7681,dh:0,dI:8,b0:519,dZ:15,b9:7681,ca:7681}),bp=s(function(n,e,r){return ja(g([A(op,n,r,vp),g([ec(e),gp])]))}),hp=x(function(n,e){return ja(D(dt,bp(n),e))}),Y=function(n){return N(sp,513,n.am,n.aj,n.ai)}({ai:1,aj:0,am:!0}),xp=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),u=x(function(n,e){return A(xp,32774,n,e)}),Sp=(W={cb:0,a5:D(u,1,771),ce:0,ch:D(u,770,771),co:0,cH:0},zc=W.cH,Dc=W.co,Ac=W.ce,Nc=W.cb,u=W.ch,W=W.a5,D(x(function(n,e){var r=n.c,t=e.a,o=e.b,e=e.c;return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:0,a:l,b:u,c:c,d:i,e:a,f:o,g:t,h:r,i:e,j:n}}}}}}}}}}}(n.a)(n.b)(r)(t)(o)(e)(zc)(Dc)(Ac)(Nc)}),u,W)),Pp=g([Y,Sp]),yp=x(function(n,e){var r=n.d0,t=n.d$,n=n.d_;return{fu:e.fu*n.fu+e.fv*n.fv+e.cS*n.cS,fv:e.fu*t.fu+e.fv*t.fv+e.cS*t.cS,cS:e.fu*r.fu+e.fv*r.fv+e.cS*r.cS}}),Mp=x(function(n,e){var r=n.dv,t=e.fu-r.fu,o=e.fv-r.fv,a=e.cS-r.cS,e=n.d0,r=n.d$,n=n.d_;return{fu:t*n.fu+o*n.fv+a*n.cS,fv:t*r.fu+o*r.fv+a*r.cS,cS:t*e.fu+o*e.fv+a*e.cS}}),Cp=x(function(n,e){return{dv:D(Mp,n,bi(e)),d_:D(yp,n,xi(e)),d$:D(yp,n,Si(e)),d0:D(yp,n,Pi(e))}}),Tp=x(function(n,e){e=Ci(e),n=Ci(n);return{eR:D(ps,n.eR,e.eR),eS:D(ps,n.eS,e.eS),eT:D(ps,n.eT,e.eT),eU:D(gs,n.eU,e.eU),eV:D(gs,n.eV,e.eV),eW:D(gs,n.eW,e.eW)}}),Lp=x(function(n,e){var r=tc(Ua(n.b)),t=tc(Ua(n.a)),o=tc(Ua(n.c)),a=function(n){return{a:n.fu,b:n.fv,c:n.cS}}(e),n=a.a,e=a.b,a=a.c;return{eR:D(cs,t,n),eS:D(cs,r,e),eT:D(cs,o,a),eU:D(Il,t,n),eV:D(Il,r,e),eW:D(Il,o,a)}}),wp=l(function(n,e,r,t){var o=r.fL,a=2*r.f8*e,i=2*r.f7*e,c=2*r.f6*e,u=ga(Pi(n)),l=xa(c*u.fu)+xa(i*u.fv)+xa(a*u.cS),r=ga(Si(n)),u=xa(c*r.fu)+xa(i*r.fv)+xa(a*r.cS),r=ga(xi(n)),r=xa(c*r.fu)+xa(i*r.fv)+xa(a*r.cS),e=D(Lp,{a:r,b:u,c:l},D(Mp,n,A(uu,o.fu*e,o.fv*e,o.cS*e)));return rt(t.$?e:D(Tp,t.a,e))}),$p=l(function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=u=e,r=l=r,t=a;continue n;case 1:var i=N(wp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 2:n=c=n,e=u=e,r=l=r,t=a;continue n;case 3:i=N(wp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 4:var c=n,u=e,l=N($p,n,e,r,o.a);n=c,e=u,r=l,t=a;continue n;default:var f=o.a,s=o.b,v=D(Cp,function(n){return{dv:{fu:n.N,fv:n.O,cS:n.P},d_:{fu:n.s,fv:n.t,cS:n.u},d$:{fu:n.v,fv:n.w,cS:n.x},d0:{fu:n.y,fv:n.z,cS:n.A}}}(f),n),f=e*f.cJ;n=c=n,e=u=e,r=l=N($p,v,f,r,g([s])),t=a;continue n}}}),zp={eq:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,N:0,O:0,P:0,cJ:1},Dp=nc({bK:7681,dh:0,dI:8,b0:519,dZ:255,b9:7681,ca:7681}),Ap={ce:0,fK:!1,co:0,dE:0,cH:0,dU:0,fu:0,fv:0,cS:0},Np=x(function(n,e){return pl({ez:n.fu,eA:n.cH,eB:e.fu,eC:e.cH,eD:n.fv,eE:n.co,eF:e.fv,eG:e.co,eH:n.cS,eI:n.ce,eJ:e.cS,eK:e.ce,eL:n.dU,eM:n.dE,eN:e.dU,eO:e.dE})}),Fp={a:{bS:D(Np,Ap,Ap),cu:D(Np,Ap,Ap),cv:D(Np,Ap,Ap),cw:D(Np,Ap,Ap)},b:N(Cl,0,0,0,0)},_p=g([oc({ai:1,aj:0,am:!0}),Zi({bK:7680,dh:240,dI:0,b0:514,dZ:0,b9:7680,ca:7680}),Sp]),Vp=x(function(n,e){var r=e.fA,t=Ua(e.gk),o=Ua(e.f1),e=n.dG;if(e.$){n=e.a;return pf(o)?pl({ez:2/(r*n),eA:0,eB:0,eC:0,eD:0,eE:2/n,eF:0,eG:0,eH:0,eI:0,eJ:0,eK:-1,eL:0,eM:0,eN:0,eO:1}):pl({ez:2/(r*n),eA:0,eB:0,eC:0,eD:0,eE:2/n,eF:0,eG:0,eH:0,eI:0,eJ:-2/(o-t),eK:-(o+t)/(o-t),eL:0,eM:0,eN:0,eO:1})}e=e.a;return pf(o)?pl({ez:1/(r*e),eA:0,eB:0,eC:0,eD:0,eE:1/e,eF:0,eG:0,eH:0,eI:0,eJ:-1,eK:-2*t,eL:0,eM:0,eN:-1,eO:0}):pl({ez:1/(r*e),eA:0,eB:0,eC:0,eD:0,eE:1/e,eF:0,eG:0,eH:0,eI:0,eJ:-(o+t)/(o-t),eK:-2*o*t/(o-t),eL:0,eM:0,eN:-1,eO:0})}),qp=x(function(n,e){return 1==(1&n>>e)?0:1}),Ep=s(function(r,t,n){return ja(D(to,function(n){var e=n<<4,n=N(Cl,D(qp,n,0),D(qp,n,1),D(qp,n,2),D(qp,n,3));return A(op,r,{a:t,b:n},function(n){return g([oc({ai:1,aj:0,am:!0}),Zi({bK:7680,dh:240,dI:n,b0:514,dZ:0,b9:7680,ca:7680}),Sp])}(e))},D(vt,1,D(rf,2,n)-1)))}),Bp=function(n){return{ez:n[0],eD:n[1],eH:n[2],eL:n[3],eA:n[4],eE:n[5],eI:n[6],eM:n[7],eB:n[8],eF:n[9],eJ:n[10],eN:n[11],eC:n[12],eG:n[13],eK:n[14],eO:n[15]}},Rp=x(function(n,e){var r,t;return r=D(Cp,e,n),t=_a(bi(r)),e=ga(Pi(r)),n=ga(Si(r)),r=ga(xi(r)),pl({ez:r.fu,eA:n.fu,eB:e.fu,eC:t.fu,eD:r.fv,eE:n.fv,eF:e.fv,eG:t.fv,eH:r.cS,eI:n.cS,eJ:e.cS,eK:t.cS,eL:0,eM:0,eN:0,eO:1})}),Ip=s(function(n,e,r){return{fu:n,fv:e,cS:r}}),kp=x(function(e,n){var r=g([Xm(1),np(0),Ym(!0),N(Km,0,0,0,0)]),t=function(){var n=e.fy;switch(n.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:D(jr,Jm,r),b:"1",c:1};default:return{a:r,b:"0",c:n.a}}}(),o=t.a,a=t.b,i=t.c,c=e.fT,u=c.a,l=Xi(c.b),f=D(Um,"height",it(l)+"px"),t=Xi(u),s=t/l,c=D(Qm,function(n){return cc({fA:s,fJ:e.fJ,fN:e.fN,fZ:n.fZ,f$:n.f$,gg:n.gg,fi:i,gC:n.gC,gL:n.gL})},n),u=D(Um,"width",it(t)+"px"),n=Qi(e.fC);return A(Ki,"div",g([D(Um,"padding","0px"),u,f]),g([{a:a,b:A(rp,o,g([(t=Zm(t*i),D(Kn,"width",it(t))),function(n){return D(Kn,"height",it(n))}(Zm(l*i)),u,f,D(Um,"display","block"),D(Um,"background-color",n)]),c)}]))}),Hp={fu:.31271,fv:.32902},jp=x(function(n,e){var r=n,t=ga(e.fU),o=t.fu,n=t.fv,t=t.cS,e=D(cp,e.ep,e.d6);return{ce:Ml(e),fK:r,co:yl(e),dE:0,cH:Pl(e),dU:1,fu:-o,fv:-n,cS:-t}}),Up=x(function(n,e){var r=n.d$,t=e.fu*r.fu+e.fv*r.fv+e.cS*r.cS,o=n.d_,n=e.fu*o.fu+e.fv*o.fv+e.cS*o.cS;return D(Om,e.fu*(o.fv*r.cS-o.cS*r.fv)+e.fv*(o.cS*r.fu-o.fu*r.cS)+e.cS*(o.fu*r.fv-o.fv*r.fu),ou(n*n+t*t))}),Wp=x(function(n,e){var r=e.cS-n.cS,t=e.fv-n.fv,e=e.fu-n.fu,n=D(zt,xa(e),D(zt,xa(t),xa(r)));if(n){r=r/n,t=t/n,e=e/n,n=ou(e*e+t*t+r*r);return rt({fu:e/n,fv:t/n,cS:r/n})}return tt}),Op=x(function(n,e){return D(mv,n,e)}),Gp=x(function(n,e){return 0<y(e,n)}),Yp=Ua,Jp={$:1},Kp={$:0},Qp=x(function(n,e){return{fu:n.fv*e.cS-n.cS*e.fv,fv:n.cS*e.fu-n.fu*e.cS,cS:n.fu*e.fv-n.fv*e.fu}}),Xp=s(function(n,e,r){return{dv:A(wv,n,e,bi(r)),d_:A(qm,n,e,xi(r)),d$:A(qm,n,e,Si(r)),d0:A(qm,n,e,Pi(r))}}),Zp=s(function(n,e,r){return A(Xp,n(r),e,r)}),ng=s(function(n,e,r){return D(Mv,D(Cv,e,n),r)}),eg=s(function(n,e,r){return A(ng,Vi(n(r)),e,r)}),rg=U,tg=s(function(n,e,r){return{m:D(Av,n,e),ac:Ua(r.ac),aL:Ua(r.aL)}}),U=x(function(n,e){return e/n}),og=x(function(n,e){var r=n.cF;return D(jr,{cA:oi(n.cA),cF:ri(r)},e)}),ag=x(function(n,e){var r=n.d$,n=n.d_;return{fu:e.fu*n.fu+e.fv*r.fu,fv:e.fu*n.fv+e.fv*r.fv,cS:e.fu*n.cS+e.fv*r.cS}}),ig=Er({dv:ff,d_:ru,d$:Cn}),cg=(Fc=D(U,72,6.283185307179586),_c=ui(xr),Vc=ui(he),qc=D(is,.5,1),Ec=A(Rl,0,0,qc),Bc=D(is,-.5,1),Rc=A(Rl,0,0,Bc),he=D(to,function(n){var e=D(is,n,Fc),r=ui(D(ag,ig,xc(e))),t=D(is,Xa(e),1),o=D(is,ei(e),1),a=A(Rl,t,o,qc),i=A(Rl,t,o,Bc),e=D(Ps,72,n+1),t=D(is,e,Fc),o=ui(D(ag,ig,xc(t))),n=D(is,Xa(t),1),e=D(is,ei(t),1),t=A(Rl,n,e,Bc),e=A(Rl,n,e,qc);return g([{a:{cA:Vc,cF:Rc},b:{cA:Vc,cF:t},c:{cA:Vc,cF:i}},{a:{cA:r,cF:i},b:{cA:o,cF:t},c:{cA:o,cF:e}},{a:{cA:r,cF:i},b:{cA:o,cF:e},c:{cA:r,cF:a}},{a:{cA:_c,cF:Ec},b:{cA:_c,cF:a},c:{cA:_c,cF:e}}])},D(vt,0,71)),he=Ai(ja(he)),Pr(function(n){var e=A(Gr,og,h,ci(n));if(e.b){var r=e.a,t=e.b,e=D(jl,e,ai(n)),t=D(hs,r,t);return N(Qf,t,n,e,0)}return ss}(he))),ug=Dr(cg),lg=l(function(n,e,r,t){var o=function(n){var e=Vi(n),r=Sc(e);return{dv:Oi(n),d_:r.a,d$:r.b,d0:e}}(function(n){return n.m}(t)),r=D(kf,r,cg),r=(e={a:n,b:e}).a?e.b?$a(g([r,Ni(ug)])):r:e.b?Ni(ug):Yu,e=function(n){return n.aL}(t),t=function(n){return n.ac}(t);return D(mv,o,D(Gf,{a:e,b:e,c:t},r))}),fg=x(function(n,e){return N(lg,!0,!1,n,e)}),sg=x(function(n,e){n=D(cp,1,n);return A(zs,0,{$:0,a:n},e)}),vg=x(function(n,e){return N($s,!0,!1,n,e)}),dg=x(function(n,e){var r,t=e.ar,o=e.b_,a=A(tg,t,_s,{ac:.3,aL:.75}),i=D(sg,(r=A(vf,255,127,0),i=hc(r),{fu:(e=i.a)/(i=e+(r=i.b)+i.c),fv:r/i}),5e3),i=n?i:Ns(df),n={a:o,b:n};if(n.a||!n.b)return D(fg,i,a);t=D(yv,A(_v,0,0,1.5),t);return Pv(g([D(fg,i,a),D(vg,i,D(lf,t,.6))]))}),mg=x(function(n,e){return{dv:n,d_:xi(e),d$:Si(e),d0:Pi(e)}}),Dr=x(function(n,e){return N(lg,!0,!0,n,e)}),Cn=A(tg,ff,Cn,{ac:.3,aL:tu.aL}),pg=D(Dr,Ns(df),Cn),gg=x(function(o,n){return D(to,function(n){var e=Ia(o),r=D(dm,e,n.ao),t=D(Rv,e,tu.a7),r=D(yv,D(Cv,n.bn,t),r),e=A(Xp,D(Av,r,t),n.S,D(mg,r,e));return D(Op,e,pg)},n)}),bg=x(function(n,e){var r=n.dv,n=n.gn;return(e.fu-r.fu)*n.fu+(e.fv-r.fv)*n.fv+(e.cS-r.cS)*n.cS}),hg=function(n){var e=A(ef,1667,25e3,n),n=4e3<e?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:1e9*-.2661239/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{fu:n,fv:2222<e?4e3<e?n*n*n*3.081758-n*n*5.8733867+3.75112997*n-.37001483:n*n*n*-.9549476-n*n*1.37418593+2.09137015*n-.16748867:n*n*n*-1.1063814-n*n*1.3481102+2.18555832*n-.20219683}}(5600),Cn=l(function(n,e,r,t){return N(sf,n,e,r,t)}),xg=N(Cn,0,0,0,0),Sg=x(function(n,e){return{$:2,a:n,b:e}}),Pg={$:0,a:Fp.a},yg=z(function(n,e,r,t,o,a,i,c){var u=D(fm,yc,g([Pc(n),Pc(e),Pc(r),Pc(t)])),l=u.a;if(l.b){var f=d(l,u.b);if(f.b&&f.b.b&&f.b.b.b&&f.b.b.b.b&&!f.b.b.b.b.b){var s=f.a,v=f.b,u=v.a,f=v.b,v=f.a,f=f.b.a;return D(Sg,D(to,Mc,l),{bS:D(Np,s,u),cu:D(Np,v,f),cv:D(Np,o,a),cw:D(Np,i,c)})}return Pg}return{$:0,a:{bS:D(Np,n,e),cu:D(Np,r,t),cv:D(Np,o,a),cw:D(Np,i,c)}}}),Mg=x(function(n,e){return m(yg,n,e,Ap,Ap,Ap,Ap,Ap,Ap)}),Cg=x(function(n,e){return{gn:e,dv:n}}),Tg=x(function(n,e){var t,o,a,r=n.k,i=n.l,c=e.az,u=e.aI,l=e.bi,f=e.bQ,s=D(jp,!0,{d6:hg,fU:D(xs,.7853981633974483,-1.0471975511965976),ep:1e4}),n=gc({d6:Hp,ep:15e3,gD:_s}),v=ka(D(iu,D(Fo,ha,D(Fo,function(n){return n.M},Fi)),ba(c))),d=(t=D(Fo,Ia,bi),o=A(uu,0,0,0),a=ka(D(iu,D(Fo,ha,D(Fo,function(n){return n.M},lc)),ba(c))),e=function(){var n={a:u.bN,b:a,c:v};n:for(;;){if(n.a){if(n.b.$||n.c.$)break n;return{bB:D(Gm,ig,hi(D(Go,ru,Ji((r=n.c.a).cQ)))),bG:30,bI:.05235987755982988,bM:D(yv,A(_v,0,0,4),t(r))}}if(n.b.$||n.c.$)break n;var e=n.b.a,r=n.c.a;return{bB:D(Go,3.141592653589793,D(Wo,Gm(ig),D(Wp,t(e),t(r)))),bG:D(cs,30,D(au,t(e),t(r))),bI:D(Up,ig,D(Go,ru,D(Wp,D(yv,A(_v,0,0,-3),t(e)),D(yv,A(_v,0,30,0),t(r))))),bM:t(e)}}return{bB:3.141592653589793,bG:30,bI:3.141592653589793,bM:o}}(),bc({gG:.41887902047863906,gI:mc({bB:e.bB,bG:e.bG,bI:e.bI,bM:e.bM,f5:ig})})),l=ja(g([D(to,uc,D(iu,function(n){if(2!==ha(n).M.$)return!0;var e,n=(e=Ia(n),D(Cg,e.dv,e.d0)),e=rc(ic(d));return D(Gp,0,D(bg,n,e))},ba(c))),(c={a:v,b:D(Wo,D(Fo,ha,function(n){return n.M}),v)}).a.$||c.b.$||c.b.a.$?h:D(gg,c.a.a,c.b.a.a),D(to,function(n){return D(dg,D(Iv,f,n),n)},l)]));return g([(n={fy:Jp,fC:xg,fJ:d,fN:.1,fT:{a:wt(r),b:wt(i)},fZ:l,f$:Yp(1e4),gg:D(Mg,s,n),gC:Kp,gL:Hp},D(kp,{fy:n.fy,fC:n.fC,fJ:n.fJ,fN:n.fN,fT:n.fT},g([{fZ:n.fZ,f$:n.f$,gg:n.gg,gC:n.gC,gL:n.gL}]))),D(Hm,g([D(Um,"position","fixed"),D(Um,"bottom","12px"),D(Um,"left","24px"),D(Um,"padding","0 12px"),D(Um,"border-radius","4px"),D(Um,"background-color","rgba(255,255,255, 0.5)")]),g([D(jm,h,g([Wm("Drive - Arrow keys")])),D(jm,h,g([Wm("Boost - Shift")])),D(jm,h,g([Wm("Toggle Camera - C")])),D(jm,h,g([Wm("Jump (buggy) - Spacebar")]))])),D(Hm,g([D(Um,"position","fixed"),D(Um,"bottom","12px"),D(Um,"right","24px"),D(Um,"text-align","right"),D(Um,"padding","6px 12px"),D(Um,"border-radius","4px"),D(Um,"background-color","rgba(255,255,255, 0.5)")]),g([D(jm,g([D(Um,"font-size","48px"),D(Um,"margin","0")]),g([Wm(it(Zm(u.aP)))])),D(jm,g([D(Um,"margin","0")]),g([Wm("BOOST")]))]))])}),E=Vn({gc:function(){return{a:{cK:{l:0,k:0},au:ho},b:Mo(g([D(yo,lo,D(zo,Do,"static/rl-map.png")),D(bo,function(n){n=n.gJ;return D(xo,n.k,n.l)},Co)]))}},gz:function(){return Ao(g([(n=x(function(n,e){return D(xo,n,e)}),A(kc,1,"resize",D(jo,"target",A(Bt,n,D(jo,"innerWidth",Uc),D(jo,"innerHeight",Uc))))),oa(vo),Hc(po(fo)),jc(po(so))]));var n},gE:E,gH:function(e){return D(Hm,g([D(Um,"position","absolute"),D(Um,"left","0"),D(Um,"top","0")]),function(){var n=e.au;switch(n.$){case 0:return g([D(jm,h,g([Wm("Loading........")]))]);case 2:return D(Tg,e.cK,n.a);default:return g([D(jm,h,g([Wm("Error: "+n.a)]))])}}())}});E={Main:{init:E(Rt(0))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?B(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,E):n.Elm=E}(this);