!function(n){"use strict";function e(n,e,r){return r.a=n,r.f=e,r}function h(r){return e(2,r,function(e){return function(n){return r(e,n)}})}function s(t){return e(3,t,function(r){return function(e){return function(n){return t(r,e,n)}}})}function l(o){return e(4,o,function(t){return function(r){return function(e){return function(n){return o(t,r,e,n)}}}})}function r(a){return e(5,a,function(o){return function(t){return function(r){return function(e){return function(n){return a(o,t,r,e,n)}}}}})}function t(i){return e(6,i,function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return i(a,o,t,r,e,n)}}}}}})}function o(c){return e(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return c(i,a,o,t,r,e,n)}}}}}}})}function $(u){return e(8,u,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return u(c,i,a,o,t,r,e,n)}}}}}}}})}function a(l){return e(9,l,function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return l(u,c,i,a,o,t,r,e,n)}}}}}}}}})}function z(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function N(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function D(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function _(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function C(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function S(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,u){return 8===n.a?n.f(e,r,t,o,a,i,c,u):n(e)(r)(t)(o)(a)(i)(c)(u)}function T(n,e,r,t,o,a,i,c,u,l){return 9===n.a?n.f(e,r,t,o,a,i,c,u,l):n(e)(r)(t)(o)(a)(i)(c)(u)(l)}function M(n,e){for(var r,t=[],o=i(n,e,0,t);o&&(r=t.pop());o=i(r.a,r.b,0,t));return o}function i(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&k(5),!1;if(100<r)return t.push({a:n,b:e}),!0;for(var o in n.$<0&&(n=Or(n),e=Or(e)),n)if(!i(n[o],e[o],r+1,t))return!1;return!0}var c=h(M);function x(n,e,r){if("object"!=typeof n)return n===e?0:n<e?-1:1;if(void 0===n.$)return(r=x(n.a,e.a))||(r=x(n.b,e.b))?r:x(n.c,e.c);for(;n.b&&e.b&&!(r=x(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}h(function(n,e){return!M(n,e)}),h(function(n,e){return x(n,e)<0}),h(function(n,e){return x(n,e)<1}),h(function(n,e){return 0<x(n,e)}),h(function(n,e){return 0<=x(n,e)});var u=h(function(n,e){e=x(n,e);return e<0?Ir:e?Yr:Gr}),f=0;function P(n,e){var r,t={};for(r in n)t[r]=n[r];for(r in e)t[r]=e[r];return t}function b(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r={$:1,a:n.a,b:e};n=n.b;for(var t=r;n.b;n=n.b)t=t.b={$:1,a:n.a,b:e};return r}h(b);var R={$:0};function d(n,e){return{$:1,a:n,b:e}}var v=h(d);function y(n){for(var e=R,r=n.length;r--;)e={$:1,a:n[r],b:e};return e}function p(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var g=s(function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(z(n,e.a,r.a));return y(t)}),w=(l(function(n,e,r,t){for(var o=[];e.b&&r.b&&t.b;e=e.b,r=r.b,t=t.b)o.push(N(n,e.a,r.a,t.a));return y(o)}),r(function(n,e,r,t,o){for(var a=[];e.b&&r.b&&t.b&&o.b;e=e.b,r=r.b,t=t.b,o=o.b)a.push(D(n,e.a,r.a,t.a,o.a));return y(a)}),t(function(n,e,r,t,o,a){for(var i=[];e.b&&r.b&&t.b&&o.b&&a.b;e=e.b,r=r.b,t=t.b,o=o.b,a=a.b)i.push(_(n,e.a,r.a,t.a,o.a,a.a));return y(i)}),h(function(r,n){return y(p(n).sort(function(n,e){return x(r(n),r(e))}))}));h(function(r,n){return y(p(n).sort(function(n,e){e=z(r,n,e);return e===Gr?0:e===Ir?-1:1}))});var L=s(function(n,e,r){for(var t=Array(n),o=0;o<n;o++)t[o]=r(e+o);return t}),V=h(function(n,e){for(var r=Array(n),t=0;t<n&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,{a:r,b:e}}),A=h(function(n,e){return e[n]}),F=s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=r[a];return o[n]=e,o}),q=(h(function(n,e){for(var r=e.length,t=Array(r+1),o=0;o<r;o++)t[o]=e[o];return t[r]=n,t}),s(function(n,e,r){for(var t=r.length,o=0;o<t;o++)e=z(n,r[o],e);return e}),s(function(n,e,r){for(var t=r.length-1;0<=t;t--)e=z(n,r[t],e);return e})),B=h(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;o++)t[o]=n(e[o]);return t});function k(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=z(n,e+a,r[a]);return o}),s(function(n,e,r){return r.slice(n,e)}),s(function(n,e,r){var t=e.length,o=n-t;r.length<o&&(o=r.length);for(var a=Array(t+o),i=0;i<t;i++)a[i]=e[i];for(i=0;i<o;i++)a[i+t]=r[i];return a}),h(function(n,e){return e}),h(function(n,e){return console.log(n+": <internals>"),e});var E=h(function(n,e){return n+e}),W=(h(function(n,e){return n-e}),h(function(n,e){return n*e}),h(function(n,e){return n/e}),h(function(n,e){return n/e|0}),h(Math.pow)),U=(h(function(n,e){return e%n}),h(function(n,e){e%=n;return 0===n?k(11):0<e&&n<0||e<0&&0<n?e+n:e})),G=Math.cos,Y=Math.sin,I=Math.tan,j=h(Math.atan2),H=Math.ceil,O=Math.floor,Q=Math.round,X=Math.sqrt,Z=Math.log,J=isNaN;h(function(n,e){return n&&e}),h(function(n,e){return n||e}),h(function(n,e){return n!==e}),h(function(n,e){return n+e}),h(function(n,e){return n+e}),h(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;){var a=e.charCodeAt(o);a<55296||56319<a?(t[o]=n(e[o]),o++):(t[o]=n(e[o]+e[o+1]),o+=2)}return t.join("")}),h(function(n,e){for(var r=[],t=e.length,o=0;o<t;){var a=e[o],i=e.charCodeAt(o);o++,i<55296||56319<i||(a+=e[o],o++),n(a)&&r.push(a)}return r.join("")}),s(function(n,e,r){for(var t=r.length,o=0;o<t;){var a=r[o],i=r.charCodeAt(o);o++,i<55296||56319<i||(a+=r[o],o++),e=z(n,a,e)}return e}),s(function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);a<56320||57343<a||(o=r[--t]+o),e=z(n,o,e)}return e});var K=h(function(n,e){return e.split(n)}),nn=h(function(n,e){return e.join(n)}),en=s(function(n,e,r){return r.slice(n,e)});h(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),n(t))return!0}return!1});var rn=h(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),!n(t))return!1}return!0}),tn=h(function(n,e){return!!~e.indexOf(n)}),on=h(function(n,e){return 0==e.indexOf(n)}),an=(h(function(n,e){return n.length<=e.length&&e.lastIndexOf(n)==e.length-n.length}),h(function(n,e){var r=n.length;if(r<1)return R;for(var t=0,o=[];-1<(t=e.indexOf(n,t));)o.push(t),t+=r;return y(o)}));function cn(n){return n+""}var un={$:2,b:function(n){return"number"!=typeof n||(n<=-2147483647||2147483647<=n||(0|n)!==n)&&(!isFinite(n)||n%1)?Sn("an INT",n):rt(n)}},ln={$:2,b:function(n){return"boolean"==typeof n?rt(n):Sn("a BOOL",n)}},fn={$:2,b:function(n){return"string"==typeof n?rt(n):n instanceof String?rt(n+""):Sn("a STRING",n)}},sn=h(function(n,e){return{$:6,d:n,b:e}});h(function(n,e){return{$:7,e:n,b:e}});var dn=h(function(n,e){return{$:10,b:e,h:n}}),vn=h(function(n,e){return{$:9,f:n,g:[e]}}),mn=s(function(n,e,r){return{$:9,f:n,g:[e,r]}}),bn=(l(function(n,e,r,t){return{$:9,f:n,g:[e,r,t]}}),r(function(n,e,r,t,o){return{$:9,f:n,g:[e,r,t,o]}}),t(function(n,e,r,t,o,a){return{$:9,f:n,g:[e,r,t,o,a]}}),o(function(n,e,r,t,o,a,i){return{$:9,f:n,g:[e,r,t,o,a,i]}}),$(function(n,e,r,t,o,a,i,c){return{$:9,f:n,g:[e,r,t,o,a,i,c]}}),a(function(n,e,r,t,o,a,i,c,u){return{$:9,f:n,g:[e,r,t,o,a,i,c,u]}}),h(function(n,e){try{return pn(n,JSON.parse(e))}catch(n){return Jr(z(Kr,"This is not valid JSON! "+n.message,e))}}),h(pn));function pn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?rt(n.c):Sn("null",e);case 3:return hn(e)?gn(n.b,e,y):Sn("a LIST",e);case 4:return hn(e)?gn(n.b,e,xn):Sn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return Sn("an OBJECT with a field named `"+r+"`",e);var t=pn(n.b,e[r]);return Et(t)?t:Jr(z(nt,r,t.a));case 7:r=n.e;if(!hn(e))return Sn("an ARRAY",e);if(e.length<=r)return Sn("a LONGER array. Need index "+r+" but only see "+e.length+" entries",e);t=pn(n.b,e[r]);return Et(t)?t:Jr(z(et,r,t.a));case 8:if("object"!=typeof e||null===e||hn(e))return Sn("an OBJECT",e);var o,a=R;for(o in e)if(e.hasOwnProperty(o)){t=pn(n.b,e[o]);if(!Et(t))return Jr(z(nt,o,t.a));a={$:1,a:{a:o,b:t.a},b:a}}return rt(ht(a));case 9:for(var i=n.f,c=n.g,u=0;u<c.length;u++){t=pn(c[u],e);if(!Et(t))return t;i=i(t.a)}return rt(i);case 10:t=pn(n.b,e);return Et(t)?pn(n.h(t.a),e):t;case 11:for(var l=R,f=n.g;f.b;f=f.b){t=pn(f.a,e);if(Et(t))return t;l={$:1,a:t.a,b:l}}return Jr(tt(ht(l)));case 1:return Jr(z(Kr,n.a,e));case 0:return rt(n.a)}}function gn(n,e,r){for(var t=e.length,o=Array(t),a=0;a<t;a++){var i=pn(n,e[a]);if(!Et(i))return Jr(z(et,a,i.a));o[a]=i.a}return rt(r(o))}function hn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function xn(e){return z(kt,e.length,function(n){return e[n]})}function Sn(n,e){return Jr(z(Kr,"Expecting "+n,e))}function Mn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Mn(n.b,e.b);case 6:return n.d===e.d&&Mn(n.b,e.b);case 7:return n.e===e.e&&Mn(n.b,e.b);case 9:return n.f===e.f&&Pn(n.g,e.g);case 10:return n.h===e.h&&Mn(n.b,e.b);case 11:return Pn(n.g,e.g)}}function Pn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;t<r;t++)if(!Mn(n[t],e[t]))return!1;return!0}var Rn=h(function(n,e){return JSON.stringify(e,null,n)+""});function yn(n){return n}function Cn(n){return{$:0,a:n}}s(function(n,e,r){return r[n]=e,r});var Tn=h(function(n,e){return{$:3,b:n,d:e}}),wn=h(function(n,e){return{$:4,b:n,d:e}}),Ln=0;function $n(n){n={$:0,e:Ln++,f:n,g:null,h:[]};return An(n),n}function zn(e){return{$:2,b:function(n){n({$:0,a:$n(e)})},c:null}}function Nn(n,e){n.h.push(e),An(n)}var Dn=h(function(e,r){return{$:2,b:function(n){Nn(e,r),n({$:0,a:f})},c:null}}),_n=!1,Vn=[];function An(n){if(Vn.push(n),!_n){for(_n=!0;n=Vn.shift();)!function(e){for(;e.f;){var n=e.f.$;if(0===n||1===n){for(;e.g&&e.g.$!==n;)e.g=e.g.i;if(!e.g)return;e.f=e.g.b(e.f.a),e.g=e.g.i}else{if(2===n)return e.f.c=e.f.b(function(n){e.f=n,An(e)});if(5===n){if(0===e.h.length)return;e.f=e.f.b(e.h.shift())}else e.g={$:3===n?0:1,b:e.f.b,i:e.g},e.f=e.f.d}}}(n);_n=!1}}function Fn(n,e,r,t,o,a){e=z(bn,n,e?e.flags:void 0);Et(e)||k(2);var i={},e=r(e.a),c=e.a,u=a(l,c),a=function(n,e){var r,t;for(t in qn){var o=qn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=function(n,e){var t={g:e,h:void 0},o=n.c,a=n.d,i=n.e,c=n.f;return t.h=$n(z(Tn,function n(r){return z(Tn,n,{$:5,b:function(n){var e=n.a;return 0===n.$?N(a,t,e,r):i&&c?D(o,t,e.i,e.j,r):N(o,t,i?e.i:e.j,r)}})},n.b))}(o,e)}return r}(i,l);function l(n,e){n=z(t,n,c);u(c=n.a,e),In(i,n.b,o(c))}return In(i,e.b,o(c)),a?{ports:a}:{}}l(function(n,e,r,t){return Fn(e,t,n.gt,n.gV,n.gS,function(){return function(){}})});var qn={},Bn=h(function(e,r){return{$:2,b:function(n){e.g(r),n({$:0,a:f})},c:null}}),kn=h(function(n,e){return z(Dn,n.h,{$:0,a:e})});function En(e){return function(n){return{$:1,k:e,l:n}}}function Wn(n){return{$:2,m:n}}h(function(n,e){return{$:3,n:n,o:e}});var Un,Gn=[],Yn=!1;function In(n,e,r){if(Gn.push({p:n,q:e,r:r}),!Yn){Yn=!0;for(var o;o=Gn.shift();)!function(n,e){var r,t={};for(r in jn(!0,o.q,t,null),jn(!1,e,t,null),n)Nn(n[r],{$:"fx",a:t[r]||{i:R,j:R}})}(o.p,o.r);Yn=!1}}function jn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return z(n?qn[e].e:qn[e].f,function(n){for(var e=r;e;e=e.t)n=e.s(n);return n},t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:R,j:R},n?r.i={$:1,a:e,b:r.i}:r.j={$:1,a:e,b:r.j},r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)jn(n,i.a,r,t);return;case 3:return void jn(n,e.o,r,{s:e.n,t:t})}}h(function(n,e){return e}),h(function(e,r){return function(n){return e(r(n))}});var Hn="undefined"!=typeof document?document:{};function On(n){return{$:0,a:n}}l(function(n,e,r,t){t=t.node;return t.parentNode.replaceChild(ie(n,function(){}),t),{}});var Qn=h(function(a,i){return h(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:oe(n),e:r,f:a,b:t}})})(void 0),Xn=h(function(a,i){return h(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:oe(n),e:r,f:a,b:t}})})(void 0);h(function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}}),h(function(n,e){return{$:5,l:[n,e],m:function(){return n(e)},k:void 0}}),s(function(n,e,r){return{$:5,l:[n,e,r],m:function(){return z(n,e,r)},k:void 0}}),l(function(n,e,r,t){return{$:5,l:[n,e,r,t],m:function(){return N(n,e,r,t)},k:void 0}}),r(function(n,e,r,t,o){return{$:5,l:[n,e,r,t,o],m:function(){return D(n,e,r,t,o)},k:void 0}}),t(function(n,e,r,t,o,a){return{$:5,l:[n,e,r,t,o,a],m:function(){return _(n,e,r,t,o,a)},k:void 0}}),o(function(n,e,r,t,o,a,i){return{$:5,l:[n,e,r,t,o,a,i],m:function(){return C(n,e,r,t,o,a,i)},k:void 0}}),$(function(n,e,r,t,o,a,i,c){return{$:5,l:[n,e,r,t,o,a,i,c],m:function(){return S(n,e,r,t,o,a,i,c)},k:void 0}}),a(function(n,e,r,t,o,a,i,c,u){return{$:5,l:[n,e,r,t,o,a,i,c,u],m:function(){return m(n,e,r,t,o,a,i,c,u)},k:void 0}});var Zn=h(function(n,e){return{$:"a0",n:n,o:e}}),Jn=h(function(n,e){return{$:"a1",n:n,o:e}}),Kn=h(function(n,e){return{$:"a2",n:n,o:e}}),ne=h(function(n,e){return{$:"a3",n:n,o:e}});s(function(n,e,r){return{$:"a4",n:e,o:{f:n,o:r}}}),h(function(n,e){return"a0"===e.$?z(Zn,e.n,function(n,e){var r=Yt(e);return{$:e.$,a:r?N(Ut,r<3?re:te,Gt(n),e.a):z(Wt,n,e.a)}}(n,e.o)):e});var ee,re=h(function(n,e){return{a:n(e.a),b:e.b}}),te=h(function(n,e){return{aJ:n(e.aJ),d_:e.d_,dO:e.dO}});function oe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;"a2"!==t?(r=e[t]||(e[t]={}),"a3"===t&&"class"===o?ae(r,o,a):r[o]=a):"className"===o?ae(e,o,a):e[o]=a}return e}function ae(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function ie(n,e){var r=n.$;if(5===r)return ie(n.k||(n.k=n.m()),e);if(0===r)return Hn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=ie(t,a)).elm_event_node_ref=a,i}if(3===r)return ce(i=n.h(n.g),e,n.d),i;var i=n.f?Hn.createElementNS(n.f,n.c):Hn.createElement(n.c);Un&&"a"==n.c&&i.addEventListener("click",Un(i)),ce(i,e,n.d);for(var c=n.e,u=0;u<c.length;u++)i.appendChild(ie(1===r?c[u]:c[u].b,e));return i}function ce(n,e,r){for(var t in r){var o=r[t];"a1"===t?function(n,e){var r,t=n.style;for(r in e)t[r]=e[r]}(n,o):"a0"===t?function(n,e,r){var t,o=n.elmFs||(n.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(t,i)}i=function(u,n){function l(n){var e=l.q,r=pn(e.a,n);if(Et(r)){for(var t,o=Yt(e),e=r.a,a=o?o<3?e.a:e.aJ:e,r=1==o?e.b:3==o&&e.d_,i=(r&&n.stopPropagation(),(2==o?e.b:3==o&&e.dO)&&n.preventDefault(),u);t=i.j;){if("function"==typeof t)a=t(a);else for(var c=t.length;c--;)a=t[c](a);i=i.p}i(a,r)}}return l.q=n,l}(e,a),n.addEventListener(t,i,ee&&{passive:Yt(a)<2}),o[t]=i}else n.removeEventListener(t,i),o[t]=void 0}}(n,e,o):"a3"===t?function(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}(n,o):"a4"===t?function(n,e){for(var r in e){var t=e[r],o=t.f,t=t.o;void 0!==t?n.setAttributeNS(o,r,t):n.removeAttributeNS(o,r)}}(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ue(n,e){var r=[];return fe(n,e,r,0),r}function le(n,e,r,t){t={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(t),t}function fe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void le(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;o<r;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,u=i.length,l=u===c.length;l&&u--;)l=i[u]===c[u];if(l)return void(e.k=n.k);e.k=e.m();var f=[];return fe(n.k,e.k,f,0),void(0<f.length&&le(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void le(r,0,t,e):((v?function(n,e){for(var r=0;r<n.length;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||le(r,2,t,d),void fe(m,b,r,t+1));case 0:return void(n.a!==e.a&&le(r,3,t,e.a));case 1:return void se(n,e,r,t,ve);case 2:return void se(n,e,r,t,me);case 3:if(n.h!==e.h)return void le(r,0,t,e);f=de(n.d,e.d);f&&le(r,4,t,f);f=e.i(n.g,e.g);return void(f&&le(r,5,t,f))}}}function se(n,e,r,t,o){var a;n.c===e.c&&n.f===e.f?((a=de(n.d,e.d))&&le(r,4,t,a),o(n,e,r,t)):le(r,0,t,e)}function de(n,e,r){var t,o,a,i,c;for(o in n)"a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o?o in e?(a=n[o])===(i=e[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(n,e){return n.$==e.$&&Mn(n.a,e.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null:(i=de(n[o],e[o]||{},o))&&((t=t||{})[o]=i);for(c in e)c in n||((t=t||{})[c]=e[c]);return t}function ve(n,e,r,t){var o=n.e,a=e.e,n=o.length,e=a.length;e<n?le(r,6,t,{v:e,i:n-e}):n<e&&le(r,7,t,{v:n,e:a});for(var i=n<e?n:e,c=0;c<i;c++){var u=o[c];fe(u,a[c],r,++t),t+=u.b||0}}function me(n,e,r,t){for(var o=[],a={},i=[],c=n.e,u=e.e,l=c.length,f=u.length,s=0,d=0,v=t;s<l&&d<f;){var m,b=(m=c[s]).a,p=(w=u[d]).a,g=m.b,h=w.b,x=void 0,S=void 0;if(b!==p){var M,P,R,y,C=c[s+1],T=u[d+1];if(C&&(P=C.b,S=p===(M=C.a)),T&&(y=T.b,x=b===(R=T.a)),x&&S)fe(g,y,o,++v),pe(a,o,b,h,d,i),v+=g.b||0,ge(a,o,b,P,++v),v+=P.b||0,s+=2,d+=2;else if(x)v++,pe(a,o,p,h,d,i),fe(g,y,o,v),v+=g.b||0,s+=1,d+=2;else if(S)ge(a,o,b,g,++v),v+=g.b||0,fe(P,h,o,++v),v+=P.b||0,s+=2,d+=1;else{if(!C||M!==R)break;ge(a,o,b,g,++v),pe(a,o,p,h,d,i),v+=g.b||0,fe(P,y,o,++v),v+=P.b||0,s+=2,d+=2}}else fe(g,h,o,++v),v+=g.b||0,s++,d++}for(;s<l;)ge(a,o,(m=c[s]).a,g=m.b,++v),v+=g.b||0,s++;for(;d<f;){var w,L=L||[];pe(a,o,(w=u[d]).a,w.b,void 0,L),d++}(0<o.length||0<i.length||L)&&le(r,8,t,{w:o,x:i,y:L})}var be="_elmW6BL";function pe(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return fe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}pe(n,e,r+be,t,o,a)}function ge(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return fe(t,a.z,i,o),void le(e,9,o,{w:i,A:a})}ge(n,e,r+be,t,o)}else{e=le(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:e}}}function he(n,e,r,t){!function n(e,r,t,o,a,i,c){var u=t[o];var l=u.r;for(;l===a;){var f,s=u.$;if(1===s?he(e,r.k,u.s,c):8===s?(u.t=e,u.u=c,0<(f=u.s.w).length&&n(e,r,f,0,a,i,c)):9===s?(u.t=e,u.u=c,(s=u.s)&&(s.A.s=e,0<(f=s.w).length&&n(e,r,f,0,a,i,c))):(u.t=e,u.u=c),!(u=t[++o])||(l=u.r)>i)return o}var d=r.$;if(4===d){for(var v=r.k;4===v.$;)v=v.k;return n(e,v,t,o,a+1,i,e.elm_event_node_ref)}var m=r.e;var b=e.childNodes;for(var p=0;p<m.length;p++){var g=1===d?m[p]:m[p].b,h=++a+(g.b||0);if(a<=l&&l<=h&&(o=n(b[p],g,t,o,a,h,c),!(u=t[o])||(l=u.r)>i))return o;a=h}return o}(n,e,r,0,0,e.b,t)}function xe(n,e,r,t){return 0===r.length?n:(he(n,e,r,t),Se(n,r))}function Se(n,e){for(var r=0;r<e.length;r++){var t=e[r],o=t.t,t=function(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,r=ie(e,r);r.elm_event_node_ref||(r.elm_event_node_ref=n.elm_event_node_ref);t&&r!==n&&t.replaceChild(r,n);return r}(n,e.s,e.u);case 4:return ce(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Se(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;t<r.i;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];t<o.length;t++)n.insertBefore(ie(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Se(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(!n)return;for(var r=Hn.createDocumentFragment(),t=0;t<n.length;t++){var o=n[t].A;r.appendChild(2===o.c?o.s:ie(o.z,e.u))}return r}(r.y,e);n=Se(n,r.w);for(var o=r.x,a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:ie(c.z,e.u);n.insertBefore(c,n.childNodes[i.r])}t&&n.appendChild(t);return n}(n,e);case 5:return e.s(n);default:k(10)}}(o,t);o===n&&(n=t)}return n}function Me(n){if(3===n.nodeType)return{$:0,a:n.textContent};if(1!==n.nodeType)return{$:0,a:""};for(var e=R,r=n.attributes,t=r.length;t--;)var o=r[t],e={$:1,a:z(ne,o.name,o.value),b:e};for(var a=n.tagName.toLowerCase(),i=R,c=n.childNodes,t=c.length;t--;)i={$:1,a:Me(c[t]),b:i};return N(Qn,a,e,i)}var Pe=l(function(e,n,r,i){return Fn(n,i,e.gt,e.gV,e.gS,function(r,n){var t=e.gX,o=i.node,a=Me(o);return Ce(n,function(n){var e=t(n),n=ue(a,e);o=xe(o,a,n,r),a=e})})}),Re=(l(function(e,n,r,t){return Fn(n,t,e.gt,e.gV,e.gS,function(t,n){var o=e.dX&&e.dX(t),a=e.gX,i=Hn.title,c=Hn.body,u=Me(c);return Ce(n,function(n){Un=o;var e=a(n),r=Qn("body")(R)(e.c5),n=ue(u,r);c=xe(c,u,n,t),u=r,Un=0,i!==e.gU&&(Hn.title=i=e.gU)})})}),"undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)}),ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)};function Ce(r,t){t(r);var o=0;function a(){o=1===o?0:(ye(a),t(r),1)}return function(n,e){r=n,e?(t(r),2===o&&(o=1)):(0===o&&ye(a),o=2)}}h(function(n,e){return z(ho,to,{$:2,b:function(){e&&history.go(e),n()},c:null})}),h(function(n,e){return z(ho,to,{$:2,b:function(){history.pushState({},"",e),n()},c:null})}),h(function(n,e){return z(ho,to,{$:2,b:function(){history.replaceState({},"",e),n()},c:null})});var Te={addEventListener:function(){},removeEventListener:function(){}},we="undefined"!=typeof document?document:Te,Le="undefined"!=typeof window?window:Te,$e=s(function(e,r,t){return zn({$:2,b:function(){function n(n){$n(t(n))}return e.addEventListener(r,n,ee&&{passive:!0}),function(){e.removeEventListener(r,n)}},c:null})}),ze=h(function(n,e){e=pn(n,e);return Et(e)?at(e.a):it});function Ne(r,t){return{$:2,b:function(e){ye(function(){var n=document.getElementById(r);e(n?{$:0,a:t(n)}:{$:1,a:It(r)})})},c:null}}function De(e){return{$:2,b:function(n){ye(function(){n({$:0,a:e()})})},c:null}}function _e(){var n=we.body,e=we.documentElement;return{h:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),m:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}}h(function(e,n){return Ne(n,function(n){return n[e](),f})}),h(function(n,e){return De(function(){return Le.scroll(n,e),f})}),s(function(n,e,r){return Ne(n,function(n){return n.scrollLeft=e,n.scrollTop=r,f})});var Ve=t(function(a,i,c,u,l,n){var f=9728!==i&&9729!==i;return{$:2,b:function(r){var t=new Image;function o(n){var e=n.createTexture();return n.bindTexture(n.TEXTURE_2D,e),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,l),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,a),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,u),f&&n.generateMipmap(n.TEXTURE_2D),n.bindTexture(n.TEXTURE_2D,null),e}t.onload=function(){var n=t.width,e=t.height;r(0==(n&n-1)&&0==(e&e-1)||!f&&33071===c&&33071===u?{$:0,a:{$:0,f8:o,a:n,b:e}}:{$:1,a:z(wo,n,e)})},t.onerror=function(){r({$:1,a:To})},"data:"!==n.slice(0,5)&&(t.crossOrigin="Anonymous"),t.src=n},c:null}}),Ae=h(function(n,e){return new Float64Array([n,e])});function Fe(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1])}h(function(n,e){return new Float64Array([n,e[1]])}),h(function(n,e){return new Float64Array([e[0],n])}),h(function(n,e){var r=new Float64Array(2);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r}),h(function(n,e){var r=new Float64Array(2);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r}),h(function(n,e){var r=new Float64Array(2);r[0]=n[0]-e[0],r[1]=n[1]-e[1];e=1/Fe(r);return r[0]=r[0]*e,r[1]=r[1]*e,r}),h(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return Math.sqrt(r*r+e*e)}),h(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return r*r+e*e}),h(function(n,e){var r=new Float64Array(2);return r[0]=e[0]*n,r[1]=e[1]*n,r}),h(function(n,e){return n[0]*e[0]+n[1]*e[1]});var qe=new Float64Array(3),Be=new Float64Array(3),ke=new Float64Array(3),Ee=s(function(n,e,r){return new Float64Array([n,e,r])});function We(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r}function Ue(n,e,r){return void 0===r&&(r=new Float64Array(3)),Ye(We(n,e,r),r)}function Ge(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2])}function Ye(n,e){void 0===e&&(e=new Float64Array(3));var r=1/Ge(n);return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e}function Ie(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]}h(function(n,e){return new Float64Array([n,e[1],e[2]])}),h(function(n,e){return new Float64Array([e[0],n,e[2]])}),h(function(n,e){return new Float64Array([e[0],e[1],n])}),h(function(n,e){var r=new Float64Array(3);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r}),h(We),h(Ue),h(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return Math.sqrt(r*r+t*t+e*e)}),h(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return r*r+t*t+e*e});var je=h(function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])});function He(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[1]*e[2]-n[2]*e[1],r[1]=n[2]*e[0]-n[0]*e[2],r[2]=n[0]*e[1]-n[1]*e[0],r}h(Ie),h(He),h(function(n,e){var r,t=qe,o=new Float64Array(3);return t[0]=n[3],t[1]=n[7],t[2]=n[11],r=Ie(e,t)+n[15],t[0]=n[0],t[1]=n[4],t[2]=n[8],o[0]=(Ie(e,t)+n[12])/r,t[0]=n[1],t[1]=n[5],t[2]=n[9],o[1]=(Ie(e,t)+n[13])/r,t[0]=n[2],t[1]=n[6],t[2]=n[10],o[2]=(Ie(e,t)+n[14])/r,o});var Oe=l(function(n,e,r,t){return new Float64Array([n,e,r,t])});function Qe(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]+n[3]*n[3])}h(function(n,e){return new Float64Array([n,e[1],e[2],e[3]])}),h(function(n,e){return new Float64Array([e[0],n,e[2],e[3]])}),h(function(n,e){return new Float64Array([e[0],e[1],n,e[3]])}),h(function(n,e){return new Float64Array([e[0],e[1],e[2],n])}),h(function(n,e){var r=new Float64Array(4);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r[3]=n[3]+e[3],r}),h(function(n,e){var r=new Float64Array(4);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3],r}),h(function(n,e){var r=new Float64Array(4);r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3];e=1/Qe(r);return r[0]=r[0]*e,r[1]=r[1]*e,r[2]=r[2]*e,r[3]=r[3]*e,r}),h(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return Math.sqrt(r*r+t*t+o*o+e*e)}),h(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return r*r+t*t+o*o+e*e}),h(function(n,e){var r=new Float64Array(4);return r[0]=e[0]*n,r[1]=e[1]*n,r[2]=e[2]*n,r[3]=e[3]*n,r}),h(function(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]+n[3]*e[3]});var Xe=new Float64Array(16),Ze=new Float64Array(16);function Je(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2*o/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*o/(t-r),i[6]=0,i[7]=0,i[8]=(e+n)/(e-n),i[9]=(t+r)/(t-r),i[10]=-(a+o)/(a-o),i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*a*o/(a-o),i[15]=0,i}function Ke(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2/(t-r),i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-2/(a-o),i[11]=0,i[12]=-(e+n)/(e-n),i[13]=-(t+r)/(t-r),i[14]=-(a+o)/(a-o),i[15]=1,i}function nr(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[3],c=n[4],u=n[5],l=n[6],f=n[7],s=n[8],d=n[9],v=n[10],m=n[11],b=n[12],p=n[13],g=n[14],h=n[15],x=e[0],S=e[1],M=e[2],P=e[3],R=e[4],y=e[5],C=e[6],T=e[7],w=e[8],L=e[9],$=e[10],z=e[11],N=e[12],D=e[13],n=e[14],e=e[15];return r[0]=t*x+c*S+s*M+b*P,r[1]=o*x+u*S+d*M+p*P,r[2]=a*x+l*S+v*M+g*P,r[3]=i*x+f*S+m*M+h*P,r[4]=t*R+c*y+s*C+b*T,r[5]=o*R+u*y+d*C+p*T,r[6]=a*R+l*y+v*C+g*T,r[7]=i*R+f*y+m*C+h*T,r[8]=t*w+c*L+s*$+b*z,r[9]=o*w+u*L+d*$+p*z,r[10]=a*w+l*L+v*$+g*z,r[11]=i*w+f*L+m*$+h*z,r[12]=t*N+c*D+s*n+b*e,r[13]=o*N+u*D+d*n+p*e,r[14]=a*N+l*D+v*n+g*e,r[15]=i*N+f*D+m*n+h*e,r}function er(n,e,r){var t=new Float64Array(16);return t[0]=n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function rr(n,e,r){var t=new Float64Array(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n,t[13]=e,t[14]=r,t[15]=1,t}new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),t(Je),l(function(n,e,r,t){var o=r*Math.tan(n*Math.PI/360),n=-o;return Je(n*e,o*e,n,o,r,t)}),t(Ke),l(function(n,e,r,t){return Ke(n,e,r,t,-1,1)}),h(nr),h(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[4],c=n[5],u=n[6],l=n[8],f=n[9],s=n[10],d=n[12],v=n[13],m=n[14],b=e[0],p=e[1],g=e[2],h=e[4],x=e[5],S=e[6],M=e[8],P=e[9],R=e[10],y=e[12],n=e[13],e=e[14];return r[0]=t*b+i*p+l*g,r[1]=o*b+c*p+f*g,r[2]=a*b+u*p+s*g,r[3]=0,r[4]=t*h+i*x+l*S,r[5]=o*h+c*x+f*S,r[6]=a*h+u*x+s*S,r[7]=0,r[8]=t*M+i*P+l*R,r[9]=o*M+c*P+f*R,r[10]=a*M+u*P+s*R,r[11]=0,r[12]=t*y+i*n+l*e+d,r[13]=o*y+c*n+f*e+v,r[14]=a*y+u*n+s*e+m,r[15]=1,r}),h(function(n,e){var r=new Float64Array(16),t=(e=Ye(e,qe))[0],o=e[1],a=e[2],i=Math.cos(n),e=1-i,n=Math.sin(n);return r[0]=t*t*e+i,r[1]=o*t*e+a*n,r[2]=a*t*e-o*n,r[3]=0,r[4]=t*o*e-a*n,r[5]=o*o*e+i,r[6]=o*a*e+t*n,r[7]=0,r[8]=t*a*e+o*n,r[9]=o*a*e-t*n,r[10]=a*a*e+i,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}),s(function(n,e,r){var t=new Float64Array(16),o=1/Ge(e),a=e[0]*o,i=e[1]*o,c=e[2]*o,u=Math.cos(n),l=1-u,f=Math.sin(n),s=a*f,d=i*f,v=c*f,m=a*i*l,b=a*c*l,p=i*c*l,g=a*a*l+u,h=m+v,x=b-d,S=m-v,M=i*i*l+u,P=p+s,R=b+d,y=p-s,C=c*c*l+u,e=r[0],o=r[1],n=r[2],f=r[3],a=r[4],m=r[5],v=r[6],i=r[7],b=r[8],d=r[9],p=r[10],s=r[11],c=r[12],l=r[13],u=r[14],r=r[15];return t[0]=e*g+a*h+b*x,t[1]=o*g+m*h+d*x,t[2]=n*g+v*h+p*x,t[3]=f*g+i*h+s*x,t[4]=e*S+a*M+b*P,t[5]=o*S+m*M+d*P,t[6]=n*S+v*M+p*P,t[7]=f*S+i*M+s*P,t[8]=e*R+a*y+b*C,t[9]=o*R+m*y+d*C,t[10]=n*R+v*y+p*C,t[11]=f*R+i*y+s*C,t[12]=c,t[13]=l,t[14]=u,t[15]=r,t}),s(er),l(function(n,e,r,t){var o=new Float64Array(16);return o[0]=t[0]*n,o[1]=t[1]*n,o[2]=t[2]*n,o[3]=t[3]*n,o[4]=t[4]*e,o[5]=t[5]*e,o[6]=t[6]*e,o[7]=t[7]*e,o[8]=t[8]*r,o[9]=t[9]*r,o[10]=t[10]*r,o[11]=t[11]*r,o[12]=t[12],o[13]=t[13],o[14]=t[14],o[15]=t[15],o}),h(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],n=n[2];return r[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r[4]=e[4]*o,r[5]=e[5]*o,r[6]=e[6]*o,r[7]=e[7]*o,r[8]=e[8]*n,r[9]=e[9]*n,r[10]=e[10]*n,r[11]=e[11]*n,r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15],r}),s(rr),l(function(n,e,r,t){var o=new Float64Array(16),a=t[0],i=t[1],c=t[2],u=t[3],l=t[4],f=t[5],s=t[6],d=t[7],v=t[8],m=t[9],b=t[10],p=t[11];return o[0]=a,o[1]=i,o[2]=c,o[3]=u,o[4]=l,o[5]=f,o[6]=s,o[7]=d,o[8]=v,o[9]=m,o[10]=b,o[11]=p,o[12]=a*n+l*e+v*r+t[12],o[13]=i*n+f*e+m*r+t[13],o[14]=c*n+s*e+b*r+t[14],o[15]=u*n+d*e+p*r+t[15],o}),h(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=e[0],c=e[1],u=e[2],l=e[3],f=e[4],s=e[5],d=e[6],v=e[7],m=e[8],b=e[9],p=e[10],n=e[11];return r[0]=i,r[1]=c,r[2]=u,r[3]=l,r[4]=f,r[5]=s,r[6]=d,r[7]=v,r[8]=m,r[9]=b,r[10]=p,r[11]=n,r[12]=i*t+f*o+m*a+e[12],r[13]=c*t+s*o+b*a+e[13],r[14]=u*t+d*o+p*a+e[14],r[15]=l*t+v*o+n*a+e[15],r}),s(function(n,e,r){var t=Ue(n,e,qe),o=Ye(He(r,t,Be),Be),a=Ye(He(t,o,ke),ke),e=Xe,r=Ze;return e[0]=o[0],e[1]=a[0],e[2]=t[0],e[3]=0,e[4]=o[1],e[5]=a[1],e[6]=t[1],e[7]=0,e[8]=o[2],e[9]=a[2],e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,r[e[14]=0]=e[15]=1,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=1,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=1,r[11]=0,r[12]=-n[0],r[13]=-n[1],r[14]=-n[2],r[15]=1,nr(e,r)}),s(function(n,e,r){var t=new Float64Array(16);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=0,t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=0,t[8]=r[0],t[9]=r[1],t[10]=r[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}),h(function(n,e){return n&e}),h(function(n,e){return n|e}),h(function(n,e){return n^e});var tr=h(function(n,e){return e<<n}),or=(h(function(n,e){return e>>n}),h(function(n,e){return e>>>n}),0);function ar(n,e){for(;e.b;e=e.b)n(e.a)}function ir(n){for(var e=0;n.b;n=n.b)e++;return e}function cr(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)}function ur(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)}var lr="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Te=r(function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}}),fr=h(function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)}),sr=h(function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)}),dr=h(function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)}),vr=h(function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),mr=h(function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),br=h(function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)}),pr=h(function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)}),gr=h(function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)}),hr=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],xr=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},cr,ur,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function Sr(n,e,r){r=n.createShader(r);return n.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(r),r}function Mr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function Pr(n,e,r,t){for(var c=r.a.eq,u=[],o=0;o<c;o++)u.push(String.fromCharCode(97+o));var a=Mr(n,e.type);if(void 0===a)throw Error("No info available for: "+e.type);var i=0,l=a.size*a.arraySize*c,f=new a.type(ir(r.b)*l);ar(function(n){!function(e,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)e[t++]=1===r?o[a]:o[a][i];else u.forEach(function(n){for(i=0;i<r;i++)e[t++]=1===r?o[n][a]:o[n][a][i]})}(f,a.size*a.arraySize,i,n,t[e.name]||e.name),i+=l},r.b);r=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),r}function Rr(n,e){if(0<e.a.eC){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint16Array(ir(n)*e),o=0;return ar(function(n){if(1===e)t[o++]=n;else for(r=0;r<e;r++)t[o++]=n[String.fromCharCode(97+r)]},n),t}(e.c,e.a.eC);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.eq*ir(e.b),indexBuffer:null,buffers:{}}}var yr=h(function(h,n){var x=h.f,S=x.gl;return S&&(S.viewport(0,0,S.drawingBufferWidth,S.drawingBufferHeight),x.depthTest.b||(S.depthMask(!0),x.depthTest.b=!0),x.stencilTest.c!==x.STENCIL_WRITEMASK&&(S.stencilMask(x.STENCIL_WRITEMASK),x.stencilTest.c=x.STENCIL_WRITEMASK),cr(x),ur(x),S.clear(S.COLOR_BUFFER_BIT|S.DEPTH_BUFFER_BIT|S.STENCIL_BUFFER_BIT),ar(function(n){if(n.d.b.b){var e,r,t,o,a;if(n.b.id&&n.c.id&&(i=x.programs[e=n.b.id+"#"+n.c.id]),!i){n.b.id?r=x.shaders[n.b.id]:n.b.id=or++,r||(r=Sr(S,n.b.src,S.VERTEX_SHADER),x.shaders[n.b.id]=r),n.c.id?t=x.shaders[n.c.id]:n.c.id=or++,t||(t=Sr(S,n.c.src,S.FRAGMENT_SHADER),x.shaders[n.c.id]=t);var i,c=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(S,r,t);(i={glProgram:c,attributes:Object.assign({},n.b.attributes,n.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,n,e,r){var t=e.glProgram,i=e.currentUniforms,c=0,u=n.f;for(var o={},l=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<l;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(n,e){var r=e.name,t=a.getUniformLocation(n,r);switch(e.type){case a.INT:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};case a.FLOAT:return function(n){i[r]!==n&&(a.uniform1f(t,n),i[r]=n)};case a.FLOAT_VEC2:return function(n){i[r]!==n&&(a.uniform2f(t,n[0],n[1]),i[r]=n)};case a.FLOAT_VEC3:return function(n){i[r]!==n&&(a.uniform3f(t,n[0],n[1],n[2]),i[r]=n)};case a.FLOAT_VEC4:return function(n){i[r]!==n&&(a.uniform4f(t,n[0],n[1],n[2],n[3]),i[r]=n)};case a.FLOAT_MAT4:return function(n){i[r]!==n&&(a.uniformMatrix4fv(t,!1,new Float32Array(n)),i[r]=n)};case a.SAMPLER_2D:var o=c++;return function(n){a.activeTexture(a.TEXTURE0+o);var e=u.textures.get(n);e||(e=n.f8(a),u.textures.set(n,e)),a.bindTexture(a.TEXTURE_2D,e),i[r]!==n&&(a.uniform1i(t,o),i[r]=n)};case a.BOOL:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};default:return function(){}}}(t,s)}return o}(S,h,i,Object.assign({},n.b.uniforms,n.c.uniforms));for(var u=S.getProgramParameter(c,S.ACTIVE_ATTRIBUTES),l=0;l<u;l++){var f=S.getActiveAttrib(c,l),s=S.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}x.programs[e=n.b.id+"#"+n.c.id]=i}x.lastProgId!==e&&(S.useProgram(i.glProgram),x.lastProgId=e),o=i.uniformSetters,Object.keys(a=n.e).forEach(function(n){var e=o[n];e&&e(a[n])});var d=x.buffers.get(n.d);for(d||(d=Rr(S,n.d),x.buffers.set(n.d,d)),l=0;l<i.activeAttributes.length;l++){s=i.activeAttributeLocations[l],void 0===d.buffers[(f=i.activeAttributes[l]).name]&&(d.buffers[f.name]=Pr(S,f,n.d,i.attributes)),S.bindBuffer(S.ARRAY_BUFFER,d.buffers[f.name]);var v=Mr(S,f.type);if(1===v.arraySize)S.enableVertexAttribArray(s),S.vertexAttribPointer(s,v.size,v.baseType,!1,0,0);else for(var m=4*v.size,b=m*v.arraySize,p=0;p<v.arraySize;p++)S.enableVertexAttribArray(s+p),S.vertexAttribPointer(s+p,v.size,v.baseType,!1,b,m*p)}for(x.toggle=!x.toggle,ar(sf(x),n.a),l=0;l<9;l++){var g=x[hr[l]];g.toggle!==x.toggle&&g.enabled&&(xr[l](x),g.enabled=!1,g.toggle=x.toggle)}d.indexBuffer?(S.bindBuffer(S.ELEMENT_ARRAY_BUFFER,d.indexBuffer),S.drawElements(n.d.a.fd,d.numIndices,S.UNSIGNED_SHORT,0)):S.drawArrays(n.d.a.fd,0,d.numIndices)}},h.g)),n}),Cr=s(function(n,e,r){return function(n,e,r,t){return{$:3,d:oe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},Dr,_r)}),Tr=h(function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a}),wr=h(function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push(function(n){n.clearDepth(e.a)})}),Lr=h(function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push(function(n){n.clearStencil(e.a)})}),$r=h(function(n){n.contextAttributes.antialias=!0}),zr=h(function(n,e){n.sceneSettings.push(function(n){n.clearColor(e.a,e.b,e.c,e.d)})}),Nr=h(function(n){n.contextAttributes.preserveDrawingBuffer=!0});function Dr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};ar(function(n){return z(ff,e,n)},n.h);var r=Hn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach(function(n){n(t)}),t.getExtension("OES_standard_derivatives"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),lr(function(){return z(yr,n,r)})):(r=Hn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function _r(n,e){return e.f=n.f,yr(e)}function Vr(n){return z(ft,"\n    ",z(st,"\n",n))}function Ar(n){return N(dt,h(function(n,e){return e+1}),0,n)}function Fr(n){return 97<=(n=gt(n))&&n<=122}function qr(n){return(n=gt(n))<=90&&65<=n}function Br(n){return Fr(n)||qr(n)||function(n){n=gt(n);return n<=57&&48<=n}(n)}function kr(n){return n}function Er(n){return n.a}function Wr(n){return n}function Ur(n){return N(io,fo(jr),oo(R),n)}var Gr=1,Yr=2,Ir=0,jr=v,Hr=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=N(n,r.b,r.c,N(Hr,n,e,r.e));n=o,e=a,r=t}}),Or=function(n){return N(Hr,s(function(n,e,r){return z(jr,{a:n,b:e},r)}),R,n)},Qr=q,Xr=s(function(r,n,e){var t=e.c,e=e.d,o=h(function(n,e){return N(Qr,n.$?r:o,e,n.a)});return N(Qr,o,N(Qr,r,n,e),t)}),Zr=function(n){return N(Xr,jr,R,n)},Jr=function(n){return{$:1,a:n}},Kr=h(function(n,e){return{$:3,a:n,b:e}}),nt=h(function(n,e){return{$:0,a:n,b:e}}),et=h(function(n,e){return{$:1,a:n,b:e}}),rt=function(n){return{$:0,a:n}},tt=function(n){return{$:2,a:n}},ot=E,at=function(n){return{$:0,a:n}},it={$:1},ct=rn,ut=Rn,lt=cn,ft=h(function(n,e){return z(nn,n,p(e))}),st=h(function(n,e){return y(z(K,n,e))}),dt=s(function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=z(n,r.a,e);n=o,e=a,r=t}}),vt=g,mt=s(function(n,e,r){for(;;){if(1<=x(n,e))return r;var t=n,o=e-1,a=z(jr,e,r);n=t,e=o,r=a}}),bt=h(function(n,e){return N(mt,n,e,R)}),pt=h(function(n,e){return N(vt,n,z(bt,0,Ar(e)-1),e)}),gt=function(n){var e=n.charCodeAt(0);return e<55296||56319<e?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},ht=function(n){return N(dt,jr,R,n)},xt=function(n){var e=n.charCodeAt(0);return isNaN(e)?it:at(e<55296||56319<e?{a:n[0],b:n.slice(1)}:{a:n[0]+n[1],b:n.slice(2)})},St=h(function(n,e){return"\n\n("+lt(n+1)+(") "+Vr(Mt(e)))}),Mt=function(n){return z(Pt,n,R)},Pt=h(function(n,e){n:for(;;)switch(n.$){case 0:var r=n.a,t=n.b,o=function(){var n=xt(r);if(1===n.$)return!1;var e=n.a,n=e.b;return function(n){return Fr(n)||qr(n)}(e.a)&&z(ct,Br,n)}(),a=t,o=z(jr,o?"."+r:"['"+r+"']",e);n=a,e=o;continue n;case 1:var t=n.b,i="["+lt(n.a)+"]",a=t,o=z(jr,i,e);n=a,e=o;continue n;case 2:var c=n.a;if(c.b){if(c.b.b){var u=(e.b?"The Json.Decode.oneOf at json"+z(ft,"",ht(e)):"Json.Decode.oneOf")+" failed in the following "+lt(Ar(c))+" ways:";return z(ft,"\n\n",z(jr,u,z(pt,St,c)))}n=a=t=c.a,e=o=e;continue n}return"Ran into a Json.Decode.oneOf with no possibilities"+(e.b?" at json"+z(ft,"",ht(e)):"!");default:i=n.a,c=n.b;return(u=e.b?"Problem with the value at json"+z(ft,"",ht(e))+":\n\n    ":"Problem with the given value:\n\n")+(Vr(z(ut,4,c))+"\n\n")+i}}),Rt=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),yt=[],Ct=H,Tt=h(function(n,e){return Z(e)/Z(n)}),wt=Ct(z(Tt,2,32)),Lt=D(Rt,0,wt,yt,yt),$t=L,zt=(h(function(n,e){return n(e)}),h(function(n,e){return e(n)}),c),Nt=O,Dt=function(n){return n.length},_t=h(function(n,e){return 0<x(n,e)?n:e}),Vt=V,At=h(function(n,e){for(;;){var r=z(Vt,32,n),t=r.b,r=z(jr,{$:0,a:r.a},e);if(!t.b)return ht(r);n=t,e=r}}),Ft=h(function(n,e){for(;;){var r=Ct(e/32);if(1===r)return z(Vt,32,n).a;n=z(At,n,R),e=r}}),qt=h(function(n,e){if(e.o){var r=32*e.o,t=Nt(z(Tt,32,r-1)),n=n?ht(e.D):e.D,n=z(Ft,n,e.o);return D(Rt,Dt(e.s)+r,z(_t,5,t*wt),n,e.s)}return D(Rt,Dt(e.s),wt,yt,e.s)}),Bt=r(function(n,e,r,t,o){for(;;){if(e<0)return z(qt,!1,{D:t,o:r/32|0,s:o});var a={$:1,a:N($t,32,e,n)};n=n,e=e-32,r=r,t=z(jr,a,t),o=o}}),kt=h(function(n,e){if(0<n){var r=n%32,t=N($t,r,n-r,e);return _(Bt,e,n-r-32,n,R,t)}return Lt}),Et=function(n){return!n.$},Wt=vn,Ut=mn,Gt=function(n){return{$:0,a:n}},Yt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},It=Wr,jt=t(function(n,e,r,t,o,a){return{ex:a,eA:e,fh:t,fk:r,fn:n,fo:o}}),Ht=tn,Ot=function(n){return n.length},Qt=en,Xt=h(function(n,e){return n<1?e:N(Qt,n,Ot(e),e)}),Zt=an,Jt=h(function(n,e){return n<1?"":N(Qt,0,n,e)}),Kt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;o<n.length;++o){var a=n.charCodeAt(o);if(a<48||57<a)return it;e=10*e+a-48}return o==t?it:at(45==r?-e:e)},no=r(function(n,e,r,t,o){if(""===o||z(Ht,"@",o))return it;var a=z(Zt,":",o);if(a.b){if(a.b.b)return it;var i=a.a,a=Kt(z(Xt,i+1,o));if(1===a.$)return it;a=a;return at(C(jt,n,z(Jt,i,o),a,e,r,t))}return at(C(jt,n,o,it,e,r,t))}),eo=l(function(n,e,r,t){if(""===t)return it;var o=z(Zt,"/",t);if(o.b){o=o.a;return _(no,n,z(Xt,o,t),e,r,z(Jt,o,t))}return _(no,n,"/",e,r,t)}),ro=s(function(n,e,r){if(""===r)return it;var t=z(Zt,"?",r);if(t.b){t=t.a;return D(eo,n,at(z(Xt,t+1,r)),e,z(Jt,t,r))}return D(eo,n,it,e,r)}),to=(h(function(n,e){if(""===e)return it;var r=z(Zt,"#",e);if(r.b){r=r.a;return N(ro,n,at(z(Xt,r+1,e)),z(Jt,r,e))}return N(ro,n,it,e)}),function(){for(;;)0}),oo=Cn,tn=oo(0),ao=l(function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){t=c.a,a=c.b;if(a.b){c=a.b;return z(n,o,z(n,i,z(n,t,z(n,a.a,500<r?N(dt,n,e,ht(c)):D(ao,n,e,r+1,c)))))}return z(n,o,z(n,i,z(n,t,e)))}return z(n,o,z(n,i,e))}return z(n,o,e)}return e}),io=s(function(n,e,r){return D(ao,n,e,0,r)}),co=h(function(r,n){return N(io,h(function(n,e){return z(jr,r(n),e)}),R,n)}),uo=Tn,lo=h(function(e,n){return z(uo,function(n){return oo(e(n))},n)}),fo=s(function(r,n,t){return z(uo,function(e){return z(uo,function(n){return oo(z(r,e,n))},t)},n)}),so=Bn,vo=h(function(n,e){return zn(z(uo,so(n),e))}),en=s(function(n,e){return z(lo,function(){return 0},Ur(z(co,vo(n),e)))}),an=s(function(){return oo(0)}),on=h(function(n,e){return z(lo,n,e)});function mo(n){return{$:7,a:n}}function bo(n){return{$:0,a:n}}function po(n){return N(io,qo,R,n)}qn.Task={b:tn,c:en,d:an,e:on,f:void 0};var go=En("Task"),ho=h(function(n,e){return go(z(lo,n,e))}),Bn=Pe,xo={$:0},So=h(function(n,e){return{$:1,a:n,b:e}}),Mo=s(function(n,e,r){return n(e(r))}),Po=wn,Ro=h(function(n,e){return go(z(Po,z(Mo,z(Mo,oo,n),Jr),z(uo,z(Mo,z(Mo,oo,n),rt),e)))}),yo=Wn,Co=De(function(){return{fu:_e(),gY:{fR:Le.pageXOffset,fS:Le.pageYOffset,h:we.documentElement.clientWidth,m:we.documentElement.clientHeight}}}),To={$:0},wo=h(function(n,e){return{$:1,a:n,b:e}}),Lo=h(function(n,o){var e=n.cD,r=n.cF,t=n.cu,a=n.c$,i=n.co;return D(l(function(n,e,r,t){return C(Ve,n,e,r,t,i,o)}),e,r,t,a)}),$o=h(function(e,r){return z(lo,function(n){return{$:1,a:{H:n,gI:e,gW:r}}},z(Lo,e,r))}),zo=h(function(n,e){return z($o,n,e)}),No={co:!0,cu:10497,cD:9729,cF:9987,c$:10497},Do=h(function(n,e){return{$:5,a:n,b:e}}),_o=h(function(n,e){return{$:6,a:n,b:e}}),Vo={$:5},Ao=dn,Fo=Wn,qo=h(function(n,e){return e.b?N(io,jr,e,n):n}),Bo=function(n){return{$:1,a:n}},ko=sn,Eo=s(function(n,e,r){return e(n(r))}),Wo=u,Uo=h(function(n,e){n:for(;;){if(-2===e.$)return it;var r=e.c,t=e.d,o=e.e;switch(z(Wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return at(r);default:n=n,e=o;continue n}}}),Go=h(function(n,e){return e.$?it:at(n(e.a))}),Yo=fn,Io=h(function(n,e){return e.$?n:e.a}),jo=h(function(n,e){var r=n;return z(Ao,function(n){return z(Io,Bo("Unrecognized key: "+n),z(Go,z(Eo,e,Gt),z(Uo,n,r)))},z(ko,"key",Yo))}),Ho=s(function(n,e,r){return{dD:r,fr:e,fy:n}}),Oo=oo(N(Ho,R,it,0)),Qo=function(r){return{$:2,b:function(n){var e=r.f;2===e.$&&e.c&&e.c(),r.f=null,n({$:0,a:f})},c:null}},Xo={$:2,b:function(n){n({$:0,a:Date.now()})},c:null},Zo={$:2,b:function(n){var e=ye(function(){n({$:0,a:Date.now()})});return function(){Re(e)}},c:null},Jo=kn,Ko=zn,tn=s(function(n,r,e){var t=e.fr,o={a:t,b:r};if(1!==o.a.$)return o.b.b?oo(N(Ho,r,t,e.dD)):z(uo,function(){return Oo},Qo(o.a.a));if(o.b.b)return z(uo,function(e){return z(uo,function(n){return oo(N(Ho,r,at(e),n))},Xo)},Ko(z(uo,Jo(n),Zo)));return Oo}),na=Wr,en=s(function(e,r,n){function t(n){return z(so,e,n.$?(0,n.a)(r-a):(0,n.a)(na(r)))}var o=n.fy,a=n.dD;return z(uo,function(n){return z(uo,function(){return oo(N(Ho,o,at(n),r))},Ur(z(co,t,o)))},Ko(z(uo,Jo(e),Zo)))}),an=h(function(n,e){return e.$?{$:1,a:z(Mo,n,e.a)}:{$:0,a:z(Mo,n,e.a)}});function ea(n){return{a:b(n.a?"w_":"d_",n.b),b:n}}function ra(n){return N(dt,h(function(n,e){return N(da,n.a,n.b,e)}),ua,n)}qn["Browser.AnimationManager"]={b:Oo,c:tn,d:en,e:0,f:an};var ta=En("Browser.AnimationManager"),oa=function(n){return ta({$:1,a:n})},aa=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),ia=h(function(n,e){return{fi:e,fy:n}}),ca={$:-2},ua=ca,on=oo(z(ia,R,ua)),la=r(function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}}),fa=r(function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return _(la,n,e,r,t,o);var a=t.d,i=t.e;return _(la,0,t.b,t.c,_(la,1,a.b,a.c,a.d,a.e),_(la,1,e,r,i,o))}var c=o.b,u=o.c,a=o.d,o=o.e;if(-1!==t.$||t.a)return _(la,n,c,u,_(la,0,e,r,t,a),o);var i;return _(la,0,e,r,_(la,1,t.b,t.c,t.d,i=t.e),_(la,1,c,u,a,o))}),sa=s(function(n,e,r){if(-2===r.$)return _(la,0,n,e,ca,ca);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(z(Wo,n,o)){case 0:return _(fa,t,o,a,N(sa,n,e,i),c);case 1:return _(la,t,o,e,i,c);default:return _(fa,t,o,a,i,N(sa,n,e,c))}}),da=s(function(n,e,r){r=N(sa,n,e,r);if(-1!==r.$||r.a)return r;return _(la,1,r.b,r.c,r.d,r.e)}),va=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=N(n,r.b,r.c,N(va,n,e,r.d));n=o,e=a,r=t}}),ma=t(function(u,l,f,n,e,r){var t=s(function(n,e,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:N(f,n,e,o)};var a=t.a,i=a.a,c=a.b,a=t.b;if(0<=x(i,n))return 0<x(i,n)?{a:t,b:N(f,n,e,o)}:{a:a,b:D(l,i,c,e,o)};n=n,e=e,r={a:a,b:N(u,i,c,o)}}}),r=N(va,t,{a:Or(n),b:r},e),e=r.a,r=r.b;return N(dt,h(function(n,e){return N(u,n.a,n.b,e)}),r,e)}),ba=h(function(n,e){return{ev:e,eH:n}}),pa=s(function(e,r,n){return z(lo,function(n){return{a:r,b:n}},N($e,n.a?Le:we,n.b,function(n){return z(Jo,e,z(ba,r,n))}))}),ga=h(function(n,e){return N(va,da,e,n)}),Pe=s(function(o,n,e){var r=s(function(n,e,r){var t=r.c;return{a:r.a,b:r.b,c:z(jr,N(pa,o,n,e),t)}}),t=s(function(n,e,r){var t=r.b,o=r.c;return{a:z(jr,e,r.a),b:t,c:o}}),a=l(function(n,e,r,t){var o=t.c;return{a:t.a,b:N(da,n,e,t.b),c:o}}),i=z(co,ea,n),e=C(ma,t,a,r,e.fi,ra(i),{a:R,b:ua,c:R}),c=e.b,u=e.c;return z(uo,function(n){return oo(z(ia,i,z(ga,c,ra(n))))},z(uo,function(){return Ur(u)},Ur(z(co,Qo,e.a))))}),ha=s(function(n,e,r){e=n(e);return e.$?r:z(jr,e.a,r)}),xa=h(function(n,e){return N(io,ha(n),R,e)}),wn=s(function(n,e,r){var t=e.eH,o=e.ev,e=z(xa,function(n){var e=n.b,e=e.c;return M(n.a,t)?z(ze,e,o):it},r.fy);return z(uo,function(){return oo(r)},Ur(z(co,so(n),e)))}),dn=h(function(n,e){return N(aa,e.a,e.b,z(Wt,n,e.c))});function Sa(n){return n.a}function Ma(n){return n}function Pa(n){return n}function Ra(n){return n.H}function ya(n){var e=(o=n.b).a,r=o.b,t=o.c,o=o.d;return z(du,z(mu,n,bu),D(su,-e,-r,-t,o))}function Ca(n){var e=n.b,r=e.a,t=e.b;return{eQ:1-2*t*t-2*(n=e.c)*n,eR:2*r*t-2*(e=e.d)*n,eS:2*r*n+2*e*t,eU:2*r*t+2*e*n,eV:1-2*r*r-2*n*n,eW:2*t*n-2*e*r,eY:2*r*n-2*e*t,eZ:2*t*n+2*e*r,e_:1-2*r*r-2*t*t}}function Ta(n){var e=z(hu,n.b9,ya(n.ck)),n=Ca(e);return{dE:Sa(e),d7:{fR:n.eQ,fS:n.eU,c0:n.eY},d8:{fR:n.eR,fS:n.eV,c0:n.eZ},d9:{fR:n.eS,fS:n.eW,c0:n.e_}}}function wa(n){return n=z(hu,n.b9,ya(n.ck)),Sa(n)}function La(n){return n.d9}function $a(n){return n}function za(n){return $a(n.fX)}function Na(n){return n.ep}function Da(n){return n}function _a(n){return n.fR}function Va(n){return n.fS}function Aa(n){return n.c0}function Fa(n){var e=Aa(n.d9),r=Va(n.d9),t=_a(n.d9),o=Aa(n.d8),a=Va(n.d8),i=_a(n.d8),c=Aa(n.d7),u=Va(n.d7);return 0<(n=_a(n.d7))*a*e+u*o*t+c*i*r-c*a*t-u*i*e-n*o*r}function qa(n){return n.dE}function Ba(n){return{eQ:n.eQ,eR:n.eU,eS:n.eY,eU:n.eR,eV:n.eV,eW:n.eZ,eY:n.eS,eZ:n.eW,e_:n.e_}}function ka(n){return{fR:-n.fR,fS:-n.fS,c0:-n.c0}}function Ea(n){return n.d7}function Wa(n){return n.d8}function Ua(n){return n}function Ga(n){var e=za(n),r=Fa(e)?e:{dE:qa(o=e),d7:Ea(o),d8:Wa(o),d9:ka(La(o))},t=Ua(qa(r)),e=Pa(Ea(r)),o=Pa(Wa(r)),r=Pa(La(r)),r=D(Fu,t,e,o,r),n=Na(n);return{$:0,a:z(ju,r,N(Vu,Da(n.a),Da(n.b),Da(n.c)))}}function Ya(n){return z(du,n,Hu)}function Ia(n){switch(n.$){case 2:return n.a.fO;case 0:return n.a.fO;case 1:default:return 0}}function ja(n){var e=n.fR,r=n.fS;return e*e+r*r+(n=n.c0)*n}function Ha(n){var e=n.fR,r=n.fS;return Au(e*e+r*r+(n=n.c0)*n)}function Oa(t){var n,e,r,o,a,i,c=t.dr,u=t.dY,l=N(dt,h(function(n,e){return Ia(n)+e}),0,u),f=c?1/c:0,s=z(ul,c/l,N(dt,function(n){var e=Ia(n),r=function(n){switch(n.$){case 2:return n.a.eD;case 0:return n.a.eD;case 1:default:return ol}}(n),n=function(n){switch(n.$){case 2:return n.a.cM;case 0:return n.a.cM;case 1:default:return bu}}(n),r=D(il,t.ck,z(Eu,t.ck,n),e,r);return tl(r)},ol,u)),d=(d=1/(s=(n=(d=s).eQ)*((r=d.eV)*(i=d.e_)-(o=d.eZ)*(a=d.eW))-(e=d.eR)*((c=d.eU)*i-a*(l=d.eY))+(u=d.eS)*(c*o-r*l)),s?{eQ:(r*i-o*a)*d,eR:(u*o-e*i)*d,eS:(e*a-u*r)*d,eU:(a*l-c*i)*d,eV:(n*i-u*l)*d,eW:(c*u-n*a)*d,eY:(c*o-l*r)*d,eZ:(l*e-n*o)*d,e_:(n*r-c*e)*d}:ol);return P(t,{dh:d,cv:z(cl,t.b9,d),cw:f})}function Qa(n){return fl(y([Ga(n)]))}function Xa(n){return n}function Za(n){return z(yl,n.e6,n.e9)&&z(yl,n.e7,n.fa)&&z(yl,n.e8,n.fb)?n:{e6:z(xl,n.e9,n.e6),e7:z(xl,n.fa,n.e7),e8:z(xl,n.fb,n.e8),e9:z(Ml,n.e9,n.e6),fa:z(Ml,n.fa,n.e7),fb:z(Ml,n.fb,n.e8)}}function Ja(n){return n}function Ka(n){return n.fR}function ni(n){return n.fS}function ei(n){return n.c0}function ri(n){var e=(i=Ja(n)).c,r=Ka(c=i.a),t=ni(c),o=ei(c),a=Ka(u=i.b),n=ni(u),i=ei(u),c=Ka(e),u=ni(e),e=ei(e);return Za({e6:z(xl,r,z(xl,a,c)),e7:z(xl,t,z(xl,n,u)),e8:z(xl,o,z(xl,i,e)),e9:z(Ml,r,z(Ml,a,c)),fa:z(Ml,t,z(Ml,n,u)),fb:z(Ml,o,z(Ml,i,e))})}function ti(n){return Cl(Ua(n))}function oi(n){return n}function ai(n){return Cl(oi(n))}function ii(n){return n<0?-n:n}function ci(n){var e=Ja(n),r=e.a,t=e.b;return{a:{cG:e=ai(N(zl,r,t,n=e.c)),cM:ti(r)},b:{cG:e,cM:ti(t)},c:{cG:e,cM:ti(n)}}}function ui(n){return n.J}function li(n){return n.aD}function fi(n){return n.b?N(Yl,n,R,0):Lt}function si(n){return!n}function di(n){return{J:z(co,function(n){return{a:3*n,b:3*n+1,c:3*n+2}},z(bt,0,Ar(n)-1)),aD:fi(po(z(co,function(n){return y([n.a,n.b,n.c])},n)))}}function vi(n){return{$:4,a:z(cf,n,R)}}function mi(n){return n}function bi(n){return N(_l,N(is,(e=n).e9,e.e6,.5),function(n){return N(is,n.fa,n.e7,.5)}(n),function(n){return N(is,n.fb,n.e8,.5)}(n));var e}function pi(n){return n.e8}function gi(n){return n.fb}function hi(n){return{a:z(cs,n.e9,function(n){return n.e6}(n)),b:z(cs,function(n){return n.fa}(n),function(n){return n.e7}(n)),c:z(cs,gi(n),pi(n))}}function xi(n){var e=(t=hi(n)).a,r=t.b,t=t.c;return{f3:Ua(bi(n)),gn:e/2,go:r/2,gp:t/2}}function Si(v){return function(d){return function(s){return function(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(n){var e=v.a,r=v.b,t=v.c,o=bs(f),t=ms({fP:o.fP,fR:o.fR*e,fS:o.fS*r,c0:o.c0*t});return m(d,s,t,l,u,c,i,a,n)}}}}}}}}}}function Mi(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:2,a:f,b:l,c:u,d:c,e:i,f:a,g:o,h:t,i:r,j:e,k:n}}}}}}}}}}}}function Pi(n){return(n=function(n){if(n.$){var u=n.c;return at($(function(n,e,r,t,o,a,i,c){return _(df,z(Ps,t,c),Rs,hs,u,{b:r,c:e,d:a,e:n,cS:i,f:o})}))}return it}(n)).$?af:{$:2,a:n.a}}function Ri(n){return ii(n)}function yi(n){return n}function Ci(n){return n=yi(n),Ns(n)||zs(n)||n<=0?$s:{$:0,a:n}}function Ti(n){return N(As,0,1,.04045<n?z(Fs,(n+.055)/1.055,2.4):n/12.92)}function wi(n){var e=function(n){return{a9:n.d,ba:n.c,dg:n.b,dQ:n.a}}(n),r=e.dg,n=e.ba;return N(Zl,Ti(e.dQ),Ti(r),Ti(n))}function Li(n){var e=n.fs,r=n.dx;return _(Vs,0,{$:0,a:wi(n.ee)},{$:0,a:N(As,0,1,e)},{$:0,a:N(As,0,1,r)},{$:0,a:0})}function $i(n){var e=y([P(Ls,{au:N(_s,1,1,0)}),P(Ls,{au:N(_s,1,-1,0)}),P(Ls,{au:N(_s,-1,1,0)}),P(Ls,{au:N(_s,-1,-1,0)})]),r={a:2.8,b:2,c:.5},t=z(ws,Tu,r),o=(o={ee:1===n.cW?N(Bs,43,142,228):N(Bs,255,165,0),fs:.5},Li({ee:o.ee,dx:0,fs:o.fs})),o=Ds(y([z(Ts,o,z(ws,Tu,r)),z(Cs,o,z(ws,z(Es,z(Us,-.3,Ea(Tu)),z(Es,z(Us,.5,La(Tu)),Tu)),{a:2.2,b:1.8,c:.5}))]));return z(Ws,Ci(1190),z(Qa,t,{ax:o,g:z(Mu,n.g,e)}))}function zi(n){return function(n){var e=n.fs,r=n.dx;return _(Vs,0,z(id,wi,n.ee),z(id,z(As,0,1),e),z(id,z(As,0,1),r),{$:0,a:0})}({ee:n.ee,dx:{$:0,a:0},fs:n.fs})}function Ni(n){var e=zi({ee:n,fs:{$:0,a:.25}}),n=h(function(n,e){return N(_s,n,e,0)});return Ys({ax:_(ad,e,z(n,-90,-90),z(n,-90,90),z(n,90,90),z(n,90,-90)),g:Gs})}function Di(n){return n.f3}function _i(n){return n.al}function Vi(n){var e=Da(_i(n)),n=Ma(Di(n));return{$:2,a:z(nl,Ya(n),function(n){var e=4.1887902047863905*z(Fs,n,3);return{eD:z(md,e,n),cM:bu,al:n,fO:e}}(e))}}function Ai(n){return bd(n)}function Fi(n){return hd(n)}function qi(n){return n}function Bi(){return{$:2,a:$(function(n,e,r,t,o,a,i,c){return _(df,z(Ps,!0,c),Ld,hs,wd,{aT:N(Zl,0,0,1),b:r,c:e,d:a,e:n,cS:i,f:o})})}}function ki(n){return n.ga}function Ei(n){var e=Ha(n);return{fR:n.fR/e,fS:n.fS/e,c0:n.c0/e}}function Wi(n){return z(Gd,n.dE,n.d8)}function Ui(n){var e=z(Su,Ni(n.cX),Od),n=z(pt,nv,n.av);return N(dt,h(function(n,e){return z(Su,N(Ed,Hd,-.7853981633974483,z(vd,N(_s,-6,6+4*n.g,3),$i(n))),e)}),e,n)}function Gi(n){return n}function Yi(n){return{aZ:0,P:z(pt,nv,n.av),bq:(r=(e={gz:Fd/10.8,gQ:-Jd}).gQ,t=e.gz,e=h(function(n,e){return y([{a:-t*n,b:t*e},{a:-t*n,b:-t*e},{a:t*n,b:t*e},{a:t*n,b:-t*e}])}),po(y([z(co,function(n){return{b$:N(_s,n.a,n.b,0),gO:1,fC:r}},po(y([y([{a:t,b:0},{a:-t,b:0},{a:0,b:t},{a:0,b:-t},{a:2.7*t,b:0},{a:2.7*-t,b:0},{a:4.1*t,b:0},{a:4.1*-t,b:0}]),z(e,4.05,1.75),z(e,3.2,.9),z(e,2.2,1.75),z(e,2.4,3.4),z(e,1,2)]))),z(co,function(n){return{b$:N(_s,n.a,n.b,0),gO:0,fC:r}},y([{a:0,b:3.6*t},{a:0,b:3.6*-t},{a:4*-t,b:3*t},{a:4*-t,b:3*-t},{a:4*t,b:3*t},{a:4*t,b:3*-t}]))]))),ar:{ba:0,bo:0},V:z(tv,!1,3),a5:300,q:z(Su,Ni(n.cX),Od)};var e,r,t}function Ii(n){return{fR:-n.fR,fS:-n.fS,c0:-n.c0}}function ji(n){return 1===n.$}function Hi(n){return 1===n.$}function Oi(n){return{gD:Ii(n.gD),gJ:n.gK,gK:n.gJ}}function Qi(n){if(0<ja(n)){var e=Ei(n),n=ii(e.fR)<.9?z(iu,e,wu):z(iu,e,Lu);return{a:n,b:z(iu,e,n)}}return{a:wu,b:Lu}}function Xi(g){return function(p){return function(b){return function(m){return function(v){return function(d){return function(s){return function(f){return function(l){return function(n){var e=4/(g.t*g.t*1e7*13),r=4/(13*g.t),t=z(qu,b.b9,v),o=z(qu,b.b9,l),a=z(qu,b.b9,s),i=z(qu,p.b9,f),c=z(qu,p.b9,d),u=z(qu,p.b9,m);return z(jr,_(Xv,Kv({a$:0,gD:u,a0:a}),g,p,b,{Z:1e6,ab:-1e6,ah:0,ai:0,M:r,I:12/13,U:e,N:bu,F:z(iu,a,u),G:z(iu,u,a)}),z(jr,_(Xv,Kv({a$:0,gD:c,a0:o}),g,p,b,{Z:1e6,ab:-1e6,ah:0,ai:0,M:r,I:12/13,U:e,N:bu,F:z(iu,o,c),G:z(iu,c,o)}),z(jr,_(Xv,Kv({a$:0,gD:i,a0:t}),g,p,b,{Z:1e6,ab:-1e6,ah:0,ai:0,M:r,I:12/13,U:e,N:bu,F:z(iu,t,i),G:z(iu,i,t)}),n)))}}}}}}}}}}function Zi(n){return n.b?at(n.a):it}function Ji(n){return 0<n.dr?at(n.dr):it}function Ki(n){return n.dE}function nc(n){return Sa(n.ck)}function ec(n){return-n}function rc(n){if(t=z(_t,ii((r=n).fR),z(_t,ii(r.fS),ii(r.c0)))){var e=r.c0/t,n=r.fS/t,r=r.fR/t,t=Au(r*r+n*n+e*e);return at({fR:r/t,fS:n/t,c0:e/t})}return it}function tc(n){return N(dt,h(function(n,e){return z(jr,n,e)}),R,n.fY)}function oc(n){return M(n,cd)}function ac(n){return n.gO?Zd:Xd}function ic(n){return Xn(function(n){return"script"==n?"p":n}(n))}function cc(n){function e(n){return wb(1e4*n)/100}var r=n.b,t=n.c,o=n.d;return t=y(["rgba(",zb(e(n.a)),"%,",zb(e(r)),"%,",zb(e(t)),"%,",zb(wb(1e3*o)/1e3),")"]),z(ft,"",t)}function uc(n){return n}function lc(n){return N(xs,{dq:n.dq,dR:n.dR,d6:n.d6},{bS:n.bS,b4:n.b4,cd:n.cd,ce:n.ce},{bS:n.bS,b4:n.b4,cd:n.cd,ce:n.ce})}function fc(n){return _(df,y([lc(n),D(kb,!1,!1,!1,!1)]),Yb,Ub,Gb,{})}function sc(n){return fc({bS:7680,dq:15,dR:8,b4:516,d6:z(Fs,2,n+4),cd:5386,ce:5386})}function dc(n){return qa(n)}function vc(n){return.5*n}function mc(n){return D(Eb,515,n.as,n.ao,n.an)}function bc(n){return ka(La(n))}function pc(n){return n.fN}function gc(e){var n=pc(e.eg),r={dE:dc(n),d7:function(n){return Ea(n)}(n),d8:function(n){return Wa(n)}(n),d9:ka(bc(n))},t=vi(e.et);if(1===(l=D(tp,r,1,it,y([t]))).$)return R;var o=l.a,a=z(mp,Tu,n),i=z(Dl,.99,z(xl,Ri(e.ek),ec(pi(o)))),c=hi(o),u=function(n){var e=n,r=z(_t,ii(e.fR),z(_t,ii(e.fS),ii(e.c0)));if(r){var t=e.c0/r,n=e.fS/r,e=e.fR/r;return Au(e*e+n*n+t*t)*r}return 0}(N(bp,c.a,c.b,c.c)),r=z(Dl,1.01,z(pd,u,ec(gi(o)))),l=z(fp,e.eg,{fW:e.fW,gi:r,gB:i}),o=(c=vp(l).e3)?Pa(ka(bc(n))):Ma(dc(n)),i=(r=function(){var n=e.fE;switch(n.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:n.a};case 4:return{a:4,b:n.a};default:return{a:5,b:0}}}()).a,n=r.b,r=z(Fb,e.ew,e.fQ),n=Os({eQ:0,eR:o.fR,eS:Wf(r),eT:e.fz,eU:0,eV:o.fS,eW:Uf(r),eX:Da(u),eY:0,eZ:o.c0,e_:Gf(r),e$:i,e0:0,e1:c,e2:0,e3:n}),f=C(Bb,n,a,l,op,t,{_:R,ak:R,am:R}),s=e.eL;switch(s.$){case 0:return po(y([N(_b,f._,{a:d=s.a,b:Db},Xb),N(_b,f.ak,up,Xb)]));case 1:var d=s.a;return po(y([N(_b,f._,up,Xb),y([ap]),N(_b,f.am,d.bX,Wb),y([sc(0)]),N(_b,f._,{a:d,b:Db},lp),N(_b,f.ak,up,Xb)]));default:var v=s.a,d=s.b;return po(y([N(_b,f._,{a:d,b:Db},Xb),y([ap]),z(Hb,f.am,v),N(dp,f._,d,Ar(v)),N(_b,f.ak,up,Xb)]))}}function hc(n){return z(pp,{ec:n.ec,ed:n.ed,eg:n.eg,ek:n.ek,ep:n.ep},y([{et:n.et,ew:n.ew,eL:n.eL,fE:n.fE,fQ:n.fQ}]))}function xc(n){return n}function Sc(n){return z(Sp,Ta(n),Ra(n).ax)}function Mc(n){return!n.$}function Pc(n){var e=function(n){var e=n,r=ii(e.c0),t=ii(e.fS),n=ii(e.fR);if(x(n,t)<1){if(x(n,r)<1){var o=Au(e.c0*e.c0+e.fS*e.fS);return{fR:0,fS:-e.c0/o,c0:e.fS/o}}o=Au(e.fS*e.fS+e.fR*e.fR);return{fR:-e.fS/o,fS:e.fR/o,c0:0}}if(x(t,r)<1){o=Au(e.c0*e.c0+e.fR*e.fR);return{fR:e.c0/o,fS:0,c0:-e.fR/o}}o=Au(e.fR*e.fR+e.fS*e.fS);return{fR:-e.fS/o,fS:e.fR/o,c0:0}}(n);return{a:e,b:{fR:n.fS*e.c0-n.c0*e.fS,fS:n.c0*e.fR-n.fR*e.c0,c0:n.fR*e.fS-n.fS*e.fR}}}function Rc(n){return z(Np,"click",Gt(n))}function yc(n){var e=vc(Ri(n.fM));return{dP:{$:0,a:_p(e)},fN:n.fN}}function Cc(n){var e=n.ct,r=n.cZ,t=n.cx,o=n.cl,a=n.cI,n=z(ft,"-",y([e,r]));return z(xp,y([z($b,"padding","4px 0")]),y([z(Bp,y([Gp("radio"),qp(n),Ep(e),Yp(r),Ap(o),z(Np,"change",z(Wt,a,Wp))]),R),z(kp,y([Fp(n)]),y([Up(t)]))]))}function Tc(n){return{fR:bd(n),fS:hd(n)}}function wc(n){return n}function Lc(n){return n.f2}function $c(n){return Os({eQ:n.fR,eR:n.cO,eS:0,eT:0,eU:n.fS,eV:n.cs,eW:0,eX:0,eY:n.c0,eZ:n.ci,e_:0,e$:0,e0:n.d1,e1:n.dN,e2:0,e3:0})}function zc(n){return e=wi(n),n=Wf(r=e),e=Uf(r),r=Gf(r),N(Vb,.4124*n+.3576*e+.1805*r,.2126*n+.7152*e+.0722*r,.0193*n+.1192*e+.9505*r);var e,r}function Nc(n){return n.d7}function Dc(n){return n.d8}function _c(n){return z(Gd,n.dE,n.d7)}function Vc(n){return z(Gd,n.dE,n.d9)}function Ac(n){var e={dE:n.bh,d7:Dc(n.gm),d8:z(Sg,Nc(e=n.gm),Dc(e)),d9:Nc(n.gm)};return N(Rg,Vc,n.bN,N(Mg,_c,ec(n.bQ),N(Mg,Wi,n.bI,e)))}function Fc(n){return n.b}qn["Browser.Events"]={b:on,c:Pe,d:wn,e:0,f:dn};var qc,Bc,kc,Ec,Wc,Uc,Gc,Yc,Ic,jc,Hc,Oc,Qc,Xc,Zc,Jc=En("Browser.Events"),Kc=s(function(n,e,r){return Jc(N(aa,n,e,r))}),nu=z(Kc,0,"keydown"),eu=z(Kc,0,"keyup"),ru=un,tu=h(function(n,e){return{$:2,a:n,b:e}}),ou=h(function(n,e){return{$:3,a:n,b:e}}),au=h(function(n,e){return{fR:n.fR+e.fR,fS:n.fS+e.fS,c0:n.c0+e.c0}}),iu=h(function(n,e){return{fR:n.fS*e.c0-n.c0*e.fS,fS:n.c0*e.fR-n.fR*e.c0,c0:n.fR*e.fS-n.fS*e.fR}}),cu=h(function(n,e){return{fR:n*e.fR,fS:n*e.fS,c0:n*e.c0}}),uu=h(function(n,e){return{fR:n.fR-e.fR,fS:n.fS-e.fS,c0:n.c0-e.c0}}),lu=l(function(n,e,r,t){r=z(uu,r,Sa(t.b9)),e=z(cu,n,e),r=z(iu,r,e);return P(t,{cp:z(au,t.cp,e),cY:z(au,t.cY,r)})}),fu=l(function(n,e,r,t){return 0<t.dr?D(lu,n,Pa(e),Ma(r),t):t}),su=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),du=h(function(n,e){return{$:0,a:n,b:e}}),vu=h(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fR,c=e.fS,u=e.c0,l=-a*u+r*c-t*i,n=-a*c+o*i-r*u,e=-a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fR:e*-a+u*-r+n*-o-l*-t,fS:n*-a+u*-t+l*-r-e*-o,c0:l*-a+u*-o+e*-t-n*-r}}),mu=h(function(n,e){return z(vu,n.b,z(uu,e,n.a))}),bu={fR:0,fS:0,c0:0},pu=h(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.a,c=e.b,n=e.c,e=e.d;return D(su,r*e+t*n-o*c+a*i,-r*n+t*e+o*i+a*c,r*c-t*i+o*e+a*n,-r*i-t*c-o*n+a*e)}),gu=h(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fR,c=e.fS,u=e.c0,l=a*u+r*c-t*i,n=a*c+o*i-r*u,e=a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fR:e*a+u*-r+n*-o-l*-t,fS:n*a+u*-t+l*-r-e*-o,c0:l*a+u*-o+e*-t-n*-r}}),hu=h(function(n,e){var r=n.b,t=e.b;return z(du,z(au,n.a,z(gu,r,e.a)),z(pu,r,t))}),xu=h(function(n,e){var r=Ra(e).g;return!r.$&&M(n,r.a)?D(fu,4e5,N(Eo,Ta,La,e),wa(e),e):e}),Su=h(function(n,e){var r=n,t=e,n=t.gj;if(n.b){e=n.b;return P(t,{fY:z(jr,P(r,{g:n.a}),t.fY),gj:e})}return P(t,{fY:z(jr,P(r,{g:t.gC}),t.fY),gC:t.gC+1})}),Mu=h(function(n,e){return{$:0,a:n,b:e}}),Pu={fR:0,fS:0,c0:0},Ru={fR:1,fS:0,c0:0},yu={fR:0,fS:0,c0:1},Cu=yu,Tu={dE:Pu,d7:Ru,d8:sn={fR:0,fS:1,c0:0},d9:Cu},wu={fR:1,fS:0,c0:0},Lu={fR:0,fS:1,c0:0},$u={fR:0,fS:0,c0:1},zu=y([wu,Lu,$u]),Nu={fR:-1,fS:0,c0:0},Du={fR:0,fS:-1,c0:0},_u={fR:0,fS:0,c0:-1},Vu=s(function(n,e,r){var t=r/2,o=e/2,a=n/2,i=n*e*r,c={fR:-a,fS:o,c0:t},u={fR:a,fS:o,c0:t},l={fR:a,fS:-o,c0:t},f={fR:-a,fS:-o,c0:t},s={fR:-a,fS:o,c0:-t},d={fR:a,fS:o,c0:-t},v={fR:a,fS:-o,c0:-t},t={fR:-a,fS:-o,c0:-t},n={eQ:i/12*(e*e+r*r),eR:0,eS:0,eU:0,eV:i/12*(n*n+r*r),eW:0,eY:0,eZ:0,e_:i/12*(e*e+n*n)};return{bR:y([{cG:_u,aD:y([s,d,v,t])},{cG:$u,aD:y([f,l,u,c])},{cG:Du,aD:y([l,f,t,v])},{cG:Lu,aD:y([d,s,c,u])},{cG:Nu,aD:y([t,f,c,s])},{cG:wu,aD:y([v,d,u,l])}]),eD:n,cM:bu,d4:zu,fG:zu,aD:y([t,v,d,s,f,l,u,c]),fO:i}}),Au=X,Fu=l(function(n,e,r,t){var o=t.c0,a=r.c0,i=e.c0,c=t.fS,u=r.fS,l=e.fS,f=t.fR,t=r.fR,r=e.fR,e=r+u+o;if(0<e){var s=2*Au(e+1);return z(du,n,D(su,(a-c)/s,(f-i)/s,(l-t)/s,.25*s))}if(0<x(r,u)&&0<x(r,o)){s=2*Au(1+r-u-o);return z(du,n,D(su,.25*s,(t+l)/s,(f+i)/s,(a-c)/s))}if(0<x(u,o)){s=2*Au(1+u-r-o);return z(du,n,D(su,(t+l)/s,.25*s,(c+a)/s,(f-i)/s))}s=2*Au(1+o-r-u);return z(du,n,D(su,(f+i)/s,(c+a)/s,.25*s,(l-t)/s))}),qu=h(function(n,e){return z(gu,n.b,e)}),Bu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=z(jr,z(qu,n,e.a),r);n=t,e=o,r=a}}),ku=h(function(n,e){return N(Bu,n,e,R)}),Eu=h(function(n,e){var r=n.a,t=n.b,o=t.a,a=t.b,i=t.c,c=t.d,u=e.fR,l=e.fS,f=e.c0,n=c*f+o*l-a*u,t=c*l+i*u-o*f,e=c*u+a*f-i*l,f=-o*u-a*l-i*f;return{fR:e*c+f*-o+t*-i-n*-a+r.fR,fS:t*c+f*-a+n*-o-e*-i+r.fS,c0:n*c+f*-i+e*-a-t*-o+r.c0}}),Wu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=z(jr,z(Eu,n,e.a),r);n=t,e=o,r=a}}),Uu=h(function(n,e){return N(Wu,n,e,R)}),Gu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a.aD,o=n,a=e.b,t=z(jr,{cG:z(qu,n,e.a.cG),aD:ht(z(Uu,n,t))},r);n=o,e=a,r=t}}),Yu=h(function(n,e){return{eQ:n.eQ*e.eQ+n.eR*e.eU+n.eS*e.eY,eR:n.eQ*e.eR+n.eR*e.eV+n.eS*e.eZ,eS:n.eQ*e.eS+n.eR*e.eW+n.eS*e.e_,eU:n.eU*e.eQ+n.eV*e.eU+n.eW*e.eY,eV:n.eU*e.eR+n.eV*e.eV+n.eW*e.eZ,eW:n.eU*e.eS+n.eV*e.eW+n.eW*e.e_,eY:n.eY*e.eQ+n.eZ*e.eU+n.e_*e.eY,eZ:n.eY*e.eR+n.eZ*e.eV+n.e_*e.eZ,e_:n.eY*e.eS+n.eZ*e.eW+n.e_*e.e_}}),Iu=h(function(n,e){n=Ca(n);return z(Yu,n,z(Yu,e,Ba(n)))}),ju=h(function(n,e){var r=e.aD,t=e.d4,o=e.fG,a=e.cM,i=e.fO,c=e.eD;return{bR:N(Gu,n,e.bR,R),eD:z(Iu,n,c),cM:z(Eu,n,a),d4:z(ku,n,t),fG:z(ku,n,o),aD:z(Uu,n,r),fO:i}}),Hu=D(su,0,0,0,1),Ou=z(du,bu,Hu),Qu={f1:0,gk:.3},Xu=h(function(n,e){return Au(N(dt,function(n){return _t(ja(n))},e*e,n.aD))}),Zu=h(function(n,e){var r=n.al;return z(_t,Ha(n.cM)+r,e)}),Ju=h(function(n,e){switch(n.$){case 0:return z(Xu,n.a,e);case 2:return z(Zu,n.a,e);case 1:return 340282347e30;default:return z(_t,e,Ha(n.a))}}),Ku=h(function(n,e){var r=e.cM;return{cG:z(qu,n,e.cG),cM:z(Eu,n,r)}}),nl=h(function(n,e){var r=e.al,t=e.fO;return{eD:e.eD,cM:z(Eu,n,e.cM),al:r,fO:t}}),el=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a,o=n,a=e.b,i=z(jr,function(){switch(t.$){case 0:return{$:0,a:z(ju,n,t.a)};case 1:return{$:1,a:z(Ku,n,t.a)};case 2:return{$:2,a:z(nl,n,t.a)};default:return{$:3,a:z(Eu,n,t.a)}}}(),r);n=o,e=a,r=i}}),rl=h(function(n,e){return N(el,n,e,R)}),tl=h(function(n,e){return{eQ:n.eQ+e.eQ,eR:n.eR+e.eR,eS:n.eS+e.eS,eU:n.eU+e.eU,eV:n.eV+e.eV,eW:n.eW+e.eW,eY:n.eY+e.eY,eZ:n.eZ+e.eZ,e_:n.e_+e.e_}}),ol={eQ:0,eR:0,eS:0,eU:0,eV:0,eW:0,eY:0,eZ:0,e_:0},al=l(function(n,e,r,t){var o=-n*r*t,a=-n*e*t,i=-n*e*r;return{eQ:n*(r*r+t*t),eR:i,eS:a,eU:i,eV:n*(t*t+e*e),eW:o,eY:a,eZ:o,e_:n*(e*e+r*r)}}),il=l(function(n,e,r,t){var o=n.a.fR,a=n.a.fS,i=n.a.c0,t=z(Iu,n,t),e=D(al,r,o-e.fR,a-e.fS,i-e.c0);return z(tl,t,e)}),cl=h(function(n,e){n=Ca(n);return z(Yu,Ba(n),z(Yu,e,n))}),ul=h(function(n,e){return{eQ:n*e.eQ,eR:n*e.eR,eS:n*e.eS,eU:n*e.eU,eV:n*e.eV,eW:n*e.eW,eY:n*e.eY,eZ:n*e.eZ,e_:n*e.e_}}),ll=h(function(n,e){var r=function(n){var e=N(dt,h(function(n,e){return e+Ia(n)}),0,n);return 0<e?N(dt,function(n){return au(z(cu,Ia(n)/e,function(){switch(n.$){case 0:return n.a.cM;case 3:return n.a;case 2:default:return n.a.cM}}()))},bu,n):bu}(n),t=Ya(r),o=ya(t),a=z(rl,o,n),r=z(hu,Ou,t),o=z(hu,r,o);return Oa({eb:.01,ch:bu,ef:N(dt,Ju,0,a),ck:t,H:e,cp:bu,g:-1,dh:ol,cv:ol,cw:0,eP:.01,dr:0,e4:Qu,dY:a,cY:bu,b9:r,c_:bu,d5:z(rl,o,n)})}),fl=h(function(n,e){n=N(dt,h(function(n,e){return z(jr,n,e)}),R,n);return z(ll,n,e)}),sl=l(function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}}),dl=l(function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}}),vl=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),ml=l(function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}}),bl=l(function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}}),pl=l(function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}}),gl=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),u=function(n){switch(n.$){case 0:return n;case 1:return D(gl,n.a,n.b,n.c,1);case 2:return D(sl,n.a,n.b,n.c,1);case 3:return D(dl,n.a,n.b,n.c,1);case 4:return D(vl,n.a,n.b,n.c,1);case 5:return D(pl,n.a,n.b,n.c,1);case 6:return D(ml,n.a,n.b,n.c,1);case 7:return D(bl,n.a,n.b,n.c,1);case 8:case 9:default:return n}},hl={$:0},xl=h(function(n,e){return z(_t,n,e)}),Sl=h(function(n,e){return x(n,e)<0?n:e}),Ml=h(function(n,e){return z(Sl,n,e)}),Pl=$(function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{e6:e,e7:t,e8:a,e9:n,fa:r,fb:o};var u=c.b,l=Xa(i(c.a));n=z(Ml,l.e9,n),e=z(xl,l.e6,e),r=z(Ml,l.fa,r),t=z(xl,l.e7,t),o=z(Ml,l.fb,o),a=z(xl,l.e8,a),i=i,c=u}}),Rl=s(function(n,e,r){e=Xa(n(e));return m(Pl,e.e9,e.e6,e.fa,e.e7,e.fb,e.e8,n,r)}),yl=h(function(n,e){return x(e,n)<1}),Cl=function(n){return new Float64Array([n.fR,n.fS,n.c0])},Tl=h(function(n,e){return{fR:e.fS*n.c0-e.c0*n.fS,fS:e.c0*n.fR-e.fR*n.c0,c0:e.fR*n.fS-e.fS*n.fR}}),wl=h(function(n,e){return{fR:e.fR-n.fR,fS:e.fS-n.fS,c0:e.c0-n.c0}}),Ll={fR:0,fS:0,c0:0},$l=h(function(n,e){var r=n,t=e,o=z(_t,ii(t.fR),z(_t,ii(t.fS),ii(t.c0)));if(o){n=t.c0/o,e=t.fS/o,t=t.fR/o,o=Au(t*t+e*e+n*n);return{fR:r*t/o,fS:r*e/o,c0:r*n/o}}return Ll})(1),zl=s(function(n,e,r){r=z(wl,e,r),e=z(wl,n,e);return $l(z(Tl,r,e))}),Nl=h(function(n,e){return{$:2,a:n,b:e}})({eq:3,eC:0,fd:4}),fn=s(function(n,e,r){return{a:n,b:e,c:r}}),Dl=h(function(n,e){return n*e}),_l=s(function(n,e,r){return{fR:n,fS:e,c0:r}}),Vl=(kn=z(Dl,-.5,1),tn=z(Dl,-.5,1),en=z(Dl,-.5,1),an=N(_l,en,tn,kn),on=z(Dl,.5,1),Pe=N(_l,en,tn,on),wn=z(Dl,.5,1),dn=N(_l,en,wn,kn),un=N(_l,en,wn,on),X=z(Dl,.5,1),en=N(_l,X,tn,kn),kn=N(_l,X,wn,kn),tn=N(_l,X,tn,on),on=N(_l,X,wn,on),u(function(n){if(n.b){var e=n.a,r=n.b,t=Nl(z(co,ci,n)),r=N(Rl,ri,e,r);return D(sl,r,n,t,0)}return hl}(y([N(fn,an,kn,en),N(fn,an,dn,kn),N(fn,Pe,tn,on),N(fn,Pe,on,un),N(fn,en,kn,on),N(fn,en,on,tn),N(fn,an,un,dn),N(fn,an,Pe,un),N(fn,an,en,tn),N(fn,an,tn,Pe),N(fn,dn,on,kn),N(fn,dn,un,on)])))),Al={$:0},Fl=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),ql=s(function(n,e,r){var t=e.a,o=e.b,e=n(e.c),o=n(o),n=n(t),t=ai(N(zl,n,o,e)),n={cG:t,cM:ti(n)},o={cG:t,cM:ti(o)},e={cG:t,cM:ti(e)};return z(jr,n,z(jr,o,z(jr,e,r)))}),Bl=l(function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?it:at(N(n,e.a,r.a,t.a))}),kl=4294967295>>>32-wt,El=A,Wl=s(function(n,e,r){for(;;){var t=z(El,kl&e>>>n,r);if(t.$)return z(El,kl&e,t.a);n=n-wt,e=e,r=t.a}}),Ul=h(function(n,e){var r=e.a,t=e.b,o=e.c,e=e.d;return n<0||-1<x(n,r)?it:-1<x(n,r>>>5<<5)?at(z(El,kl&n,e)):at(N(Wl,t,n,o))}),Gl=h(function(n,e){return z(Ul,n,li(e))}),Yl=s(function(n,e,r){for(;;){var t=z(Vt,32,n),o=t.a,t=t.b;if(x(Dt(o),32)<0)return z(qt,!0,{D:e,o:r,s:o});n=t,e=z(jr,{$:1,a:o},e),r=r+1}}),Il=h(function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}}),jl=h(function(n,e){return!z(Il,z(Mo,si,n),e)}),Hl=h(function(r,n){return N(io,h(function(n,e){return r(n)?z(jr,n,e):e}),R,n)}),Ol=h(function(n,e){function r(n){var e=n.a,r=n.b,n=n.c;return 0<=e&&x(e,t)<0&&0<=r&&x(r,t)<0&&0<=n&&x(n,t)<0}var t=n.a;return z(jl,r,e)?{J:e,aD:n}:{J:z(Hl,r,e),aD:n}}),Ql=s(function(n,e,r){return{$:3,a:n,b:e,c:r}})({eq:1,eC:3,fd:4}),Xl=h(function(n,e){e=Ma(e),n=Ma(n);return{a:{a:n.fR,b:n.fS,c:n.c0},b:{a:e.fR,b:e.fS,c:e.c0}}}),Zl=Ee,Jl=N(Zl,0,0,0),Kl=t(function(n,e,r,t,o,a){var i=a.a,c=a.b,u=a.c,a=z(Uo,z(Xl,n,e),o);if(a.$){o={cG:Jl,cM:ti(e)},e={cG:Jl,cM:ti(n)},n=u+1;return{a:z(jr,{a:r,b:u,c:n},z(jr,{a:r,b:n,c:t},i)),b:z(jr,o,z(jr,e,c)),c:u+2}}return{a:z(jr,{a:r,b:a.a,c:t},i),b:c,c:u}}),nf=r(function(n,e,r,t,o){for(;;){if(!r.b)return{a:o.a,b:ht(o.b)};var a=r.a,i=a.a,c=a.b,u=r.b,l=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,a=n,c=e,i=u,u=t+3,v=C(Kl,l,s,d,t,e,C(Kl,f,l,v,d,e,C(Kl,s,f,t,v,e,o)));n=a,e=c,r=i,t=u,o=v}}),ef=r(function(n,e,r,t,o){for(;;){if(!e.b)return{a:t,b:o,c:r};var a=e.a,i=a.a,c=a.b,u=e.b,l=n(a.c),f=n(c),s=n(i),a=r+2,c=r+1,i=r,s=N(da,z(Xl,s,l),a,N(da,z(Xl,l,f),c,N(da,z(Xl,f,s),i,o)));n=n,e=u,r=r+3,t=z(jr,{a:i,b:c,c:a},t),o=s}}),rf=s(function(n,e,r){var t,o=z(xa,function(n){var e=n.a,r=n.b,n=n.c;return D(Bl,s(function(n,e,r){return{a:n,b:e,c:r}}),z(Gl,e,t),z(Gl,r,t),z(Gl,n,t))},ui(t=r)),a=N(io,ql(e),R,o),r=_(ef,e,o,0,R,ua),o=_(nf,e,r.b,o,0,{a:r.a,b:R,c:r.c}),r=o.a,o=o.b,a=o.b?b(a,o):a;return N(Fl,n,z(Ol,fi(a),r),z(Ql,a,r))}),tf=(tr=function(n){switch(n.$){case 0:return Al;case 1:case 2:var e=n.a,r=z(co,Ja,n.b);return N(rf,e,Wr,di(r));case 3:return N(rf,e=n.a,Wr,n.b);case 4:case 5:case 6:case 7:var e;return N(rf,e=n.a,function(n){return n.cM},n.b);case 8:case 9:default:return Al}})(Vl),of={$:0},af=of,cf=h(function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=z(jr,r,e)}}),uf=h(function(n,e){return{$:1,a:n,b:e}}),lf={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"cn"}},ff=h(function(n,e){switch(e.$){case 0:return z(Tr,n,e);case 1:return z(wr,n,e);case 2:return z(Lr,n,e);case 3:return z($r,n,e);case 4:return z(zr,n,e);default:return z(Nr,n,e)}}),sf=h(function(n,e){switch(e.$){case 0:return z(fr,n,e);case 1:return z(sr,n,e);case 2:return z(dr,n,e);case 3:return z(vr,n,e);case 4:return z(mr,n,e);case 5:return z(br,n,e);case 6:return z(pr,n,e);case 7:return z(gr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}}),df=Te,vf=(Ee=function(n){return{$:5,a:n}})(1029),mf=Ee(1028),bf=s(function(n,e,r){return 1===e?z(jr,n?vf:mf,r):r}),pf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"cM",uv:"X"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},gf=l(function(u,n,l,f){return z(uf,n,$(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,f,c),pf,lf,l,{cn:u,b:r,c:e,d:a,e:n,f:o})}))}),hf={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aT"}},xf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"cM"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Sf=l(function(u,n,l,f){return z(uf,n,$(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,f,c),xf,hf,l,{aT:u,b:r,c:e,d:a,e:n,f:o})}))}),Mf=h(function(n,e){return{$:3,a:n,b:e}}),Pf={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aT",pointRadius:"cL",sceneProperties:"e"}},Rf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"cM"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"cL",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},yf=l(function(u,l,n,f){return z(Mf,n,$(function(n,e,r,t,o,a,i,c){return _(df,c,Rf,Pf,f,{aT:u,b:r,c:e,cL:l,d:a,e:n,f:o})}))}),Cf={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"be",sceneProperties:"e"}},Tf=je,wf=r(function(u,l,n,f,s){return z(uf,n,$(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,s,c),xf,Cf,f,{be:z(Tf,mi(l),u),b:r,c:e,d:a,e:n,f:o})}))}),Lf={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"be",pointRadius:"cL",sceneProperties:"e"}},$f=r(function(u,l,f,n,s){return z(Mf,n,$(function(n,e,r,t,o,a,i,c){return _(df,c,Rf,Lf,s,{be:z(Tf,mi(l),u),b:r,c:e,cL:f,d:a,e:n,f:o})}))}),zf={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ae",lights12:"bX",lights34:"cA",lights56:"cB",lights78:"cC",materialColor:"ds",sceneProperties:"e",viewMatrix:"f"}},Nf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cG",position:"cM"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Df=l(function(l,n,f,s){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,s,c),Nf,zf,f,{ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,ds:l,b:r,c:e,d:a,e:n,f:o})}))}),_f={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ae",lights12:"bX",lights34:"cA",lights56:"cB",lights78:"cC",materialColorTexture:"dt",normalMapTexture:"bn",sceneProperties:"e",useNormalMap:"by",viewMatrix:"f"}},Vf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cG",position:"cM",tangent:"fB",uv:"X"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Af=t(function(l,f,s,n,d,v){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,v,c),Vf,_f,d,{ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dt:l,b:r,c:e,bn:f,d:a,e:n,by:s,f:o})}))}),Ff={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"c4",constantBaseColor:"c7",constantMetallic:"c8",constantRoughness:"c9",enabledLights:"ae",lights12:"bX",lights34:"cA",lights56:"cB",lights78:"cC",metallicTexture:"dy",normalMapTexture:"bn",roughnessTexture:"dW",sceneProperties:"e",useNormalMap:"by",viewMatrix:"f"}},qf={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ee",enabledLights:"ae",lights12:"bX",lights34:"cA",lights56:"cB",lights78:"cC",metallic:"dx",roughness:"fs",sceneProperties:"e",viewMatrix:"f"}},Bf=t(function(l,f,s,n,d,v){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,v,c),Nf,qf,d,{ee:l,ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dx:s,b:r,c:e,d:a,fs:f,e:n,f:o})}))}),kf=h(function(n,e){return{$:1,a:n,b:e}}),Ef=h(function(n,e){if(e.$)return{a:e.a.H,b:1};return{a:n,b:0}}),Wf=function(n){return n[0]},Uf=function(n){return n[1]},Gf=function(n){return n[2]},Yf=Oe,If=D(Yf,0,0,0,0),jf=h(function(n,e){return e.$?{a:e.a.H,b:If}:{a:n,b:D(Yf,Wf(e=e.a),Uf(e),Gf(e),1)}}),Hf=h(function(n,e){var r,t={a:n,b:e};if(t.a.$)return z(kf,{a:r=t.a.a.H,b:If},z(Ef,r,e));if(t.b.$)return z(kf,z(jf,r=t.b.a.H,n),z(Ef,r,e));return{$:0,a:t.a.a}}),Of=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),Qf=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Xf=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),Zf=Ae,Jf=z(Zf,0,0),Kf=h(function(n,e){return e.$?{a:e.a.H,b:Jf}:{a:n,b:function(n){return z(Zf,n,1)}(e.a)}}),ns=l(function(n,e,r,t){var o,a=D(Xf,n,e,r,t);if(a.a.$)return D(Qf,{a:o=a.a.a.H,b:If},z(Kf,o,e),z(Kf,o,r),z(Ef,o,t));if(a.b.$)return D(Qf,z(jf,o=a.b.a.H,n),{a:o,b:Jf},z(Kf,o,r),z(Ef,o,t));if(a.c.$)return D(Qf,z(jf,o=a.c.a.H,n),z(Kf,o,e),{a:o,b:Jf},z(Ef,o,t));if(a.d.$)return D(Qf,z(jf,o=a.d.a.H,n),z(Kf,o,e),z(Kf,o,r),{a:o,b:1});return N(Of,a.a.a,a.b.a,a.c.a)}),es={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"c2",colorTexture:"cn",sceneProperties:"e"}},rs=r(function(u,l,n,f,s){return z(uf,n,$(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,s,c),pf,es,f,{c2:mi(l),cn:u,b:r,c:e,d:a,e:n,f:o})}))}),ts={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"cG",position:"cM",uv:"X"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},os=l(function(l,n,f,s){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,s,c),ts,_f,f,{ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dt:l,b:r,c:e,bn:l,d:a,e:n,by:0,f:o})}))}),as=a(function(l,f,s,d,v,m,n,b,p){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,p,c),ts,Ff,b,{c4:l,c7:f,c8:m,c9:d,ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dy:v,b:r,c:e,bn:l,d:a,dW:s,e:n,by:0,f:o})}))}),is=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),cs=h(function(n,e){return e-n}),us=h(function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.H;switch(e.$){case 0:case 1:case 2:case 3:case 4:return af;case 5:case 6:case 7:d=e.c,y=e.d;return D(gf,r,xi(R=e.a),d,y);case 8:case 9:default:return af}}else{var t=n.b.a;switch(e.$){case 0:return af;case 1:case 2:case 3:case 4:case 5:case 6:case 7:d=e.c,y=e.d;return D(Sf,t,xi(R=e.a),d,y);case 8:case 9:d=e.c;return D(Sf,t,xi(R=e.a),d,0);default:d=e.d;return D(yf,t,e.b,xi(R=e.a),d)}}case 1:if(n.b.$){r=n.b.a.H,a=n.c;switch(e.$){case 0:case 1:case 2:case 3:case 4:return af;case 5:case 6:case 7:d=e.c,y=e.d;return _(rs,r,a,xi(R=e.a),d,y);case 8:case 9:default:return af}}else{var o=n.b.a,a=n.c;switch(e.$){case 0:return af;case 1:case 2:case 3:case 4:case 5:case 6:case 7:d=e.c,y=e.d;return _(wf,o,a,xi(R=e.a),d,y);case 8:case 9:d=e.c;return _(wf,o,a,xi(R=e.a),d,0);default:d=e.d;return _($f,o,a,e.b,xi(R=e.a),d)}}case 2:var i=z(Hf,n.b,n.c);if(i.$){var c=i.a,u=c.a,c=i.b,l=c.a,f=c.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return af;case 6:d=e.c,v=e.d;return D(os,u,xi(R=e.a),d,v);case 7:d=e.c,v=e.d;return C(Af,u,l,f,xi(R=e.a),d,v);case 8:case 9:default:return af}}else{var s=i.a;switch(e.$){case 0:case 1:return af;case 2:var d=e.c,v=e.d;return D(Df,s,xi(R=e.a),d,v);case 3:return af;case 4:var d=e.c,v=e.d;return D(Df,s,xi(R=e.a),d,v);case 5:return af;case 6:case 7:d=e.c,v=e.d;return D(Df,s,xi(R=e.a),d,v);case 8:case 9:default:return af}}default:c=D(ns,n.b,n.c,n.d,n.e);if(c.$){var i=c.a,m=i.a,b=i.b,i=c.b,p=i.a,g=i.b,i=c.c,h=i.a,x=i.b,i=c.d,l=i.a,f=i.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return af;case 6:d=e.c,y=e.d;return T(as,m,b,p,g,h,x,xi(R=e.a),d,y);case 7:R=e.a,d=e.c,y=e.d;return function(h){return function(g){return function(p){return function(b){return function(m){return function(v){return function(d){return function(s){return function(n){return function(f){return function(l){return z(uf,n,$(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,l,c),Vf,Ff,f,{c4:h,c7:g,c8:v,c9:b,ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dy:m,b:r,c:e,bn:d,d:a,dW:p,e:n,by:s,f:o})}))}}}}}}}}}}}(m)(b)(p)(g)(h)(x)(l)(f)(xi(R))(d)(y);case 8:case 9:default:return af}}else{var S=c.a,M=c.b,P=c.c;switch(e.$){case 0:case 1:return af;case 2:d=e.c,y=e.d;return C(Bf,S,M,P,xi(R=e.a),d,y);case 3:return af;case 4:d=e.c,y=e.d;return C(Bf,S,M,P,xi(R=e.a),d,y);case 5:return af;case 6:case 7:var R,d=e.c,y=e.d;return C(Bf,S,M,P,xi(R=e.a),d,y);case 8:case 9:default:return af}}}}),ls=h(function(n,e){return{$:5,a:n,b:e}}),fs=h(function(n,e){return{eG:M(n.eG,e.eG),u:n.u*e.u+n.v*e.x+n.w*e.A,v:n.u*e.v+n.v*e.y+n.w*e.B,w:n.u*e.w+n.v*e.z+n.w*e.C,x:n.x*e.u+n.y*e.x+n.z*e.A,y:n.x*e.v+n.y*e.y+n.z*e.B,z:n.x*e.w+n.y*e.z+n.z*e.C,A:n.A*e.u+n.B*e.x+n.C*e.A,B:n.A*e.v+n.B*e.y+n.C*e.B,C:n.A*e.w+n.B*e.z+n.C*e.C,Q:e.Q+(n.Q*e.u+n.R*e.x+n.S*e.A)*e.cR,R:e.R+(n.Q*e.v+n.R*e.y+n.S*e.B)*e.cR,S:e.S+(n.Q*e.w+n.R*e.z+n.S*e.C)*e.cR,cR:n.cR*e.cR}}),ss=h(function(n,e){var r=e;switch(r.$){case 0:return af;case 5:var t=r.b,o=z(fs,r.a,n);return z(ls,o,t);case 1:case 3:case 2:default:return z(ls,n,r)}}),ds=h(function(n,e){return z(ss,function(n){var e=Ua(qa(n)),r=Pa(La(n)),t=Pa(Wa(n)),o=Pa(Ea(n));return{eG:Fa(n),u:o.fR,v:o.fS,w:o.c0,x:t.fR,y:t.fS,z:t.c0,A:r.fR,B:r.fS,C:r.c0,Q:e.fR,R:e.fS,S:e.c0,cR:1}}(n),e)}),vs=h(function(n,e){var r=n.a,t=n.b,o=n.c,n=e.f3;return{f3:{fR:r*n.fR,fS:t*n.fS,c0:o*n.c0},gn:r*e.gn,go:t*e.go,gp:o*e.gp}}),ms=function(n){return new Float64Array([n.fR,n.fS,n.c0,n.fP])},bs=function(n){return{fR:n[0],fS:n[1],c0:n[2],fP:n[3]}},ps=h(function(n,e){switch(e.$){case 0:return of;case 5:return z(ls,e.a,z(ps,n,e.b));case 1:var r=e.b;return z(uf,z(vs,n,e.a),z(Si,n,r));case 3:return e;case 2:return{$:2,a:z(Si,n,r=e.a)};default:r=e.a;return{$:4,a:z(co,ps(n),r)}}}),gs=h(function(n,e){return z(ps,n,e)}),hs={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},xs=s(function(n,e,r){var t=n.dR,o=n.dq,a=n.d6,i=h(function(n,e){return e(n)}),c=h(function(n,e){return e(n)}),n=function(n){return z(Eo,i(n.b4),z(Eo,c(n.bS),z(Eo,c(n.cd),c(n.ce))))};return z(n,r,z(n,e,N(Mi,t,o,a)))}),Ss=N(xs,{dq:0,dR:0,d6:15},{bS:7680,b4:519,cd:7680,ce:7683},{bS:7680,b4:519,cd:7680,ce:7682}),Ms=N(xs,{dq:0,dR:0,d6:15},{bS:7680,b4:519,cd:7680,ce:7682},{bS:7680,b4:519,cd:7680,ce:7683}),Ps=h(function(n,e){return z(jr,n?Ms:Ss,e)}),Rs={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"cG",position:"cM"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cS",viewMatrix:"f"}},ys=l(function(n,e,r,t){r=z(us,r,Vl),r=(e={a:n,b:e}).a?e.b?vi(y([r,Pi(tf)])):r:e.b?Pi(tf):af,e=Na(t);return z(ds,za(t),z(gs,{a:e.a,b:e.b,c:e.c},r))}),Cs=h(function(n,e){return D(ys,!0,!1,n,e)}),Ts=h(function(n,e){return D(ys,!0,!0,n,e)}),ws=h(function(n,e){return{fX:$a(n),ep:{a:Ri(e.a),b:Ri(e.b),c:Ri(e.c)}}}),Ls={aF:0,au:Pu,aU:it,aV:0,aW:0,bs:0,W:0,cV:0,bv:0},$s={$:1},zs=function(n){return n===1/0||n===-1/0},Ns=J,Ds=vi,_s=s(function(n,e,r){return{fR:n,fS:e,c0:r}}),Vs=r(function(n,e,r,t,o){return{$:3,a:n,b:e,c:r,d:t,e:o}}),As=s(function(n,e,r){return x(r,n)<0?n:0<x(r,e)?e:r}),Fs=W,qs=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),Bs=s(function(n,e,r){return D(qs,n/255,e/255,r/255,1)}),ks=h(function(n,e){return{fR:e.fR+n.fR,fS:e.fS+n.fS,c0:e.c0+n.c0}}),Es=h(function(n,e){return{dE:z(ks,n,qa(e)),d7:Ea(e),d8:Wa(e),d9:La(e)}}),Ws=h(function(n,e){var r=e;if(n.$)return Oa(P(r,{dr:0}));e=n.a,n=r.dY;return!n.b||!n.b.b&&1===n.a.$?r:Oa(P(r,{dr:e}))}),Us=h(function(n,e){return{fR:n*e.fR,fS:n*e.fS,c0:n*e.c0}}),Gs={$:2},Ys=fl(y([{$:1,a:{cG:$u,cM:bu}}])),Is=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return{e6:e,e7:t,e8:a,e9:n,fa:r,fb:o};var c=i.a,u=i.b,l=c.fR,f=c.fS,c=c.c0;n=z(Sl,l,n),e=z(_t,l,e),r=z(Sl,f,r),t=z(_t,f,t),o=z(Sl,c,o),a=z(_t,c,a),i=u}}),js=h(function(n,e){var r=n.fR,t=n.fS,n=n.c0;return S(Is,r,r,t,t,n,n,e)}),Hs={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cN"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"az",sceneProperties:"e",viewMatrix:"f"}},Os=function(n){var e=new Float64Array(16);return e[0]=n.eQ,e[1]=n.eU,e[2]=n.eY,e[3]=n.e0,e[4]=n.eR,e[5]=n.eV,e[6]=n.eZ,e[7]=n.e1,e[8]=n.eS,e[9]=n.eW,e[10]=n.e_,e[11]=n.e2,e[12]=n.eT,e[13]=n.eX,e[14]=n.e$,e[15]=n.e3,e},Qs=l(function(n,e,r,t){t=Ma(t),r=Ma(r),e=Ma(e),n=Ma(n);return Os({eQ:n.fR,eR:e.fR,eS:r.fR,eT:t.fR,eU:n.fS,eV:e.fS,eW:r.fS,eX:t.fS,eY:n.c0,eZ:e.c0,e_:r.c0,e$:t.c0,e0:0,e1:0,e2:0,e3:0})}),Xs=(Te=h(function(n,e){return{$:0,a:n,b:e}}))({eq:1,eC:0,fd:6})(y([{cN:N(Zl,0,0,0)},{cN:N(Zl,1,0,1)},{cN:N(Zl,1,1,2)},{cN:N(Zl,0,1,3)}])),Zs={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cN"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"az",sceneProperties:"e",viewMatrix:"f"}},Js={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cN"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"az",sceneProperties:"e",viewMatrix:"f"}},Ks={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cN"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"az",sceneProperties:"e",viewMatrix:"f"}},nd=r(function(r,C,T,w,L){var n=z(js,C,y([T,w,L])),n=xi(n);return z(uf,n,function(){switch(r.$){case 0:if(r.b.$){var u=r.b.a.H;return $(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,0,c),Ks,lf,Xs,{cn:u,b:r,c:e,d:a,az:D(Qs,C,T,w,L),e:n,f:o})})}var l=r.b.a;return $(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,0,c),Hs,hf,Xs,{aT:l,b:r,c:e,d:a,az:D(Qs,C,T,w,L),e:n,f:o})});case 1:if(r.b.$){u=r.b.a.H,s=r.c;return $(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,0,c),Ks,es,Xs,{c2:mi(s),cn:u,b:r,c:e,d:a,az:D(Qs,C,T,w,L),e:n,f:o})})}var f=r.b.a,s=r.c;return $(function(n,e,r,t,o,a,i,c){return _(df,N(bf,t,0,c),Hs,Cf,Xs,{c2:s,be:z(Tf,mi(s),f),b:r,c:e,d:a,az:D(Qs,C,T,w,L),e:n,f:o})});case 2:var n=z(Hf,r.b,r.c);if(n.$){var e=n.a,d=e.a,e=n.b,v=e.a,m=e.b;return $(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,0,c),Js,_f,Xs,{ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dt:d,b:r,c:e,bn:v,d:a,az:D(Qs,C,T,w,L),e:n,by:m,f:o})})}var b=n.a;return $(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,0,c),Zs,zf,Xs,{ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,ds:b,b:r,c:e,d:a,az:D(Qs,C,T,w,L),e:n,f:o})});default:e=D(ns,r.b,r.c,r.d,r.e);if(e.$){var n=e.a,p=n.a,g=n.b,n=e.b,h=n.a,x=n.b,n=e.c,S=n.a,M=n.b,n=e.d,v=n.a,m=n.b;return $(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,0,c),Js,Ff,Xs,{c4:p,c7:g,c8:M,c9:x,ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dy:S,b:r,c:e,bn:v,d:a,az:D(Qs,C,T,w,L),dW:h,e:n,by:m,f:o})})}var P=e.a,R=e.b,y=e.c;return $(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return _(df,N(bf,t,0,c),Zs,qf,Xs,{ee:P,ae:i,bX:u.bX,cA:u.cA,cB:u.cB,cC:u.cC,dx:y,b:r,c:e,d:a,az:D(Qs,C,T,w,L),fs:R,e:n,f:o})})}}())}),ed=(Ee=y([{aM:z(Zf,0,1)},{aM:z(Zf,1,1)},{aM:z(Zf,2,1)},{aM:z(Zf,3,1)},{aM:z(Zf,0,-1)},{aM:z(Zf,1,-1)},{aM:z(Zf,2,-1)},{aM:z(Zf,3,-1)}]),je=y([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),z(Ql,Ee,je)),rd={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aM"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"az",sceneProperties:"e",shadowLight:"cS",viewMatrix:"f"}},td=l(function(u,l,f,s){return{$:2,a:$(function(n,e,r,t,o,a,i,c){return _(df,z(Ps,t,c),rd,hs,ed,{b:r,c:e,d:a,az:D(Qs,u,l,f,s),e:n,cS:i,f:o})})}}),od=o(function(n,e,r,t,o,a,i){r=_(nd,r,t,o,a,i),e={a:n,b:e};return e.a?e.b?vi(y([r,D(td,t,o,a,i)])):r:e.b?D(td,t,o,a,i):af}),ad=r(function(n,e,r,t,o){return S(od,!0,!1,n,e,r,t,o)}),id=h(function(n,e){return e.$?{$:1,a:e.a}:{$:0,a:n(e.a)}}),cd={$:1},ud=h(function(n,e){return{f3:e,al:Ri(n)}}),ld=h(function(n,e){return z(ud,e,n)}),fd={al:2},sd=(A={ee:N(Bs,140,142,141),fs:.5},Li({ee:A.ee,dx:1,fs:A.fs})),Oe=Wr,dd=h(function(n,e){return z(du,n,e.b)}),vd=h(function(n,e){var r=e,e=z(hu,r.b9,ya(r.ck)),e=z(hu,z(dd,Ma(n),e),r.ck);return P(r,{b9:e,d5:z(rl,e,r.dY)})}),md=h(function(n,e){e*=2*n/5*e;return{eQ:e,eR:0,eS:0,eU:0,eV:e,eW:0,eY:0,eZ:0,e_:e}}),Ae=function(n){return fl(y([Vi(n)]))},bd=G,pd=h(function(n,e){return e+n}),gd=h(function(n,e){return n/e}),hd=Y,xd=r(function(n,e,r,t,o){for(;;){var a=t(e/r),a=z(jr,a,o);if(M(e,n))return a;n=n,e=e-1,r=r,t=t,o=a}}),J=h(function(n,e){return n<1?R:_(xd,0,n,n,e,R)}),Sd=h(function(n,e){var r=n.cM,t=n.X,o=t.a,t=t.b;return z(jr,{cG:ai(n.cG),cM:ti(r),X:z(Zf,o,t)},e)}),Md=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Za({e6:e,e7:t,e8:a,e9:n,fa:r,fb:o});var c=i.a,u=i.b,l=Gf(c.cM),f=Uf(c.cM),c=Wf(c.cM);n=z(Sl,n,c),e=z(_t,e,c),r=z(Sl,r,f),t=z(_t,t,f),o=z(Sl,o,l),a=z(_t,a,l),i=u}}),Pd=h(function(n,e){var r=Gf(n.cM),t=Uf(n.cM),n=Wf(n.cM);return S(Md,n,n,t,t,r,r,e)}),Rd=h(function(n,e){var r=n,n=e,e=bd(n);return{fR:e*bd(r),fS:e*hd(r),c0:hd(n)}}),yd=(W=z(bt,0,71),Ee=z(J,72,z(is,0,6.283185307179586)),qc=Ct(36),Bc=z(bt,0,qc-1),kc=z(J,qc,z(is,1.5707963267948966,-1.5707963267948966)),Ee=fi(po(z(co,function(e){return z(co,function(n){return{cG:qi(z(Rd,e,n)),cM:N(_l,z(Dl,Ai(n)*Ai(e),1),z(Dl,Ai(n)*Fi(e),1),z(Dl,Fi(n),1)),X:{a:z(gd,e,6.283185307179586),b:z(gd,z(pd,1.5707963267948966,n),3.141592653589793)}}},kc)},Ee))),Ec=h(function(n,e){return n*(qc+1)+e}),W=po(z(co,function(o){return po(z(co,function(n){var e=z(Ec,o+1,n),r=z(Ec,o,n),t=z(Ec,o+1,n+1),n=z(Ec,o,n+1);return y([{a:n,b:t,c:e},{a:n,b:e,c:r}])},Bc))},W)),u(function(n){var e=N(Xr,Sd,R,li(n));if(e.b){var r=e.a,t=e.b,e=z(Ql,e,ui(n)),t=z(Pd,r,t);return D(ml,t,n,e,0)}return hl}(z(Ol,Ee,W)))),Cd=U,je=h(function(n,e){for(;;){var r=z(Cd,144,2*n+3),t=z(Cd,144,2*n+2),o=2*n+1,a=2*n,r=z(jr,{a:144,b:a,c:t},z(jr,{a:a,b:r,c:t},z(jr,{a:a,b:o,c:r},z(jr,{a:o,b:145,c:r},e))));if(!n)return r;n=n-1,e=r}}),Td=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),G=h(function(n,e){for(;;){var r=N(Td,0,6.283185307179586,n/72),r=z(jr,{cg:r,cH:0,cP:1},z(jr,{cg:r,cH:1,cP:1},e));if(!n)return r;n=n-1,e=r}}),wd=(Y=z(G,71,y([{cg:0,cH:0,cP:0},{cg:0,cH:1,cP:0}])),J=z(je,71,R),z(Ql,Y,J)),Ld={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"cg",offsetScale:"cH",radiusScale:"cP"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cS",viewMatrix:"f"}},$d=h(function(n,e){return z(ss,function(n){n=oi(n);return{eG:!0,u:1,v:0,w:0,x:0,y:1,z:0,A:0,B:0,C:1,Q:n.fR,R:n.fS,S:n.c0,cR:1}}(n),e)}),zd=l(function(n,e,r,t){r=z(us,r,yd),r=(e={a:n,b:e}).a?e.b?vi(y([r,Bi()])):r:e.b?Bi():af,e=_i(t);return z($d,z(wl,Pu,Di(t)),z(gs,{a:e,b:e,c:e},r))}),Ee=h(function(n,e){return D(zd,!0,!0,n,e)}),Nd=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),Dd=s(function(n,e,r){return{$:2,a:n,b:e,c:r}}),_d=h(function(n,e){return{$:0,a:n,b:e}}),Vd=function(n){switch(n.$){case 0:return z(_d,n.a,n.b);case 1:return N(Nd,n.a,n.b,n.c);case 2:return N(Dd,n.a,n.b,n.c);default:return _(Vs,n.a,n.b,n.c,n.d,n.e)}},W=h(function(n,e){return P(e,{e4:n})}),je=(U=z(ld,Pu,fd.al),G=z(Ee,Vd(sd),U),z(vd,N(_s,0,0,Da(fd.al)),z(Ws,Ci(1),z(W,Oe({f1:.8,gk:.3}),z(Ae,U,{ax:G,g:cd}))))),Ad=s(function(n,e,r){return{fR:n,fS:e,c0:r}}),Y=40,Fd=161,J=131,qd=s(function(n,e,r){var t=n,o=r,a=.5*e,i=bd(a),c=hd(a),u=t.dE,l=o.fR-u.fR,f=o.fS-u.fS,s=o.c0-u.c0,d=t.ga,v=d.fR*c,n=i*v,r=v*v,e=d.fS*c,a=i*e,o=v*e,t=e*e,c=d.c0*c,i=i*c,v=v*c,e=e*c,c=c*c;return{fR:u.fR+(1-2*(t+c))*l+2*(o-i)*f+2*(v+a)*s,fS:u.fS+2*(o+i)*l+(1-2*(r+c))*f+2*(e-n)*s,c0:u.c0+2*(v-a)*l+2*(e+n)*f+(1-2*(r+t))*s}}),Bd=h(function(n,e){var r=.5*n,n=hd(r),r=bd(r),e=Ei(e);return D(su,e.fR*n,e.fS*n,e.c0*n,r)}),kd=s(function(n,e,r){var t=r.b;return z(du,r.a,z(pu,z(Bd,e,n),t))}),Ed=s(function(n,e,r){var t=r,o=z(hu,t.b9,ya(t.ck)),r=N(qd,n,e,Sa(o)),o=N(kd,Pa(ki(n)),function(n){return n}(e),z(dd,Ma(r),o)),o=z(hu,o,t.ck);return P(t,{cv:z(cl,o,t.dh),b9:o,d5:z(rl,o,t.dY)})}),Wd=h(function(n,e){var r=e.b;return z(du,z(au,n,e.a),r)}),Ud=h(function(n,e){var r=e,e=z(hu,r.b9,ya(r.ck)),e=z(hu,z(Wd,function(n){return n}(n),e),r.ck);return P(r,{b9:e,d5:z(rl,e,r.dY)})}),Gd=h(function(n,e){return{ga:e,dE:n}}),Ee=z(Gd,Pu,Ru),Ae=(W=h(function(n,e){return N(_s,n,e,0)}),Oe=Fd/2,z(Ud,N(Ad,0,0,Y),N(Ed,Ee,3.141592653589793,Ys({ax:_(ad,Vd(sd),z(W,-Oe,-Oe),z(W,-Oe,Oe),z(W,Oe,Oe),z(W,Oe,-Oe)),g:Gs})))),U={fY:R,f5:R,f6:R,gj:R,ey:bu,gC:0,gN:Lt},G={fR:0,fS:0,c0:-1},Yd=z(Gd,Pu,sn),Id=h(function(n,e){n=z(ws,Tu,{a:e,b:n,c:.1});return N(Ed,Yd,1.5707963267948966,z(Qa,n,{ax:z(Cs,Vd(sd),n),g:Gs}))}),jd=h(function(n,e){var r=n.d9,t=n.d8,n=n.d7;return{fR:n.fR*e.fR+t.fR*e.fS+r.fR*e.c0,fS:n.fS*e.fR+t.fS*e.fS+r.fS*e.c0,c0:n.c0*e.fR+t.c0*e.fS+r.c0*e.c0}}),Ee=s(function(n,t,e){var r=z(Ud,N(Ad,0,0,e/2),z(Id,t,e)),o={a:5,b:10},a=o.a,i=o.b,o=z(Gd,N(_s,a,0,a),Ru),c=z(co,function(n){var e=90/i*n,r=N(Ad,bd(3.141592653589793*e/180)*a,0,-hd(3.141592653589793*e/180)*a);return function(n){return N(Ed,Wi(Ta(n)),(e-90)/180*3.141592653589793,n)}((n=z(Ud,N(Ad,a,0,a),z(Id,t,2)),z(Ud,z(jd,Ta(n),r),n)))},z(co,kr,z(bt,1,i-1))),u=z(co,Ud(N(Ad,0,0,e-2*a)),z(co,z(Ed,o,3.141592653589793),c));switch(n){case 0:return z(jr,r,u);case 1:return z(jr,r,c);case 2:return z(jr,r,b(c,u));default:return y([r])}}),Hd=z(Gd,Pu,Cu),Oe=(W={aG:15,m:.08*J,h:.17*J},Oe=2*Au(2*z(Fs,10,2)),W=po(y([z(co,Ud(N(Ad,0,J/4+W.h/4,0)),N(Ee,2,J/2-W.h/2,Y)),z(co,Ud(N(Ad,0,-J/4-W.h/4,0)),N(Ee,2,J/2-W.h/2,Y)),z(co,Ud(N(Ad,0,0,W.m)),N(Ee,0,W.h,Y-W.m)),z(co,Ud(N(Ad,-W.aG,0,0)),N(Ee,2,W.h,W.m)),y([N(Ed,Hd,1.5707963267948966,z(Ud,N(Ad,-W.h/2,W.aG/2,W.m/2),z(Id,W.aG,W.m))),N(Ed,Hd,-1.5707963267948966,z(Ud,N(Ad,-W.h/2,-W.aG/2,W.m/2),z(Id,W.aG,W.m))),N(Ed,Yd,1.5707963267948966,z(Ud,N(Ad,-W.m,0,-W.aG/2),z(Id,W.h,W.aG)))])])),po(y([z(co,Ud(N(Ad,Fd/2,0,0)),z(co,z(Ed,Hd,3.141592653589793),W)),z(co,Ud(N(Ad,Fd/2-10,-J/2+10,0)),z(co,z(Ed,Hd,2.356194490192345),N(Ee,2,Oe,Y))),z(co,Ud(N(Ad,0,-J/2,0)),z(co,z(Ed,Hd,1.5707963267948966),N(Ee,2,Fd,Y))),z(co,Ud(N(Ad,-Fd/2+10,-J/2+10,0)),z(co,z(Ed,Hd,.7853981633974483),N(Ee,2,Oe,Y))),z(co,Ud(N(Ad,-Fd/2,0,0)),W),z(co,Ud(N(Ad,-Fd/2+10,J/2-10,0)),z(co,z(Ed,Hd,-.7853981633974483),N(Ee,2,Oe,Y))),z(co,Ud(N(Ad,0,J/2,0)),z(co,z(Ed,Hd,-1.5707963267948966),N(Ee,2,Fd,Y))),z(co,Ud(N(Ad,Fd/2-10,J/2-10,0)),z(co,z(Ed,Hd,-2.356194490192345),N(Ee,2,Oe,Y)))]))),Y=s(function(n,e,r){return P(r,{ey:z(cu,function(n){return n}(n),Pa(e))})}),Od=z(Su,je,z(Su,Ae,(U=N(Y,9.807,G,U),N(dt,Su,U,Oe)))),Qd=45,Xd=100,Zd=12,Jd=1e4,Kd={c6:!1,br:!1,a4:0,W:0},nv=h(function(n,e){return{aQ:Qd,bb:Kd,bO:e.a,bi:0,g:n,cW:e.b}}),ev={$:4},rv=ra(y([{a:"ArrowLeft",b:{$:2,a:-1}},{a:"ArrowRight",b:{$:2,a:1}},{a:"ArrowUp",b:{$:3,a:1}},{a:"ArrowDown",b:{$:3,a:-1}},{a:" ",b:U={$:0}},{a:"Shift",b:Oe={$:1}},{a:"c",b:ev}])),tv=h(function(n,e){return{$:0,a:n,b:e}}),ov=yo(R),av=h(function(n,e){return M(n,e)}),iv=h(function(n,e){return ja(z(uu,n,e))}),cv=h(function(n,e){var r=z(iv,Sa(n.b9),Sa(e.b9)),t=n.ef+e.ef;return 0<t*t-r&&!!(n.dr+e.dr)}),uv=h(function(n,e){return n.fR*e.fR+n.fS*e.fS+n.c0*e.c0}),lv=l(function(n,e,r,t){for(;;){if(!e.b)return r;var o=e.a,a=e.b,i=z(uv,o.cG,n);t=0<t-i?(n=n,e=a,r=o,i):(n=n,e=a,r=r,t)}}),fv=h(function(n,e){if(n.b){var r=n.a;return at(D(lv,e,n.b,r,z(uv,r.cG,e)))}return it}),sv=s(function(n,e,r){return{fR:e.fR+n*(r.fR-e.fR),fS:e.fS+n*(r.fS-e.fS),c0:e.c0+n*(r.c0-e.c0)}}),dv=r(function(n,e,r,t,o){var a=z(uv,n,r)+e,e=z(uv,n,t)+e;return a<0?z(jr,e<0?t:N(sv,a/(a-e),r,t),o):e<0?z(jr,t,z(jr,N(sv,a/(a-e),r,t),o)):o}),vv=l(function(n,e,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;if(!a.b)return N(n,o,e,r);var i=n,c=e,o=N(n,o,a.a,r);n=i,e=c,r=o,t=a}}),mv=s(function(n,e,r){if(r.b&&r.b.b)return D(vv,n,r.a,e,r);return e}),bv=h(function(n,e){var r=n.aD,t=n.cG;return N(mv,h(function(n,e){e=Ei(z(uu,n,e)),e=z(iu,t,e),n=-z(uv,n,e);return z(mv,z(dv,e,n),R)}),e,r)}),pv=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,d=z(uv,e.cG,f)+r;o=0<d?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(c=r,u=s,l=z(jr,{gD:a=n,gJ:{fR:f.fR-d*(i=e).cG.fR,fS:f.fS-d*e.cG.fS,c0:f.c0-d*e.cG.c0},gK:f},o),n=a,e=i,r=c,t=u,l)}}),gv=l(function(n,e,r,t){var o=e.aD,e=(e=n.aD).b?e.a:bu,e=-z(uv,n.cG,e);return _(pv,r,n,e,z(bv,n,o),t)}),hv=l(function(n,e,r,t){for(;;){if(!t.b)return{cE:r,dz:e};var o=t.a,o=o.fR*n.fR+o.fS*n.fS+o.c0*n.c0;n=n,e=0<e-o?o:e,r=0<r-o?r:o,t=t.b}}),xv=s(function(n,e,r){e=D(hv,r,340282347e30,-340282347e30,e.aD),r=D(hv,r,340282347e30,-340282347e30,n.aD),n=e.cE-r.dz,e=r.cE-e.dz;return e<0||n<0?it:at(0<e-n?n:e)}),Sv=o(function(n,e,r,t,o,a,i){for(;;){if(!t.b)return 0<z(uv,z(uu,e.cM,n.cM),a)?at(Ii(a)):at(a);var c=t.a,u=t.b;if(o.b){var l=o.b,f=z(iu,c,o.a);if(0<ii((c=f).fR)-1e-6||0<ii(c.fS)-1e-6||0<ii(c.c0)-1e-6){c=Ei(f),f=N(xv,n,e,c);if(1===f.$)return it;f=f.a;i=f-i<0?(n=n,e=e,r=r,t=t,o=s=l,a=c,f):(n=n,e=e,r=r,t=t,o=s=l,a=a,i)}else n=n,e=e,r=r,t=t,o=s=l,a=a,i=i}else{var s=r;n=n,e=e,r=r,t=u,o=s,a=a,i=i}}}),Mv=r(function(n,e,r,t,o){for(;;){if(!r.b)return S(Sv,n,e,e.d4,n.d4,e.d4,t,o);var a=r.a,i=r.b,c=N(xv,n,e,a);if(1===c.$)return it;c=c.a;o=c-o<0?(n=n,e=e,r=i,t=a,c):(n=n,e=e,r=i,t=t,o)}}),Pv=h(function(n,e){return _(Mv,n,e,b(n.fG,e.fG),bu,340282347e30)}),Rv=s(function(n,e,r){var t=z(Pv,n,e);if(t.$)return r;var o=t.a,t=Ii(o),o=z(fv,n.bR,o);if(o.$)return r;o=o.a,e=z(fv,e.bR,t);return e.$?r:D(gv,o,e.a,t,r)}),yv=l(function(n,e,r,t){for(;;){if(!e.b)return t;var o,a,i,c,u=e.a.aD,l=e.a.cG,f=e.b,u=z(uv,l,z(uu,u.b?u.a:bu,n));if(u<0)return it;t=x(u,r)<0?(a=f,c=at({gD:Ii(l),gJ:o=n,gK:z(au,n,z(cu,i=u,l))}),n=o,e=a,r=i,c):(n=o=n,e=a=f,r=i=r,c=t)}}),Cv=l(function(n,e,r,t){r=D(yv,e,r.bR,340282347e30,it);return r.$?t:z(jr,n(r.a),t)}),Tv=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,d=(f.fR-e.fR)*r.fR+(f.fS-e.fS)*r.fS+(f.c0-e.c0)*r.c0;o=0<d?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(i=e,u=s,l=z(jr,(a=n)({gD:c=r,gJ:{fR:f.fR-d*r.fR,fS:f.fS-d*r.fS,c0:f.c0-d*r.c0},gK:f}),o),n=a,e=i,r=c,t=u,l)}}),wv=l(function(n,e,r,t){return _(Tv,n,e.cM,e.cG,r.aD,t)}),Lv=l(function(n,e,r,t){var o=e.cM,e=e.cG,o=(r.fR-o.fR)*e.fR+(r.fS-o.fS)*e.fS+(r.c0-o.c0)*e.c0;return 0<o?t:z(jr,n({gD:e,gJ:{fR:r.fR-o*e.fR,fS:r.fS-o*e.fS,c0:r.c0-o*e.c0},gK:r}),t)}),$v=l(function(n,e,r,t){var o=e.cG,a=e.cM,e=r.cM,r={fR:e.fR-r.al*o.fR,fS:e.fS-r.al*o.fS,c0:e.c0-r.al*o.c0},a=(r.fR-a.fR)*o.fR+(r.fS-a.fS)*o.fS+(r.c0-a.c0)*o.c0;return 0<a?t:z(jr,n({gD:o,gJ:{fR:r.fR-a*o.fR,fS:r.fS-a*o.fS,c0:r.c0-a*o.c0},gK:r}),t)}),zv=h(function(n,e){n=z(uu,n,e),e=Ha(n);return{fR:n.fR/e,fS:n.fS/e,c0:n.c0/e}}),Nv=l(function(n,e,r,t){for(;;){if(n(r))return r;if(!t.b)return r;var o=t.b,a=z(e,t.a,r);n=n,e=e,r=a,t=o}}),Dv=s(function(n,e,r){function t(n){var e=ja(n);return e-o<0?{a:at(n),b:e}:r}var o=r.b,a=z(uu,e,n),i=Ei(a),c=-z(uv,n,i);if(c<0)return{$:0,a:t(n)};if(0<c*c-ja(a))return{$:0,a:t(e)};c=z(au,n,z(cu,c,i)),i=ja(c);return i-o<0?{$:1,a:{a:c,b:i}}:{$:0,a:r}}),_v=h(function(n,e){return D(Nv,Hi,h(function(n,e){return e.$?e:N(Dv,n.a,n.b,e.a)}),e,n)}),Vv=h(function(n,e){return N(dt,_v,{$:0,a:{a:it,b:n*n}},e)}),Av=h(function(n,e){return{$:1,a:n,b:e}}),Fv=h(function(n,o){return N(mv,s(function(n,e,r){var t=z(iu,o,z(uu,e,n));return z(uv,t,n)<0?z(jr,{a:n,b:e},r):r}),R,n)}),qv=l(function(n,e,r,t){var o=r.b?-z(uv,e,r.a):-1;if(o-n<0&&0<o){r=z(Fv,r,e);return r.b?{$:0,a:z(jr,r,t)}:z(Av,e,o)}return{$:0,a:t}}),Bv=s(function(r,t,n){var e=n.bR,n=h(function(n,e){return{a:at(z(uu,r,z(cu,e,n))),b:t-e}}),o=h(function(n,e){return{a:at(z(au,n,r)),b:t-Au(e)}}),e=D(Nv,ji,h(function(n,e){if(e.$)return e;e=e.a;return D(qv,t,n.cG,(n=n.aD,N(dt,h(function(n,e){return z(jr,z(uu,n,r),e)}),R,n)),e)}),{$:0,a:R},e);return e.$?z(n,e.a,e.b):function(n){var e=z(Vv,t,n);if(e.$){n=e.a;return z(o,n.a,n.b)}if(e.a.a.$)return e.a;e=e.a;return z(o,e.a.a,e.b)}(e.a)}),kv=l(function(n,e,r,t){var o=e.cM,e=N(Bv,o,e.al,r),r=e.a,e=e.b;if(r.$)return t;r=r.a,o=z(zv,r,o);return z(jr,n({gD:o,gJ:{fR:r.fR+e*o.fR,fS:r.fS+e*o.fS,c0:r.c0+e*o.c0},gK:r}),t)}),Ev=h(function(n,e){var r=e.c0-n.c0,t=e.fS-n.fS,n=e.fR-n.fR;return Au(n*n+t*t+r*r)}),Wv=l(function(n,e,r,t){var o=e.al,a=e.cM,i=z(zv,r,a),e=z(Ev,r,a)-o;return 0<e?t:z(jr,n({gD:i,gJ:z(au,a,z(cu,o-e,i)),gK:r}),t)}),Uv=s(function(n,e,r){var t=e.al,o=n.al,a=e.cM,i=n.cM,e=z(Ev,a,i)-o-t,n=z(zv,a,i);return 0<e?r:z(jr,{gD:n,gJ:z(au,i,z(cu,o-e,n)),gK:z(au,a,z(cu,-t,n))},r)}),Gv=s(function(n,e,r){switch(n.$){case 0:var t=n.a;switch(e.$){case 0:return N(Rv,t,e.a,r);case 1:return D(wv,Oi,e.a,t,r);case 2:return D(kv,Oi,e.a,t,r);default:return D(Cv,Oi,e.a,t,r)}case 1:var o=n.a;switch(e.$){case 1:return r;case 0:return D(wv,Wr,o,e.a,r);case 2:return D($v,Wr,o,e.a,r);default:return D(Lv,Wr,o,e.a,r)}case 2:var a=n.a;switch(e.$){case 1:return D($v,Oi,e.a,a,r);case 0:return D(kv,Wr,a,e.a,r);case 2:return N(Uv,a,e.a,r);default:return D(Wv,Wr,a,e.a,r)}default:var i=n.a;switch(e.$){case 1:return D(Lv,Oi,e.a,i,r);case 0:return D(Cv,Wr,i,e.a,r);case 2:return D(Wv,Oi,e.a,i,r);default:return r}}}),Yv=r(function(n,e,r,t,o){for(;;)if(r.b){var a=n,i=e,c=r.b,u=t,l=N(Gv,n,r.a,o);n=a,e=i,r=c,t=u,o=l}else{if(!e.b)return o;n=a=e.a,e=i=e.b,t=u=r=c=t,o=l=o}}),Iv=h(function(n,e){return n.b?_(Yv,n.a,n.b,e,e,R):R}),jv=l(function(e,n,r,t){for(;;)if(r.b){var o=r.a,a=e,i=n,c=l=r.b,u=function(){if(z(cv,e,o)){var n=z(Iv,e.d5,o.d5);return n.b?z(jr,{fZ:e,f_:o,f7:n},t):t}return t}();e=a,n=i,r=c,t=u}else{if(!n.b)return t;var l;e=a=n.a,n=i=l=n.b,r=c=l,t=u=t}}),Hv=r(function(n,e,r,t,o){var a=e.gJ,i=e.gK,c=e.gD,u=o.M,l=o.I,e=o.F,o=o.G,e=(n+1)*(z(uv,t.c_,c)-z(uv,r.c_,c))+z(uv,t.ch,o)+z(uv,r.ch,e);return-((i.fR-a.fR)*c.fR+(i.fS-a.fS)*c.fS+(i.c0-a.c0)*c.c0)*u-e*l}),Ov=s(function(n,e,r){var t=r.F,o=r.G;return n.cw+e.cw+t.fR*(n.cv.eQ*t.fR+n.cv.eR*t.fS+n.cv.eS*t.c0)+t.fS*(n.cv.eU*t.fR+n.cv.eV*t.fS+n.cv.eW*t.c0)+t.c0*(n.cv.eY*t.fR+n.cv.eZ*t.fS+n.cv.e_*t.c0)+o.fR*(e.cv.eQ*o.fR+e.cv.eR*o.fS+e.cv.eS*o.c0)+o.fS*(e.cv.eU*o.fR+e.cv.eV*o.fS+e.cv.eW*o.c0)+o.c0*(e.cv.eY*o.fR+e.cv.eZ*o.fS+e.cv.e_*o.c0)+r.U}),Qv=l(function(n,e,r,t){var o=t.F,a=t.N,i=t.G,t=0<r.dr?n:bu,n=0<e.dr?n:bu;return a.fR*(r.cw*r.cp.fR+t.fR)+a.fS*(r.cw*r.cp.fS+t.fS)+a.c0*(r.cw*r.cp.c0+t.c0)-(a.fR*(e.cw*e.cp.fR+n.fR)+a.fS*(e.cw*e.cp.fS+n.fS)+a.c0*(e.cw*e.cp.c0+n.c0))+o.fR*(e.cv.eQ*e.cY.fR+e.cv.eR*e.cY.fS+e.cv.eS*e.cY.c0)+o.fS*(e.cv.eU*e.cY.fR+e.cv.eV*e.cY.fS+e.cv.eW*e.cY.c0)+o.c0*(e.cv.eY*e.cY.fR+e.cv.eZ*e.cY.fS+e.cv.e_*e.cY.c0)+i.fR*(r.cv.eQ*r.cY.fR+r.cv.eR*r.cY.fS+r.cv.eS*r.cY.c0)+i.fS*(r.cv.eU*r.cY.fR+r.cv.eV*r.cY.fS+r.cv.eW*r.cY.c0)+i.c0*(r.cv.eY*r.cY.fR+r.cv.eZ*r.cY.fS+r.cv.e_*r.cY.c0)}),Xv=r(function(n,e,r,t,o){return{eu:{Z:o.Z,ab:o.ab,ah:N(n,r,t,o)-e.t*D(Qv,e.ey,r,t,o),ai:1/N(Ov,r,t,o),M:o.M,I:o.I,U:o.U,N:o.N,F:o.F,G:o.G},fx:0}}),Zv=l(function(n,e,r,t){var o=4/(n.t*n.t*1e7*13),a=4/(13*n.t),i=z(zv,Sa(r.b9),Sa(e.b9)),c=t/2,t=z(cu,c,i),c=z(cu,-c,i);return jr(_(Xv,z(Hv,0,{gD:i,gJ:z(au,t,Sa(e.b9)),gK:z(au,c,Sa(r.b9))}),n,e,r,{Z:1e6,ab:-1e6,ah:0,ai:0,M:a,I:12/13,U:o,N:i,F:z(iu,i,t),G:z(iu,c,i)}))}),Jv=s(function(n,e,r){var t=r.F,o=r.N,r=r.G;return t.fR*n.ch.fR+t.fS*n.ch.fS+t.c0*n.ch.c0-(o.fR*n.c_.fR+o.fS*n.c_.fS+o.c0*n.c_.c0)+(o.fR*e.c_.fR+o.fS*e.c_.fS+o.c0*e.c_.c0)+(r.fR*e.ch.fR+r.fS*e.ch.fS+r.c0*e.ch.c0)}),Kv=l(function(n,e,r,t){var o=n.gD,a=n.a0,i=n.a$,c=t.M,n=t.I,t=N(Jv,e,r,t);return-(i-z(uv,o,a))*c-t*n}),nm=t(function(n,e,r,t,o,a){var i=z(qu,r.b9,o),c=z(qu,e.b9,t),u=4/(n.t*n.t*1e7*13),l=4/(13*n.t),o=i,t=i,i=Qi(c),c=i.a,i=i.b;return z(jr,_(Xv,Kv({a$:0,gD:c,a0:t}),n,e,r,{Z:1e6,ab:-1e6,ah:0,ai:0,M:l,I:12/13,U:u,N:bu,F:z(iu,t,c),G:z(iu,c,t)}),z(jr,_(Xv,Kv({a$:0,gD:i,a0:o}),n,e,r,{Z:1e6,ab:-1e6,ah:0,ai:0,M:l,I:12/13,U:u,N:bu,F:z(iu,o,i),G:z(iu,i,o)}),a))}),em=t(function(e,r,t,n,o,a){var i=4/(e.t*e.t*1e7*13),c=4/(13*e.t),u=z(qu,t.b9,o),l=z(qu,r.b9,n);return N(dt,function(n){return jr(_(Xv,z(Hv,0,{gD:n,gJ:z(au,Sa(r.b9),l),gK:z(au,Sa(t.b9),u)}),e,r,t,{Z:1e6,ab:-1e6,ah:0,ai:0,M:c,I:12/13,U:i,N:n,F:z(iu,n,l),G:z(iu,u,n)}))},a,zu)}),rm=l(function(n,e,r,t){switch(t.$){case 0:return _(em,n,e,r,t.a,t.b);case 1:var o=t.b,a=t.d;return z(Eo,_(em,n,e,r,t.a,t.c),_(nm,n,e,r,o,a));case 2:var i=t.b,c=t.c,u=t.d,l=t.f,o=t.g,a=t.h;return z(Eo,_(em,n,e,r,t.a,t.e),T(Xi,n,e,r,i,l,c,o,u,a));default:return D(Zv,n,e,r,t.a)}}),tm=l(function(n,e,r,t){return{f$:e.g,f0:r.g,dd:N(dt,N(rm,n,e,r),R,t)}}),om=s(function(n,e,r){var t=r.I;return-N(Jv,n,e,r)*t}),am=o(function(n,e,r,t,o,a,i){var c=4/(n.t*n.t*1e7*13),u=4/(13*n.t),l=z(uu,a.gK,Sa(o.b9)),f=z(uu,a.gJ,Sa(t.b9)),s=Qi(a.gD),d=s.a,s=s.b;return z(jr,_(Xv,z(Hv,r,a),n,t,o,{Z:1e6,ab:0,ah:0,ai:0,M:u,I:12/13,U:c,N:a.gD,F:z(iu,a.gD,f),G:z(iu,l,a.gD)}),z(jr,_(Xv,om,n,t,o,{Z:e,ab:-e,ah:0,ai:0,M:u,I:12/13,U:c,N:d,F:z(iu,d,f),G:z(iu,l,d)}),z(jr,_(Xv,om,n,t,o,{Z:e,ab:-e,ah:0,ai:0,M:u,I:12/13,U:c,N:s,F:z(iu,s,f),G:z(iu,l,s)}),i)))}),im=h(function(n,e){e=.5*(n+e),e=1+e-ii(1-e);return.25*(e+ii(e))}),cm=h(function(n,e){return z(im,n.f1,e.f1)}),um=h(function(n,e){return z(im,n.gk,e.gk)}),lm=h(function(n,e){var r=e.fZ,t=e.f_,o=e.f7,a=0<r.cw+t.cw?z(um,r.e4,t.e4)*n.ez/(r.cw+t.cw):0,e=z(cm,r.e4,t.e4);return{f$:r.g,f0:t.g,dd:N(dt,_(am,n,a,e,r,t),R,o)}}),fm=h(function(n,e){return z(kt,n,function(){return e})}),sm=F,dm=l(function(n,e,r,t){var o=kl&e>>>n,a=z(El,o,t);if(a.$){var i=N(sm,kl&e,r,a.a);return N(sm,o,{$:1,a:i},t)}a=D(dm,n-wt,e,r,a.a);return N(sm,o,{$:0,a:a},t)}),vm=s(function(n,e,r){var t=r.a,o=r.b,a=r.c,i=r.d;return n<0||-1<x(n,t)?r:-1<x(n,t>>>5<<5)?D(Rt,t,o,a,N(sm,kl&n,e,i)):D(Rt,t,o,D(dm,o,n,e,a),i)}),mm=h(function(n,e){if(e.b){var r={c5:P(e.a,{g:-1}),bz:0,bA:0,bB:0,bD:0,bE:0,bF:0},n=z(fm,n,r);return{a:N(dt,function(n){return z(vm,n.g,{c5:n,bz:0,bA:0,bB:0,bD:0,bE:0,bF:0})},n,e),b:at(r)}}return{a:Lt,b:it}}),bm=r(function(n,e,r,t,o){for(;;){if(!o.b)return{fZ:n,f_:e,dc:t,dd:r};var a=o.a.fx,i=o.a.eu,c=o.b,u=e.c5.cv,l=n.c5.cv,f=i.F,s=i.N,d=i.G,v=i.ab,m=i.Z,b=i.ai*(i.ah-(f.fR*n.bD+f.fS*n.bE+f.c0*n.bF-(s.fR*n.bz+s.fS*n.bA+s.c0*n.bB)+(s.fR*e.bz+s.fS*e.bA+s.c0*e.bB)+(d.fR*e.bD+d.fS*e.bE+d.c0*e.bF))-i.U*a),v=a+b-v<0?v-a:0<a+b-m?m-a:b,m=v*n.c5.cw,b=v*e.c5.cw;n=0<n.c5.dr?{c5:n.c5,bz:n.bz-m*s.fR,bA:n.bA-m*s.fS,bB:n.bB-m*s.c0,bD:n.bD+(l.eQ*f.fR+l.eR*f.fS+l.eS*f.c0)*v,bE:n.bE+(l.eU*f.fR+l.eV*f.fS+l.eW*f.c0)*v,bF:n.bF+(l.eY*f.fR+l.eZ*f.fS+l.e_*f.c0)*v}:n,e=0<e.c5.dr?{c5:e.c5,bz:e.bz+b*s.fR,bA:e.bA+b*s.fS,bB:e.bB+b*s.c0,bD:e.bD+(u.eQ*d.fR+u.eR*d.fS+u.eS*d.c0)*v,bE:e.bE+(u.eU*d.fR+u.eV*d.fS+u.eW*d.c0)*v,bF:e.bF+(u.eY*d.fR+u.eZ*d.fS+u.e_*d.c0)*v}:e,r=z(jr,{eu:i,fx:a+v},r),t=t+ii(v),o=c}}),pm=t(function(n,e,r,t,o,a){for(;;)if(t.b){var i,c=t.a.f$,u=t.a.f0,l=t.a.dd,f=t.b,s=c-o.c5.g&&o.c5.dr?N(vm,o.c5.g,o,a):a,d=c-o.c5.g?z(Ul,c,a):at(o);a=d.$?(n=v=n,e=m=e,r=b=r,t=p=f,o=o,s):(i=d.a,(d=z(Ul,u,s)).$?(n=v=n,e=m=e,r=b=r,t=p=f,o=o,s):(n=v=n,e=m=(l=_(bm,i,d.a,R,e,l)).dc,r=b=z(jr,{f$:c,f0:u,dd:l.dd},r),t=p=f,o=l.fZ,0<l.f_.c5.dr?N(vm,u,l.f_,s):s))}else{if(!n||e-1e-6<0)return N(vm,o.c5.g,o,a);var v=n-1,m=0,b=R,p=ht(r);n=v,e=m,r=b,t=p,o=o,a=a}}),gm=B,hm=h(function(e,n){var r=n.d,t=function(n){return n.$?{$:1,a:z(gm,e,n.a)}:{$:0,a:z(gm,t,n.a)}};return D(Rt,n.a,n.b,z(gm,t,n.c),z(gm,e,r))}),xm=h(function(n,e){var r=n.fR,t=n.fS,o=n.c0,a=e.b,i=a.a,c=a.b,n=a.c,a=a.d;return z(du,e.a,D(su,i+.5*(r*a+t*n-o*c),c+.5*(t*a+o*i-r*n),n+.5*(o*a+r*c-t*i),a+.5*(-r*i-t*c-o*n)))}),Sm=h(function(n,e){var r=n.t,t=n.ey,o=e.c5,a=e.bz,i=e.bA,c=e.bB,u=e.bD,l=e.bE,n=e.bF,e=z(Fs,1-o.eP,r),i={fR:(t.fR+o.cp.fR*o.cw)*r+o.c_.fR*e+a,fS:(t.fS+o.cp.fS*o.cw)*r+o.c_.fS*e+i,c0:(t.c0+o.cp.c0*o.cw)*r+o.c_.c0*e+c},t=Ha(i),e=t&&o.ef&&0<=t*r-o.ef?z(cu,o.ef/(t*r),i):i,c=z(Fs,1-o.eb,r),t={fR:(o.cv.eQ*o.cY.fR+o.cv.eR*o.cY.fS+o.cv.eS*o.cY.c0)*r+o.ch.fR*c+u,fS:(o.cv.eU*o.cY.fR+o.cv.eV*o.cY.fS+o.cv.eW*o.cY.c0)*r+o.ch.fS*c+l,c0:(o.cv.eY*o.cY.fR+o.cv.eZ*o.cY.fS+o.cv.e_*o.cY.c0)*r+o.ch.c0*c+n},c=(u=z(Wd,{fR:e.fR*r,fS:e.fS*r,c0:e.c0*r},z(xm,{fR:t.fR*r,fS:t.fS*r,c0:t.c0*r},o.b9)),l=u.a,c=Au((n=(c=u.b).a)*n+(e=c.b)*e+(r=c.c)*r+(u=c.d)*u),z(du,l,D(su,n/c,e/c,r/c,u/c)));return{eb:o.eb,ch:t,ef:o.ef,ck:o.ck,H:o.H,cp:bu,g:o.g,dh:o.dh,cv:z(cl,c,o.dh),cw:o.cw,eP:o.eP,dr:o.dr,e4:o.e4,dY:o.dY,cY:bu,b9:c,c_:i,d5:z(rl,c,o.dY)}}),Mm=s(function(e,n,r){n=z(hm,function(n){return 0<n.c5.g+1&&0<n.c5.dr?z(Sm,e,n):n.c5},n);return P(r,{fY:z(Hl,function(n){return 0<n.g+1},Zr(n)),gN:n})}),Pm=h(function(n,e){var o={t:n,ey:e.ey,ez:Ha(e.ey)},r=N(dt,h(function(n,e){return z(jr,z(lm,o,n),e)}),R,e.f6),n=z(mm,e.gC,e.fY),a=n.a,n=n.b,r=N(dt,h(function(n,e){var r=n.f0,t=n.f5,n=z(Ul,n.f$,a);if(1===n.$)return e;n=n.a,r=z(Ul,r,a);return 1===r.$?e:z(jr,D(tm,o,n.c5,r.a.c5,t),e)}),r,e.f5),n=n.$?a:C(pm,20,0,R,r,n.a,a);return N(Mm,o,n,e)}),Rm=h(function(n,e){return z(Pm,Gi(n),function(r){return P(r,{f6:function(){var n=r.fY;if(n.b){var e=n.b;return D(jv,n.a,e,e,R)}return R}()})}(e))}),ym=h(function(r,n){return P(n,{fY:N(dt,h(function(n,e){return z(jr,function(n){return P(r(n),{g:n.g})}(n),e)}),R,n.fY)})}),Cm={em:at(-30),da:4.4,db:2.3,bc:G,cq:Ru,df:5,du:1e5,dv:.6,dA:0,al:.5,dU:sn,dV:.01,bw:.3,d$:160},Tm=h(function(n,e){var r=n.d9,t=n.d8,n=n.d7;return{fR:n.fR*e.fR+t.fR*e.fS+r.fR*e.c0,fS:n.fS*e.fR+t.fS*e.fS+r.fS*e.c0,c0:n.c0*e.fR+t.c0*e.fS+r.c0*e.c0}}),wm=l(function(n,e,r,t){var o=z(uu,r,Sa(t.b9)),a=z(cu,n,e),i=z(iu,o,a),c=i.fR,u=i.fS,r=i.c0,n=t.ch,e=t.cv,o=t.c_,i=t.cw;return P(t,{ch:{fR:n.fR+e.eQ*c+e.eR*u+e.eS*r,fS:n.fS+e.eU*c+e.eV*u+e.eW*r,c0:n.c0+e.eY*c+e.eZ*u+e.e_*r},c_:{fR:o.fR+i*a.fR,fS:o.fS+i*a.fS,c0:o.c0+i*a.c0}})}),Lm=l(function(n,e,r,t){return 0<t.dr?D(wm,n,Pa(e),Ma(r),t):t}),$m=s(function(n,e,r){return x(n,e)<1?N(As,n,e,r):N(As,e,n,r)}),zm=h(function(n,e){var r=e.c0-n.c0,t=e.fS-n.fS,e=e.fR-n.fR,n=z(_t,ii(e),z(_t,ii(t),ii(r)));if(n){r=r/n,t=t/n,e=e/n;return Au(e*e+t*t+r*r)*n}return 0}),Nm=h(function(n,e){return e.fR*n.fR+e.fS*n.fS+e.c0*n.c0}),Dm=h(function(e,n){return z(Il,function(n){return M(n,e)},n)}),_m=h(function(t,n){var e=h(function(n,e){var r=e.a,e=e.b;return t(n)?{a:z(jr,n,r),b:e}:{a:r,b:z(jr,n,e)}});return N(io,e,{a:R,b:R},n)}),Vm=h(function(n,e){var r=e,e=z(_m,z(Eo,Wr,n),r.fY),n=e.a,e=e.b,t=N(dt,z(Eo,function(n){return n.g},jr),R,e);return P(r,{fY:n,f5:N(dt,h(function(n,e){return z(Dm,n.f$,t)||z(Dm,n.f0,t)?e:z(jr,n,e)}),R,r.f5),gj:b(t,r.gj)})}),Am=h(function(n,e){return x(e,n)<0}),Fm=h(function(n,e){var r=n.dE,t=n.d9,o=n.d8,n=n.d7;return{fR:r.fR+e.fR*n.fR+e.fS*o.fR+e.c0*t.fR,fS:r.fS+e.fR*n.fS+e.fS*o.fS+e.c0*t.fS,c0:r.c0+e.fR*n.c0+e.fS*o.c0+e.c0*t.c0}}),qm=h(function(n,e){return z(Gd,z(Fm,n,e.dE),z(Tm,n,e.ga))}),Bm=h(function(n,e){return z(vu,n.b,e)}),km=h(function(n,e){var i=n.ga,c=n.gl;return N(dt,h(function(n,e){var r=n.cG,t=n.aD,o=t.b?t.a:bu,n=z(uv,i,r);if(n<0){o=z(uu,o,c),n=z(uv,r,o)/n;if(n<0)return e;var a={fR:i.fR*n+c.fR,fS:i.fS*n+c.fS,c0:i.c0*n+c.c0};return N(mv,s(function(n,e,r){return r&&0<z(uv,z(uu,a,n),z(uu,e,n))}),!0,t)&&(e.$||n-e.a.bN<0)?at({bN:n,cG:r,b$:a}):e}return e}),it,e.bR)}),Em=h(function(n,e){var r=n.gl,t=n.ga,o=e.cG,n=e.cM,e=z(uv,t,o);if(e<0){n=z(uu,n,r),e=z(uv,o,n)/e;return e<0?it:at({bN:e,cG:o,b$:{fR:t.fR*e+r.fR,fS:t.fS*e+r.fS,c0:t.c0*e+r.c0}})}return it}),Wm=h(function(n,e){var r=n.gl,t=n.ga,o=e.cM,a=e.al,n=2*(t.fR*(r.fR-o.fR)+t.fS*(r.fS-o.fS)+t.c0*(r.c0-o.c0)),e=t.fR*t.fR+t.fS*t.fS+t.c0*t.c0,a=n*n-4*e*((r.fR-o.fR)*(r.fR-o.fR)+(r.fS-o.fS)*(r.fS-o.fS)+(r.c0-o.c0)*(r.c0-o.c0)-a*a);if(a<0)return it;e=(-n-Au(a))/(2*e);if(e<0)return it;t={fR:r.fR+t.fR*e,fS:r.fS+t.fS*e,c0:r.c0+t.c0*e},o=z(uu,t,o);return at({bN:e,cG:o,b$:t})}),Um=h(function(n,e){switch(e.$){case 1:return z(Em,n,e.a);case 2:return z(Wm,n,e.a);case 0:return z(km,n,e.a);default:return it}}),Gm=h(function(r,n){return N(dt,h(function(n,e){n=z(Um,r,n);if(n.$)return e;n=n.a;return e.$||n.bN-e.a.bN<0?at(n):e}),it,n.d5)}),Ym=h(function(t,n){n=n.fY;return N(dt,h(function(n,e){var r=z(Gm,t,n);if(r.$)return e;r=r.a;return e.$||r.bN-e.a.bN<0?at({c5:n,bN:r.bN,cG:r.cG,b$:r.b$}):e}),it,n)}),Im=h(function(n,e){var r=z(Ym,{ga:Pa(ki(n)),gl:Ma(Ki(n))},e);if(r.$)return it;n=r.a.c5,e=r.a.b$,r=r.a.cG;return at({c5:n,cG:z(Bm,z(hu,n.b9,ya(n.ck)),r),b$:z(mu,z(hu,n.b9,ya(n.ck)),e)})}),jm=h(function(n,e){return e*n}),Hm=h(function(n,e){return e.fR*n.fR+e.fS*n.fS+e.c0*n.c0}),Om=h(function(n,e){return e.fR*n.fR+e.fS*n.fS+e.c0*n.c0}),Qm=h(function(n,e){return{fR:e.fR-n.fR,fS:e.fS-n.fS,c0:e.c0-n.c0}}),Xm=h(function(n,e){var r=e,e=Sa(r.b9),n=Ma(n),e=z(iu,r.ch,{fR:n.fR-e.fR,fS:n.fS-e.fS,c0:n.c0-e.c0});return z(au,e,r.c_)}),Zm=h(function(n,e){return P(e,{H:n})}),Jm=r(function(n,e,r,t,o){for(;;){var a={a:t,b:Ra(r).g};if(a.a.b){var i,c,u,l,f=a.a,s=f.a,d=f.b,v=s.aU;v.$?(u=z(Dl,.99,s.aV),l=P(s,{aV:z(Dl,.99,s.aV),bs:z(pd,s.bs,u)}),n=n,e=e,r=r,t=d,o=z(jr,l,o)):(i=v.a.cG,c=z(Xm,v.a.b$,r),f=z(Tm,e,Cm.cq),v=z(Om,i,f),l=P(s,{aV:u=z(Nm,c,z(Qm,z(Us,v,i),qi(f)))*Gi(n)/Da(Cm.al),bs:z(pd,s.bs,s.aV)}),n=n,e=e,r=r,t=d,o=z(jr,l,o))}else return a.b.$?r:z(Zm,{ax:Ra(r).ax,g:z(Mu,a.b.a,ht(o))},r)}}),Km=s(function(n,e,r){return{fR:r.fR+e*n.fR,fS:r.fS+e*n.fS,c0:r.c0+e*n.c0}}),nb=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return _(Jm,n,r,t,o,R);var c=i.a,u=i.b,l=z(Tm,r,ka(Cm.bc)),f=a?z(Dl,c.cU,c.cT):c.cT,s=a?z(Dl,c.cU,c.cr):c.cr,d=z(Fm,r,nc(t)),d=z(Dl,1-Cm.dV,z(Hm,l,z(wl,c.bK,d))),d=N(Km,l,d,c.bK);n=n,r=r,t=D(Lm,f,c.c1,d,D(Lm,s,c.de,c.bK,t)),o=o,a=a,i=u}}),eb=h(function(n,e){var r=n.cv,t=oi(e),n=t.fR,e=t.fS,t=t.c0;return{fR:r.eQ*n+r.eR*e+r.eS*t,fS:r.eU*n+r.eV*e+r.eW*t,c0:r.eY*n+r.eZ*e+r.e_*t}}),rb=s(function(n,e,r){var t=z(Fm,Ta(n),nc(n)),t=z(wl,t,e),e=z(Tl,t,qi(r)),t=z(Tl,z(eb,n,e),t),t=z(Nm,qi(r),t),n=Ji(n);return n.$?t:1/yi(n.a)+t}),tb=t(function(n,e,r,t,o,a){var i=z(Xm,r,e),c=z(Xm,r,n),e=N(rb,e,r,t),r=N(rb,n,r,t),t=z(Nm,z(Qm,i,c),qi(t));return N($m,ec(o),o,-t/(r+e)/a)}),ob=h(function(n,e){return 0<x(e,n)}),ab=l(function(n,e,r,t){var o=z(Xm,r,e),r=z(Xm,r,n),e=(e=Ji(e)).$?0:1/yi(e.a),e=1/(((n=Ji(n)).$?0:1/yi(n.a))+e);return-.2*z(Nm,z(Qm,o,r),qi(t))*e}),ib=s(function(n,e,r){var t=n,o=r,a=.5*e,i=bd(a),c=hd(a),u=t.ga,l=u.fR*c,f=i*l,n=l*l,r=u.fS*c,e=i*r,a=l*r,t=r*r,c=u.c0*c,i=i*c,l=l*c,r=r*c,c=c*c;return{fR:(1-2*(t+c))*o.fR+2*(a-i)*o.fS+2*(l+e)*o.c0,fS:2*(a+i)*o.fR+(1-2*(n+c))*o.fS+2*(r-f)*o.c0,c0:2*(l-e)*o.fR+2*(r+f)*o.fS+(1-2*(n+t))*o.c0}}),cb=h(function(n,e){return{fR:n*e.fR,fS:n*e.fS,c0:n*e.c0}}),ub=a(function(n,e,r,t,o,a,i,c,u){for(;;){if(!a.b)return S(nb,n,e,r,t,c,u,i);var l,f,s,d,v,m,b,p,g=a.a,h=a.b,x=g.aU;u=x.$?(n=n,e=e,r=r,t=t,o=o,a=h,i=i,c=z(jr,g,c),u):(l=x.a.b$,p=x.a.cG,f=x.a.c5,m=z(Tm,r,N(ib,z(Gd,g.au,Cm.bc),g.W,Cm.dU)),s=z(Dl,Cm.df,g.cV),b=M(g.aF,0)?0:z(jm,n,g.aF),v=z(Nm,qi(p),qi(m)),d=z(Io,p,rc(z(Qm,z(cb,v,qi(p)),qi(m)))),x=z(Io,p,rc(z(Tl,qi(p),qi(d)))),v=z(pd,C(tb,t,f,l,x,b,o),z(jm,n,g.aW)),m=D(ab,t,f,l,d),p=z(pd,z(jm,m,m),z(Dl,.25,z(jm,v,v))),p=(b=z(ob,z(jm,s,s),p))?z(gd,s,Au(p)):1,n=n,e=e,r=r,t=t,o=o,a=h,i=z(jr,{c1:d,el:f,bK:l,de:x,cr:v,cT:m,cU:p},i),c=z(jr,g,c),u||b)}}),lb=$(function(n,e,r,t,o,a,i,c){for(;;){if(!o.b)return T(ub,n,e,r,a,c,i,R,R,!1);var u,l,f,s,d,v,m=o.a,b=o.b,p=z(qm,r,z(Gd,m.au,Cm.bc)),g=z(Im,p,z(Vm,function(n){return M(Ra(n).g,Gs)},e));c=g.$?(n=n,e=e,r=r,t=t,o=b,a=a,i=z(jr,P(m,{aU:it,bv:Cm.bw}),i),c):(u=g.a.c5,v=g.a.cG,s=g.a.b$,d=z(pd,Cm.bw,Cm.al),f=Ta(u),l=z(Tm,f,v),g=z(Fm,f,s),v=z(zm,g,Ki(p)),z(Am,d,v)?(f=N($m,Cm.dA,Cm.dv,z(cs,Cm.al,v)),s=Da(z(cs,f,Cm.bw)),d=z(Nm,qi(l),z(Xm,g,t)),d=(p=-1<x(v=z(Nm,qi(l),qi(ki(p))),-.1)?{a:0,b:10}:{a:-d/v,b:-1/v}).b,p=(v=p.a)<0?Cm.da:Cm.db,v=z(jm,n,N($m,0,Cm.du,z(Io,0,z(Go,yi,Ji(t)))*(Cm.d$*s*d-p*v))),n=n,e=e,r=r,t=t,o=b,a=D(Lm,v,l,g,a),i=z(jr,P(m,{aU:at({c5:u,cG:l,b$:g}),cV:v,bv:f}),i),c+1):(n=n,e=e,r=r,t=t,o=b,a=a,i=z(jr,P(m,{aU:it,bv:Cm.bw}),i),c))}}),fb=r(function(n,e,r,t,o){if(t.b&&t.b.b&&t.b.b.b&&t.b.b.b.b&&!t.b.b.b.b.b){var a=t.b,i=a.a,c=a.b,u=c.a,l=c.b.a,a=4e3*r.a4,c=r.c6?4e3:0,t=P(t.a,{aF:c,aW:a,W:20*r.W/180*3.141592653589793}),r=P(i,{aF:c,aW:a,W:20*r.W/180*3.141592653589793}),u=P(u,{aF:c,aW:a}),a=P(l,{aF:c,aW:a});return m(lb,n,e,Ta(o),o,y([t,r,u,a]),o,R,0)}return o}),sb=l(function(n,e,r,t){var o=Ra(t).g;if(o.$)return t;var a=o.b,e=Zi(z(Hl,z(Eo,function(n){return n.g},av(o.a)),e)),n=!(n={a:!n,b:e}).a||n.b.$?Kd:n.b.a.bb;return(!e.$&&n.br&&0<e.a.aQ?N(fu,3e4,z(Tm,Ta(t),Cm.cq),wa(t)):Wr)(_(fb,1/60,r,n,a,t))}),db={$:4},vb={$:1},mb=h(function(n,e){return n.bb.br?z(_t,0,e-.5):e}),bb=s(function(n,e,r){return 0<x(e-r.fC,n)})(Jd),pb=s(function(n,e,r){var o=r.aZ+e,t=r.V;switch(t.$){case 2:return r;case 3:return 3e3<o-t.a?P(Yi(n),{ar:r.ar,a5:r.a5}):P(r,{aZ:o,q:z(Rm,1/60,z(ym,N(sb,!1,r.P,r.q),r.q))});case 0:var a=t.a,i=t.b;return 0<Gi(i)?P(r,!a&&500<o?{V:z(tv,!0,i),q:N(dt,h(function(n,e){return z(Su,(r=z(vd,N(_s,-35,0,1.1),$i(n)),n.cW?r:N(Ed,Hd,3.141592653589793,r)),e);var r}),r.q,r.P)}:{aZ:o,V:z(tv,a,z(cs,.001*e,i)),q:z(Rm,1/60,z(ym,N(sb,!0,r.P,r.q),r.q))}):P(r,{V:vb});case 4:return r;default:var c=z(xa,function(n){var e={a:Ra(n).g,b:Zi(r.P)};return e.a.$||e.b.$?it:at({a:z(Io,e.b.a,Zi(z(Hl,z(Eo,function(n){return n.g},zt(e.a.a)),r.P))),b:wa(n)})},tc(r.q)),u=h(function(n,e){return n?e+1:e}),l=z(cs,.001*e,r.a5),f=h(function(n,e){var r=n.b,t=e.b$,e=e.fC;return!(-1<x(n.a.aQ,Xd))&&0<x(o-e,Jd)&&Da(z(zm,r,t))<2.5}),s=z(Io,N(_s,0,0,0),z(Go,wa,Zi(z(Hl,z(Eo,Ra,z(Eo,function(n){return n.g},oc)),tc(r.q))))),d=0<x(z(Mo,Da,Ka)(s),Fd/2),a=x(z(Mo,Da,Ka)(s),-Fd/2)<0,i=x(Da(ei(s)),Da(fd.al))<1,v=h(function(n,e){n=z(co,ac,z(Hl,f(n),r.bq)),n=N(dt,ot,0,n);return z(Sl,Xd,n+e)}),m=h(function(n,e){return z(bb,o,e)&&z(f,n,e)?P(e,{fC:o}):e}),s=r.ar;return P(r,{aZ:o,P:z(co,function(n){var e=n.a;return P(e,{aQ:z(mb,e,z(v,{a:e,b:n.b},e.aQ))})},c),bq:z(co,function(n){return N(dt,m,n,c)},r.bq),ar:{ba:z(u,d,s.ba),bo:z(u,a,s.bo)},V:!i||0<Gi(l)||M(s.ba,s.bo)?d||a?{$:3,a:o}:r.V:db,a5:l,q:z(Rm,1/60,z(ym,N(sb,!1,r.P,r.q),r.q))})}}),F=h(function(n,t){function o(n){var e=t.ac;if(3!==e.$)return t;var r=e.b;return P(t,{ac:z(ou,n(e.a),r)})}var r=h(function(e,r){return o(function(n){return P(n,{P:z(co,function(n){return z(av,n.g,e)?r(n):n},n.P)})})}),e=h(function(n,e){return z(r,n,function(n){return P(n,{bb:e(n.bb)})})}),a={a:t.ac,b:n};n:for(;;)switch(a.a.$){case 2:switch(a.b.$){case 1:break n;case 2:var i=a.a,c=i.a,i=P(g=i.b,{av:a.b.a});return{a:P(t,{ac:z(tu,Ui(i),i)}),b:ov};case 3:return{a:P(t,{ac:z(ou,Yi(g=a.a.b),g)}),b:ov};case 0:i=a.a,c=i.a;return{a:P(t,{ac:z(tu,z(Rm,1/60,z(ym,N(sb,!1,z(pt,nv,(g=i.b).av),c),c)),g)}),b:ov};default:return{a:t,b:ov}}case 3:switch(a.b.$){case 1:break n;case 0:return{a:o(z(pb,g=a.a.b,a.b.a)),b:ov};case 5:var u=a.a.a,l=a.b,f=l.a;switch((m=l.b).$){case 0:return{a:o(function(n){return P(n,{q:z(ym,xu(f),n.q)})}),b:ov};case 1:return{a:z(e,f,function(n){return P(n,{br:!0})}),b:ov};case 2:var s=m.a;return{a:z(e,f,function(n){return P(n,{W:s})}),b:ov};case 3:s=m.a;return{a:z(e,f,function(n){return P(n,{a4:s})}),b:ov};case 4:return{a:z(r,f,function(n){return P(n,{bi:n.bi?0:1})}),b:ov};default:var d=u.V;if(2!==d.$)return{a:o(function(n){return P(n,{V:{$:2,a:n.V}})}),b:ov};var v=d.a;return{a:o(function(n){return P(n,{V:v})}),b:ov}}case 6:var m,l=a.b,f=l.a;switch((m=l.b).$){case 0:return{a:t,b:ov};case 1:return{a:z(e,f,function(n){return P(n,{br:!1})}),b:ov};case 2:s=m.a;return{a:z(e,f,function(n){return P(n,{W:function(n){return M(s,n.W)?0:n.W}(n)})}),b:ov};case 3:s=m.a;return{a:z(e,f,function(n){return P(n,{a4:function(n){return M(s,n.a4)?0:n.a4}(n)})}),b:ov};case 4:default:return{a:t,b:ov}}case 7:return{a:t,b:ov};case 2:return{a:t,b:ov};case 3:return{a:t,b:ov};default:return{a:P(t,{ac:z(tu,Ui(g=a.a.b),g)}),b:ov}}case 0:switch(a.b.$){case 1:break n;case 7:if(a.b.a.$){var b=a.b.a.a;return{a:P(t,{ac:{$:1,a:function(){if(b.$){var n=b.b;return"Image not powers of 2: "+lt(b.a)+(" "+lt(n))}return"Load error"}()}}),b:ov}}var p=a.b.a.a,g={av:y([{a:rv,b:1}]),cX:p};return{a:P(t,{ac:z(tu,Ui(g),g)}),b:ov};default:return{a:t,b:ov}}default:if(1===a.b.$)break n;return{a:t,b:ov}}n=a.b;return{a:P(t,{a3:{m:n.b,h:n.a}}),b:ov}}),gb={$:4},hb={$:3},xb=Qn("button"),Sb=yn,Mb=(B=h(function(n,e){return z(Kn,n,Sb(e))}))("className"),Pb=function(n){return{$:0,a:n}},Rb={$:3},yb=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),Cb=h(function(n,e){return po(z(co,n,e))}),Tb=function(n){return{$:1,a:n}},wb=Q,Lb=function(n){return{$:2,a:n}},$b=Jn,zb=cn,Nb=s(function(n,e,r){return N(Cr,n,e,r)}),Db=D(Yf,1,1,1,1),_b=s(function(n,e,r){return z(co,function(n){return z(n,e,r)},n)}),Vb=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),Ab=h(function(n,e){var r=e.fR,e=e.fS;return N(Vb,n*r/e,n,n*(1-r-e)/e)}),Fb=h(function(n,e){return r=z(Ab,n,e),N(Zl,3.2406*(n=r.a)-1.5372*(e=r.b)-.4986*(r=r.c),-.9689*n+1.8758*e+.0415*r,.0557*n-.204*e+1.057*r);var r}),qb=r(function(n,e,r,t,o){return C(o,n,D(Yf,t.cR,t.cR,t.cR,t.eG?1:-1),function(n){return Os({eQ:n.u,eR:n.x,eS:n.A,eT:n.Q,eU:n.v,eV:n.y,eW:n.B,eX:n.R,eY:n.w,eZ:n.z,e_:n.C,e$:n.S,e0:0,e1:0,e2:0,e3:1})}(t),t.eG,e,r)}),Bb=t(function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=z(fs,o.a,t),o=i,a=a;continue n;case 1:return{_:z(jr,_(qb,n,e,r,t,o.b),a._),ak:a.ak,am:a.am};case 3:i=z(jr,_(qb,n,e,r,t,o.b),a.ak);return{_:a._,ak:i,am:a.am};case 2:var c=z(jr,_(qb,n,e,r,t,o.a),a.am);return{_:a._,ak:a.ak,am:c};default:c=o.a;return N(dt,D(Bb,n,e,r,t),a,c)}}),kb=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),Eb=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Jn=h(function(n,e){return{$:6,a:n,b:e}}),Wb=y([function(n){return D(Eb,518,n.as,n.ao,n.an)}({an:1,ao:0,as:!1}),D(kb,!1,!1,!1,!1),z(Jn,0,1)]),Ub={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Gb=Te({eq:1,eC:0,fd:5})(y([{cM:z(Zf,-1,-1)},{cM:z(Zf,1,-1)},{cM:z(Zf,-1,1)},{cM:z(Zf,1,1)}])),Yb={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cM"},uniforms:{}},Ib=fc({bS:7681,dq:0,dR:8,b4:519,d6:15,cd:7681,ce:7681}),jb=s(function(n,e,r){return po(y([N(_b,n,r,Wb),y([sc(e),Ib])]))}),Hb=h(function(n,e){return po(z(pt,jb(n),e))}),Jn=function(n){return D(Eb,513,n.as,n.ao,n.an)}({an:1,ao:0,as:!0}),Ob=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),Te=h(function(n,e){return N(Ob,32774,n,e)}),Qb=(Q={cf:0,a9:z(Te,1,771),ci:0,cm:z(Te,770,771),cs:0,cO:0},Wc=Q.cO,Uc=Q.cs,Gc=Q.ci,Yc=Q.cf,Te=Q.cm,Q=Q.a9,z(h(function(n,e){var r=n.c,t=e.a,o=e.b,e=e.c;return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:0,a:l,b:u,c:c,d:i,e:a,f:o,g:t,h:r,i:e,j:n}}}}}}}}}}}(n.a)(n.b)(r)(t)(o)(e)(Wc)(Uc)(Gc)(Yc)}),Te,Q)),Xb=y([Jn,Qb]),Zb=h(function(n,e){var r=n.d9,t=n.d8,n=n.d7;return{fR:e.fR*n.fR+e.fS*n.fS+e.c0*n.c0,fS:e.fR*t.fR+e.fS*t.fS+e.c0*t.c0,c0:e.fR*r.fR+e.fS*r.fS+e.c0*r.c0}}),Jb=h(function(n,e){var r=n.dE,t=e.fR-r.fR,o=e.fS-r.fS,a=e.c0-r.c0,e=n.d9,r=n.d8,n=n.d7;return{fR:t*n.fR+o*n.fS+a*n.c0,fS:t*r.fR+o*r.fS+a*r.c0,c0:t*e.fR+o*e.fS+a*e.c0}}),Kb=h(function(n,e){return{dE:z(Jb,n,qa(e)),d7:z(Zb,n,Ea(e)),d8:z(Zb,n,Wa(e)),d9:z(Zb,n,La(e))}}),np=h(function(n,e){e=Xa(e),n=Xa(n);return{e6:z(xl,n.e6,e.e6),e7:z(xl,n.e7,e.e7),e8:z(xl,n.e8,e.e8),e9:z(Ml,n.e9,e.e9),fa:z(Ml,n.fa,e.fa),fb:z(Ml,n.fb,e.fb)}}),ep=h(function(n,e){var r=vc(Ri(n.b)),t=vc(Ri(n.a)),o=vc(Ri(n.c)),a=function(n){return{a:n.fR,b:n.fS,c:n.c0}}(e),n=a.a,e=a.b,a=a.c;return{e6:z(pd,t,n),e7:z(pd,r,e),e8:z(pd,o,a),e9:z(cs,t,n),fa:z(cs,r,e),fb:z(cs,o,a)}}),rp=l(function(n,e,r,t){var o=r.f3,a=2*r.gp*e,i=2*r.go*e,c=2*r.gn*e,u=Pa(La(n)),l=ii(c*u.fR)+ii(i*u.fS)+ii(a*u.c0),r=Pa(Wa(n)),u=ii(c*r.fR)+ii(i*r.fS)+ii(a*r.c0),r=Pa(Ea(n)),r=ii(c*r.fR)+ii(i*r.fS)+ii(a*r.c0),e=z(ep,{a:r,b:u,c:l},z(Jb,n,N(_s,o.fR*e,o.fS*e,o.c0*e)));return at(t.$?e:z(np,t.a,e))}),tp=l(function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=u=e,r=l=r,t=a;continue n;case 1:var i=D(rp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 2:n=c=n,e=u=e,r=l=r,t=a;continue n;case 3:i=D(rp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 4:var c=n,u=e,l=D(tp,n,e,r,o.a);n=c,e=u,r=l,t=a;continue n;default:var f=o.a,s=o.b,d=z(Kb,function(n){return{dE:{fR:n.Q,fS:n.R,c0:n.S},d7:{fR:n.u,fS:n.v,c0:n.w},d8:{fR:n.x,fS:n.y,c0:n.z},d9:{fR:n.A,fS:n.B,c0:n.C}}}(f),n),f=e*f.cR;n=c=n,e=u=e,r=l=D(tp,d,f,r,y([s])),t=a;continue n}}}),op={eG:!0,u:1,v:0,w:0,x:0,y:1,z:0,A:0,B:0,C:1,Q:0,R:0,S:0,cR:1},ap=fc({bS:7681,dq:0,dR:8,b4:519,d6:255,cd:7681,ce:7681}),ip={ci:0,f2:!1,cs:0,dN:0,cO:0,d1:0,fR:0,fS:0,c0:0},cp=h(function(n,e){return Os({eQ:n.fR,eR:n.cO,eS:e.fR,eT:e.cO,eU:n.fS,eV:n.cs,eW:e.fS,eX:e.cs,eY:n.c0,eZ:n.ci,e_:e.c0,e$:e.ci,e0:n.d1,e1:n.dN,e2:e.d1,e3:e.dN})}),up={a:{bX:z(cp,ip,ip),cA:z(cp,ip,ip),cB:z(cp,ip,ip),cC:z(cp,ip,ip)},b:D(Yf,0,0,0,0)},lp=y([mc({an:1,ao:0,as:!0}),lc({bS:7680,dq:240,dR:0,b4:514,d6:0,cd:7680,ce:7680}),Qb]),fp=h(function(n,e){var r=e.fW,t=Ri(e.gB),o=Ri(e.gi),e=n.dP;if(e.$){n=e.a;return zs(o)?Os({eQ:2/(r*n),eR:0,eS:0,eT:0,eU:0,eV:2/n,eW:0,eX:0,eY:0,eZ:0,e_:0,e$:-1,e0:0,e1:0,e2:0,e3:1}):Os({eQ:2/(r*n),eR:0,eS:0,eT:0,eU:0,eV:2/n,eW:0,eX:0,eY:0,eZ:0,e_:-2/(o-t),e$:-(o+t)/(o-t),e0:0,e1:0,e2:0,e3:1})}e=e.a;return zs(o)?Os({eQ:1/(r*e),eR:0,eS:0,eT:0,eU:0,eV:1/e,eW:0,eX:0,eY:0,eZ:0,e_:-1,e$:-2*t,e0:0,e1:0,e2:-1,e3:0}):Os({eQ:1/(r*e),eR:0,eS:0,eT:0,eU:0,eV:1/e,eW:0,eX:0,eY:0,eZ:0,e_:-(o+t)/(o-t),e$:-2*o*t/(o-t),e0:0,e1:0,e2:-1,e3:0})}),sp=h(function(n,e){return 1==(1&n>>e)?0:1}),dp=s(function(r,t,n){return po(z(co,function(n){var e=n<<4,n=D(Yf,z(sp,n,0),z(sp,n,1),z(sp,n,2),z(sp,n,3));return N(_b,r,{a:t,b:n},function(n){return y([mc({an:1,ao:0,as:!0}),lc({bS:7680,dq:240,dR:n,b4:514,d6:0,cd:7680,ce:7680}),Qb])}(e))},z(bt,1,z(Fs,2,n)-1)))}),vp=function(n){return{eQ:n[0],eU:n[1],eY:n[2],e0:n[3],eR:n[4],eV:n[5],eZ:n[6],e1:n[7],eS:n[8],eW:n[9],e_:n[10],e2:n[11],eT:n[12],eX:n[13],e$:n[14],e3:n[15]}},mp=h(function(n,e){var r,t;return r=z(Kb,e,n),t=Ua(qa(r)),e=Pa(La(r)),n=Pa(Wa(r)),r=Pa(Ea(r)),Os({eQ:r.fR,eR:n.fR,eS:e.fR,eT:t.fR,eU:r.fS,eV:n.fS,eW:e.fS,eX:t.fS,eY:r.c0,eZ:n.c0,e_:e.c0,e$:t.c0,e0:0,e1:0,e2:0,e3:1})}),bp=s(function(n,e,r){return{fR:n,fS:e,c0:r}}),pp=h(function(e,n){var r=y([Tb(1),Lb(0),Pb(!0),D(yb,0,0,0,0)]),t=function(){var n=e.ec;switch(n.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:z(jr,Rb,r),b:"1",c:1};default:return{a:r,b:"0",c:n.a}}}(),o=t.a,a=t.b,i=t.c,c=e.ep,u=c.a,l=uc(c.b),f=z($b,"height",lt(l)+"px"),t=uc(u),s=t/l,c=z(Cb,function(n){return gc({fW:s,eg:e.eg,ek:e.ek,et:n.et,ew:n.ew,eL:n.eL,fz:i,fE:n.fE,fQ:n.fQ})},n),u=z($b,"width",lt(t)+"px"),n=cc(e.ed);return N(ic,"div",y([z($b,"padding","0px"),u,f]),y([{a:a,b:N(Nb,o,y([(t=wb(t*i),z(ne,"width",lt(t))),function(n){return z(ne,"height",lt(n))}(wb(l*i)),u,f,z($b,"display","block"),z($b,"background-color",n)]),c)}]))}),gp={fR:.31271,fS:.32902},hp=function(n){for(;;){if(M(n.gu,0)&&M(n.gv,0))return ip;if(!z(ob,Ri(n.gu),Ri(n.gv))){var e=ii(xc(n.gv)/3.141592653589793),r=ii(xc(n.gu)/3.141592653589793),t=Pa(n.fH),o=t.fR,a=t.fS,i=t.c0,t=z(Fb,1,n.ei);return{ci:r*Gf(t),f2:!1,cs:r*Uf(t),dN:e/r,cO:r*Wf(t),d1:3,fR:o,fS:a,c0:i}}n={ei:n.ei,gu:n.gv,gv:n.gu,fH:ka(n.fH)}}}({ei:(Jn={ei:gp,eF:15e3,fH:Cu}).ei,gu:Jn.eF,gv:0,fH:Jn.fH}),xp=Qn("div"),Sp=h(function(n,e){return z(ds,n,e)}),Mp=Qn("h1"),Pp=Qn("h3"),Rp=h(function(n,e){return e.$?it:n(e.a)}),yp=h(function(n,e){e=e.fR*n.fR+e.fS*n.fS+e.c0*n.c0;return{fR:n.fR*e,fS:n.fS*e,c0:n.c0*e}}),Cp=s(function(a,i,c){return z(Rp,function(o){var n=z(Qm,z(yp,o,i),i);return z(Rp,function(e){var n,r=z(Tl,i,a),t=z(Nm,c,r),n=z(ob,0,t)?r:z(Am,0,t)?{fR:-(n=r).fR,fS:-n.fS,c0:-n.c0}:Ll;return z(Go,function(n){return{a:o,b:e,c:n}},rc(n))},rc(n))},rc(a))}),Tp=h(function(n,e){var r=Pc(n);return{dE:e,d7:r.a,d8:r.b,d9:n}}),wp=Ri,Lp={$:1},$p={$:0},zp=Zn,Np=h(function(n,e){return z(zp,n,{$:0,a:e})}),Dp=Qn("p"),_p=I,Vp=yn,Ap=h(function(n,e){return z(Kn,n,Vp(e))})("checked"),Fp=B("htmlFor"),qp=B("id"),Bp=Qn("input"),kp=Qn("label"),Ep=B("name"),ln=ln,Wp=z(h(function(n,e){return N(io,ko,e,n)}),y(["target","checked"]),ln),Up=On,Gp=B("type"),Yp=B("value"),Ip=h(function(n,e){return{dE:n,d7:Ea(e),d8:Wa(e),d9:La(e)}}),jp=s(function(n,e,r){return{dE:N(qd,n,e,qa(r)),d7:N(ib,n,e,Ea(r)),d8:N(ib,n,e,Wa(r)),d9:N(ib,n,e,La(r))}}),B=h(function(n,e){return e/n}),Hp=h(function(n,e){var r=n.cM;return z(jr,{cG:ai(n.cG),cM:ti(r)},e)}),Op=h(function(n,e){var r=n.d8,n=n.d7;return{fR:e.fR*n.fR+e.fS*r.fR,fS:e.fR*n.fS+e.fS*r.fS,c0:e.fR*n.c0+e.fS*r.c0}}),Qp=Wr({dE:Pu,d7:Ru,d8:sn}),Xp=(Ic=z(B,72,6.283185307179586),jc=qi(yu),Hc=qi(G),Oc=z(Dl,.5,1),Qc=N(_l,0,0,Oc),Xc=z(Dl,-.5,1),Zc=N(_l,0,0,Xc),G=z(co,function(n){var e=z(Dl,n,Ic),r=qi(z(Op,Qp,Tc(e))),t=z(Dl,Ai(e),1),o=z(Dl,Fi(e),1),a=N(_l,t,o,Oc),i=N(_l,t,o,Xc),e=z(Cd,72,n+1),t=z(Dl,e,Ic),o=qi(z(Op,Qp,Tc(t))),n=z(Dl,Ai(t),1),e=z(Dl,Fi(t),1),t=N(_l,n,e,Xc),e=N(_l,n,e,Oc);return y([{a:{cG:Hc,cM:Zc},b:{cG:Hc,cM:t},c:{cG:Hc,cM:i}},{a:{cG:r,cM:i},b:{cG:o,cM:t},c:{cG:o,cM:e}},{a:{cG:r,cM:i},b:{cG:o,cM:e},c:{cG:r,cM:a}},{a:{cG:jc,cM:Qc},b:{cG:jc,cM:a},c:{cG:jc,cM:e}}])},z(bt,0,71)),G=di(po(G)),u(function(n){var e=N(Xr,Hp,R,li(n));if(e.b){var r=e.a,t=e.b,e=z(Ql,e,ui(n)),t=z(Pd,r,t);return D(vl,t,n,e,0)}return hl}(G))),Zp=tr(Xp),Jp=l(function(n,e,r,t){var o=function(n){var e=ki(n),r=Pc(e);return{dE:Ki(n),d7:r.a,d8:r.b,d9:e}}(function(n){return n.n}(t)),r=z(us,r,Xp),r=(e={a:n,b:e}).a?e.b?vi(y([r,Pi(Zp)])):r:e.b?Pi(Zp):af,e=function(n){return n.al}(t),t=function(n){return n.O}(t);return z(ds,o,z(gs,{a:e,b:e,c:t},r))}),tr=h(function(n,e){return D(Jp,!0,!0,n,e)}),Kp=s(function(n,e,r){return{n:z(Gd,n,e),O:Ri(r.O),al:Ri(r.al)}}),sn=N(Kp,Pu,sn,{O:.3,al:Cm.al}),ng=z(tr,Vd(sd),sn),eg=h(function(o,n){return z(co,function(n){var e=Ta(o),r=z(Fm,e,n.au),t=z(Tm,e,Cm.bc),r=z(ks,z(Us,n.bv,t),r),e=N(jp,z(Gd,r,t),n.W,z(Ip,r,e));return z(Sp,e,ng)},n)}),rg=w,tg=Qn("span"),w=h(function(n,e){var r=n,t=Pa(e.ga),o=t.fR,n=t.fS,t=t.c0,e=z(Fb,e.eF,e.ei);return{ci:Gf(e),f2:r,cs:Uf(e),dN:0,cO:Wf(e),d1:1,fR:-o,fS:-n,c0:-t}}),og=z(w,!0,{ei:function(n){var e=N(As,1667,25e3,n),n=4e3<e?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:1e9*-.2661239/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{fR:n,fS:2222<e?4e3<e?n*n*n*3.081758-n*n*5.8733867+3.75112997*n-.37001483:n*n*n*-.9549476-n*n*1.37418593+2.09137015*n-.16748867:n*n*n*-1.1063814-n*n*1.3481102+2.18555832*n-.20219683}}(5600),ga:z(Rd,.7853981633974483,-1.0471975511965976),eF:1e4}),w=l(function(n,e,r,t){return D(qs,n,e,r,t)}),ag=D(w,0,0,0,0),ig=h(function(n,e){return{$:2,a:n,b:e}}),cg={$:0,a:up.a},ug=$(function(n,e,r,t,o,a,i,c){var u=z(_m,Lc,y([wc(n),wc(e),wc(r),wc(t)])),l=u.a;if(l.b){var f=b(l,u.b);if(f.b&&f.b.b&&f.b.b.b&&f.b.b.b.b&&!f.b.b.b.b.b){var s=f.a,d=f.b,u=d.a,f=d.b,d=f.a,f=f.b.a;return z(ig,z(co,$c,l),{bX:z(cp,s,u),cA:z(cp,d,f),cB:z(cp,o,a),cC:z(cp,i,c)})}return cg}return{$:0,a:{bX:z(cp,n,e),cA:z(cp,r,t),cB:z(cp,o,a),cC:z(cp,i,c)}}}),lg=h(function(n,e){return m(ug,n,e,ip,ip,ip,ip,ip,ip)}),fg=y([{a:ra(y([{a:"a",b:{$:2,a:-1}},{a:"d",b:{$:2,a:1}},{a:"w",b:{$:3,a:1}},{a:"s",b:{$:3,a:-1}},{a:"z",b:U},{a:"Shift",b:Oe},{a:"e",b:ev}])),b:0},{a:ra(y([{a:"ArrowLeft",b:{$:2,a:-1}},{a:"ArrowRight",b:{$:2,a:1}},{a:"ArrowUp",b:{$:3,a:1}},{a:"ArrowDown",b:{$:3,a:-1}},{a:",",b:U},{a:"m",b:Oe},{a:".",b:ev}])),b:1}]),sg=h(function(n,e){return D(Jp,!0,!1,n,e)}),dg=h(function(n,e){n=z(Fb,1,n);return N(Nd,0,{$:0,a:n},e)}),vg=h(function(n,e){return D(zd,!0,!1,n,e)}),mg=h(function(n,e){var r,t=e.b$,o=e.gO,a=N(Kp,t,Cu,{O:.3,al:.75}),i=z(dg,(r=N(Bs,255,127,0),i=zc(r),{fR:(e=i.a)/(i=e+(r=i.b)+i.c),fS:r/i}),5e3),i=n?i:Vd(sd),n={a:o,b:n};if(n.a||!n.b)return z(sg,i,a);t=z(ks,N(Ad,0,0,1.5),t);return Ds(y([z(sg,i,a),z(vg,i,z(ld,t,.6))]))}),bg=j,pg=h(function(n,e){var r=n.d8,n=n.d7;return z(bg,e.fR*r.fR+e.fS*r.fS+e.c0*r.c0,e.fR*n.fR+e.fS*n.fS+e.c0*n.c0)}),gg=h(function(n,e){var r=n.d8,t=e.fR*r.fR+e.fS*r.fS+e.c0*r.c0,o=n.d7,n=e.fR*o.fR+e.fS*o.fS+e.c0*o.c0;return z(bg,e.fR*(o.fS*r.c0-o.c0*r.fS)+e.fS*(o.c0*r.fR-o.fR*r.c0)+e.c0*(o.fR*r.fS-o.fS*r.fR),Au(n*n+t*t))}),hg=h(function(n,e){var r=e.c0-n.c0,t=e.fS-n.fS,e=e.fR-n.fR,n=z(_t,ii(e),z(_t,ii(t),ii(r)));if(n){r=r/n,t=t/n,e=e/n,n=Au(e*e+t*t+r*r);return at({fR:e/n,fS:t/n,c0:r/n})}return it}),xg=h(function(n,e){return!e.$&&z(av,e.a,n.g)}),Sg=h(function(n,e){return{fR:n.fS*e.c0-n.c0*e.fS,fS:n.c0*e.fR-n.fR*e.c0,c0:n.fR*e.fS-n.fS*e.fR}}),Mg=s(function(n,e,r){return N(jp,n(r),e,r)}),Pg=s(function(n,e,r){return z(Es,z(Us,e,n),r)}),Rg=s(function(n,e,r){return N(Pg,ki(n(r)),e,r)}),yg=h(function(n,e){var r=n.dE,n=n.gE;return(e.fR-r.fR)*n.fR+(e.fS-r.fS)*n.fS+(e.c0-r.c0)*n.c0}),Cg=h(function(n,e){return{gE:e,dE:n}}),Tg=l(function(n,t,e,r){var o,a,i,c=n.h,u=n.m,n=e.q,l=Zi(z(Hl,z(Eo,Ra,z(Eo,function(n){return n.g},xg(t))),tc(n))),f=(o=z(Eo,Ta,qa),a=N(_s,30,0,10),i=Zi(z(Hl,z(Eo,Ra,z(Eo,function(n){return n.g},oc)),tc(n))),e=function(){var n={a:t.bi,b:i,c:l};n:for(;;){if(n.a){if(n.b.$||n.c.$)break n;return{bI:z(pg,Qp,ka(z(Io,Ru,rc((r=n.c.a).c_)))),bN:30,bQ:.05235987755982988,bh:z(ks,N(Ad,0,0,4),o(r))}}if(n.b.$||n.c.$)break n;var e=n.b.a,r=n.c.a;return{bI:z(Io,0,z(Go,pg(Qp),z(hg,o(e),o(r)))),bN:z(pd,30,z(zm,o(e),o(r))),bQ:z(gg,Qp,z(Io,Ru,z(hg,z(ks,N(Ad,0,0,-3),o(e)),z(ks,N(Ad,0,30,0),o(r))))),bh:o(e)}}return{bI:0,bN:30,bQ:0,bh:a}}(),yc({fM:.41887902047863906,fN:Ac({bI:e.bI,bN:e.bN,bQ:e.bQ,bh:e.bh,gm:Qp})})),n=b(r,z(co,Sc,z(Hl,function(n){if(2!==Ra(n).g.$)return!0;var e,n=(e=Ta(n),z(Cg,e.dE,e.d9)),e=dc(pc(f));return z(ob,0,z(yg,n,e))},tc(n))));return y([hc({ec:Lp,ed:ag,eg:f,ek:.1,ep:{a:Nt(c),b:Nt(u)},et:n,ew:wp(1e4),eL:z(lg,og,hp),fE:$p,fQ:gp}),z(xp,y([Mb("hud-pane hud-pane-msg hud-bottom-right")]),y([z(Dp,y([z($b,"font-size","48px")]),y([Up(lt(wb(t.aQ)))])),z(Dp,R,y([Up("BOOST")]))])),function(){if(t.bi)return Up("");var n,n=(n=t.bO,z(Io,"",z(Go,Er,Zi(z(Hl,z(Eo,Fc,zt(ev)),Or(n))))));return z(xp,y([Mb("hud-pane-msg hud-bottom-left hud-cam")]),y([z(Dp,y([z($b,"font-size","24px"),Mb("hud-cam-indicator")]),y([Up("• Ball cam")])),z(Dp,R,y([Up("Press ["+n+"] to toggle")]))]))}()])}),F=Bn({gt:function(){return{a:{ac:xo,a3:{m:0,h:0}},b:yo(y([z(Ro,mo,z(zo,No,"static/rl-map.png")),z(ho,function(n){n=n.gY;return z(So,n.h,n.m)},Co)]))}},gS:function(n){function e(n){return y([nu(z(jo,n.bO,Do(n.g))),eu(z(jo,n.bO,_o(n.g)))])}var r=n.ac,t=(n=h(function(n,e){return z(So,n,e)}),N(Kc,1,"resize",z(ko,"target",N(Ut,n,z(ko,"innerWidth",ru),z(ko,"innerHeight",ru))))),o=nu(z(Ao,function(n){return"p"===n?Gt(z(Do,-1,Vo)):Bo("Unrecognized key: "+n)},z(ko,"key",Yo)));switch(r.$){case 2:return Fo(y([oa(bo),t]));case 3:var a=r.a;return 2===a.V.$?z(Mo,Fo,po)(z(jr,y([t,o]),z(co,e,a.P))):z(Mo,Fo,po)(z(jr,y([t,o,oa(bo)]),z(co,e,a.P)));default:return t}},gV:F,gX:function(v){return z(xp,y([Mb("container")]),function(){var n=v.ac;switch(n.$){case 0:return y([z(Dp,y([Mb("center-popup")]),y([Up("Loading...")]))]);case 2:var e=n.a,r=n.b,t=po(z(co,function(n){var e=z(Eo,Ra,function(n){return n.g})(n);return e.$?R:z(eg,n,e.b)},z(Hl,z(Eo,Ra,z(Eo,function(n){return n.g},Mc)),tc(e)))),o=v.a3,a=o.h,o=o.m;return y([hc({ec:Lp,ed:ag,eg:yc({fM:.41887902047863906,fN:function(n){var e=z(wl,n.bh,n.gg),r=qi(n.fH),t=z(Tl,e,r),r=N(Cp,e,r,t);if(r.$){t=rc(e);if(t.$){e=Pc(n.fH);return{dE:n.gg,d7:e.b,d8:n.fH,d9:e.a}}return z(Tp,t.a,n.gg)}r=r.a;return{dE:n.gg,d7:r.c,d8:r.b,d9:r.a}}({gg:N(_s,30,-5,5),bh:N(_s,0,5,5),fH:yu})}),ek:.1,ep:{a:Nt(a),b:Nt(o)},et:b(t,z(co,Sc,tc(e))),ew:wp(1e4),eL:z(lg,og,hp),fE:$p,fQ:gp}),z(xp,y([Mb("menu")]),y([z(xp,R,y([z(Mp,R,y([Up("Rocket League")])),z(xp,R,y([Cc({cl:1===Ar(r.av),ct:"mode",cx:"One Player",cI:function(){return{$:2,a:y([{a:rv,b:1}])}},cZ:"1p"}),Cc({cl:2===Ar(r.av),ct:"mode",cx:"Two Player",cI:function(){return{$:2,a:fg}},cZ:"2p"})])),z(xp,y([Mb("btn-row")]),y([z(xb,y([Rc(hb),Mb("btn-primary")]),y([Up("Let's go!")]))]))])),z(xp,y([z($b,"display","flex")]),z(pt,h(function(n,e){e=e.a;return z(xp,y([z($b,"flex-grow","1"),z($b,"padding","0 12px"),z($b,"min-width","180px")]),z(jr,z(Pp,y([z($b,"margin","12px 0 8px")]),y([Up(lt(n+1)+"p controls")])),z(co,function(n){var e=n.a,n=n.b;return z(xp,y([Mb("controls-row")]),y([z(tg,R,y([Up(" "===e?"Spacebar":e)])),z(tg,R,y([Up(function(n){switch(n.$){case 0:return"Jump";case 1:return"Rocket";case 2:return M(e=n.a,-1)?"Turn Left":1===e?"Turn Right":"shrug";case 3:var e;return M(e=n.a,-1)?"Brake":1===e?"Gas":"shrug";case 4:return"Toggle Camera";default:return"Pause"}}(n))]))]))},Or(e))))}),r.av))]))]);case 3:var i=n.a,c=z(xp,y([Mb("hud-pane hud-top-center hud-score-clock")]),y([z(tg,y([Mb("hud-score hud-score-orange")]),y([Up(lt(i.ar.bo))])),(r=Ct(Gi(e=i.a5)),e=z(_t,0,Nt(r/60)),r=z(_t,0,r%60),z(tg,y([Mb("hud-clock")]),y([Up(lt(e)),Up(":"),Up(function(n){for(;;){if(2<=Ot(n))return n;n="0"+n}}(lt(r)))]))),z(tg,y([Mb("hud-score hud-score-blue")]),y([Up(lt(i.ar.ba))]))])),u=function(){var n=i.V;switch(n.$){case 0:var e=n.b;return z(Mp,y([Mb("hud-pane hud-pane-msg center-popup")]),y([Up(lt(Ct(Gi(e))))]));case 3:return z(Mp,y([Mb("hud-pane hud-pane-msg center-popup")]),y([Up("GOOAAALLLL!!!!!")]));case 4:return z(xp,y([Mb("hud-pane hud-pane-msg center-popup")]),y([z(Mp,R,y([Up(0<x(i.ar.ba,i.ar.bo)?"Blue wins!!!":"Orange wins!!!")])),z(xp,y([Mb("btn-row")]),y([z(xb,y([Mb("btn-primary"),Rc(gb)]),y([Up("Menu")]))]))]));default:return Up("")}}(),l=i.P,f=po(y([po(z(co,function(n){var e=z(Eo,Ra,function(n){return n.g})(n);return e.$?R:z(eg,n,e.b)},z(Hl,z(Eo,Ra,z(Eo,function(n){return n.g},Mc)),tc(i.q)))),z(co,function(n){return z(mg,z(bb,i.aZ,n),n)},i.bq)]));n:for(;;){if(l.b){if(l.b.b){if(l.b.b.b)break n;var s={m:v.a3.m,h:v.a3.h/2},d=z(xp,y([z($b,"display","flex")]),z(co,function(n){return z(xp,y([z($b,"position","relative")]),D(Tg,s,n,i,f))},z(rg,function(n){return n.g},l)));return y([d,c,u])}return b(D(Tg,v.a3,l.a,i,f),y([c,u]))}break n}return y([Up("Too many players: "+lt(Ar(l)))]);default:return y([z(Dp,R,y([Up("Error: "+n.a)]))])}}())}});F={Main:{init:F(Gt(0))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?k(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,F):n.Elm=F}(this);