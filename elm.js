!function(n){"use strict";function e(n,e,r){return r.a=n,r.f=e,r}function m(r){return e(2,r,function(e){return function(n){return r(e,n)}})}function s(t){return e(3,t,function(r){return function(e){return function(n){return t(r,e,n)}}})}function l(o){return e(4,o,function(t){return function(r){return function(e){return function(n){return o(t,r,e,n)}}}})}function r(a){return e(5,a,function(o){return function(t){return function(r){return function(e){return function(n){return a(o,t,r,e,n)}}}}})}function t(i){return e(6,i,function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return i(a,o,t,r,e,n)}}}}}})}function o(c){return e(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return c(i,a,o,t,r,e,n)}}}}}}})}function z(u){return e(8,u,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return u(c,i,a,o,t,r,e,n)}}}}}}}})}function a(l){return e(9,l,function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return l(u,c,i,a,o,t,r,e,n)}}}}}}}}})}function D(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function N(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function A(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function V(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function C(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function x(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function p(n,e,r,t,o,a,i,c,u){return 8===n.a?n.f(e,r,t,o,a,i,c,u):n(e)(r)(t)(o)(a)(i)(c)(u)}function w(n,e,r,t,o,a,i,c,u,l){return 9===n.a?n.f(e,r,t,o,a,i,c,u,l):n(e)(r)(t)(o)(a)(i)(c)(u)(l)}function S(n,e){for(var r,t=[],o=i(n,e,0,t);o&&(r=t.pop());o=i(r.a,r.b,0,t));return o}function i(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&E(5),!1;if(100<r)return t.push({a:n,b:e}),!0;for(var o in n.$<0&&(n=Qr(n),e=Qr(e)),n)if(!i(n[o],e[o],r+1,t))return!1;return!0}function h(n,e,r){if("object"!=typeof n)return n===e?0:n<e?-1:1;if(void 0===n.$)return(r=h(n.a,e.a))||(r=h(n.b,e.b))?r:h(n.c,e.c);for(;n.b&&e.b&&!(r=h(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}m(S),m(function(n,e){return!S(n,e)}),m(function(n,e){return h(n,e)<0}),m(function(n,e){return h(n,e)<1}),m(function(n,e){return 0<h(n,e)});var c=m(function(n,e){return 0<=h(n,e)}),u=m(function(n,e){e=h(n,e);return e<0?Hr:e?jr:Ur}),f=0;function T(n,e){var r,t={};for(r in n)t[r]=n[r];for(r in e)t[r]=e[r];return t}function v(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r={$:1,a:n.a,b:e};n=n.b;for(var t=r;n.b;n=n.b)t=t.b={$:1,a:n.a,b:e};return r}m(v);var P={$:0};function d(n,e){return{$:1,a:n,b:e}}var g=m(d);function b(n){for(var e=P,r=n.length;r--;)e={$:1,a:n[r],b:e};return e}function y(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var M=s(function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(D(n,e.a,r.a));return b(t)});l(function(n,e,r,t){for(var o=[];e.b&&r.b&&t.b;e=e.b,r=r.b,t=t.b)o.push(N(n,e.a,r.a,t.a));return b(o)}),r(function(n,e,r,t,o){for(var a=[];e.b&&r.b&&t.b&&o.b;e=e.b,r=r.b,t=t.b,o=o.b)a.push(A(n,e.a,r.a,t.a,o.a));return b(a)}),t(function(n,e,r,t,o,a){for(var i=[];e.b&&r.b&&t.b&&o.b&&a.b;e=e.b,r=r.b,t=t.b,o=o.b,a=a.b)i.push(V(n,e.a,r.a,t.a,o.a,a.a));return b(i)}),m(function(r,n){return b(y(n).sort(function(n,e){return h(r(n),r(e))}))}),m(function(r,n){return b(y(n).sort(function(n,e){e=D(r,n,e);return e===Ur?0:e===Hr?-1:1}))});var L=s(function(n,e,r){for(var t=Array(n),o=0;o<n;o++)t[o]=r(e+o);return t}),$=m(function(n,e){for(var r=Array(n),t=0;t<n&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,{a:r,b:e}}),_=m(function(n,e){return e[n]}),F=s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=r[a];return o[n]=e,o}),B=(m(function(n,e){for(var r=e.length,t=Array(r+1),o=0;o<r;o++)t[o]=e[o];return t[r]=n,t}),s(function(n,e,r){for(var t=r.length,o=0;o<t;o++)e=D(n,r[o],e);return e}),s(function(n,e,r){for(var t=r.length-1;0<=t;t--)e=D(n,r[t],e);return e})),k=m(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;o++)t[o]=n(e[o]);return t});function E(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}s(function(n,e,r){for(var t=r.length,o=Array(t),a=0;a<t;a++)o[a]=D(n,e+a,r[a]);return o}),s(function(n,e,r){return r.slice(n,e)}),s(function(n,e,r){var t=e.length,o=n-t;r.length<o&&(o=r.length);for(var a=Array(t+o),i=0;i<t;i++)a[i]=e[i];for(i=0;i<o;i++)a[i+t]=r[i];return a}),m(function(n,e){return e}),m(function(n,e){return console.log(n+": <internals>"),e});var R=m(function(n,e){return n+e}),q=(m(function(n,e){return n-e}),m(function(n,e){return n*e}),m(function(n,e){return n/e}),m(function(n,e){return n/e|0}),m(Math.pow)),W=(m(function(n,e){return e%n}),m(function(n,e){e%=n;return 0===n?E(11):0<e&&n<0||e<0&&0<n?e+n:e})),U=Math.cos,j=Math.sin,H=Math.tan,G=m(Math.atan2),Y=Math.ceil,Q=Math.floor,I=Math.round,X=Math.sqrt,O=Math.log,K=isNaN;m(function(n,e){return n&&e}),m(function(n,e){return n||e}),m(function(n,e){return n!==e}),m(function(n,e){return n+e}),m(function(n,e){return n+e}),m(function(n,e){for(var r=e.length,t=Array(r),o=0;o<r;){var a=e.charCodeAt(o);a<55296||56319<a?(t[o]=n(e[o]),o++):(t[o]=n(e[o]+e[o+1]),o+=2)}return t.join("")}),m(function(n,e){for(var r=[],t=e.length,o=0;o<t;){var a=e[o],i=e.charCodeAt(o);o++,i<55296||56319<i||(a+=e[o],o++),n(a)&&r.push(a)}return r.join("")}),s(function(n,e,r){for(var t=r.length,o=0;o<t;){var a=r[o],i=r.charCodeAt(o);o++,i<55296||56319<i||(a+=r[o],o++),e=D(n,a,e)}return e}),s(function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);a<56320||57343<a||(o=r[--t]+o),e=D(n,o,e)}return e});var Z=m(function(n,e){return e.split(n)}),J=m(function(n,e){return e.join(n)}),nn=s(function(n,e,r){return r.slice(n,e)});m(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),n(t))return!0}return!1});var en=m(function(n,e){for(var r=e.length;r--;){var t=e[r],o=e.charCodeAt(r);if(o<56320||57343<o||(t=e[--r]+t),!n(t))return!1}return!0}),rn=m(function(n,e){return!!~e.indexOf(n)}),tn=m(function(n,e){return 0==e.indexOf(n)}),on=(m(function(n,e){return n.length<=e.length&&e.lastIndexOf(n)==e.length-n.length}),m(function(n,e){var r=n.length;if(r<1)return P;for(var t=0,o=[];-1<(t=e.indexOf(n,t));)o.push(t),t+=r;return b(o)}));function an(n){return n+""}var cn={$:2,b:function(n){return"number"!=typeof n||(n<=-2147483647||2147483647<=n||(0|n)!==n)&&(!isFinite(n)||n%1)?hn("an INT",n):et(n)}},un={$:2,b:function(n){return"string"==typeof n?et(n):n instanceof String?et(n+""):hn("a STRING",n)}},ln=m(function(n,e){return{$:6,d:n,b:e}});m(function(n,e){return{$:7,e:n,b:e}});var fn=m(function(n,e){return{$:10,b:e,h:n}}),sn=m(function(n,e){return{$:9,f:n,g:[e]}}),dn=s(function(n,e,r){return{$:9,f:n,g:[e,r]}}),vn=(l(function(n,e,r,t){return{$:9,f:n,g:[e,r,t]}}),r(function(n,e,r,t,o){return{$:9,f:n,g:[e,r,t,o]}}),t(function(n,e,r,t,o,a){return{$:9,f:n,g:[e,r,t,o,a]}}),o(function(n,e,r,t,o,a,i){return{$:9,f:n,g:[e,r,t,o,a,i]}}),z(function(n,e,r,t,o,a,i,c){return{$:9,f:n,g:[e,r,t,o,a,i,c]}}),a(function(n,e,r,t,o,a,i,c,u){return{$:9,f:n,g:[e,r,t,o,a,i,c,u]}}),m(function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return Kr(D(Zr,"This is not valid JSON! "+n.message,e))}}),m(mn));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?et(n.c):hn("null",e);case 3:return gn(e)?pn(n.b,e,b):hn("a LIST",e);case 4:return gn(e)?pn(n.b,e,bn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return Et(t)?t:Kr(D(Jr,r,t.a));case 7:r=n.e;if(!gn(e))return hn("an ARRAY",e);if(e.length<=r)return hn("a LONGER array. Need index "+r+" but only see "+e.length+" entries",e);t=mn(n.b,e[r]);return Et(t)?t:Kr(D(nt,r,t.a));case 8:if("object"!=typeof e||null===e||gn(e))return hn("an OBJECT",e);var o,a=P;for(o in e)if(e.hasOwnProperty(o)){t=mn(n.b,e[o]);if(!Et(t))return Kr(D(Jr,o,t.a));a={$:1,a:{a:o,b:t.a},b:a}}return et(bt(a));case 9:for(var i=n.f,c=n.g,u=0;u<c.length;u++){t=mn(c[u],e);if(!Et(t))return t;i=i(t.a)}return et(i);case 10:t=mn(n.b,e);return Et(t)?mn(n.h(t.a),e):t;case 11:for(var l=P,f=n.g;f.b;f=f.b){t=mn(f.a,e);if(Et(t))return t;l={$:1,a:t.a,b:l}}return Kr(rt(bt(l)));case 1:return Kr(D(Zr,n.a,e));case 0:return et(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;a<t;a++){var i=mn(n,e[a]);if(!Et(i))return Kr(D(nt,a,i.a));o[a]=i.a}return et(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function bn(e){return D(kt,e.length,function(n){return e[n]})}function hn(n,e){return Kr(D(Zr,"Expecting "+n,e))}function Tn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Tn(n.b,e.b);case 6:return n.d===e.d&&Tn(n.b,e.b);case 7:return n.e===e.e&&Tn(n.b,e.b);case 9:return n.f===e.f&&xn(n.g,e.g);case 10:return n.h===e.h&&Tn(n.b,e.b);case 11:return xn(n.g,e.g)}}function xn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;t<r;t++)if(!Tn(n[t],e[t]))return!1;return!0}var Sn=m(function(n,e){return JSON.stringify(e,null,n)+""});function Pn(n){return n}function yn(n){return{$:0,a:n}}s(function(n,e,r){return r[n]=e,r});var Mn=m(function(n,e){return{$:3,b:n,d:e}}),Cn=m(function(n,e){return{$:4,b:n,d:e}}),wn=0;function Ln(n){n={$:0,e:wn++,f:n,g:null,h:[]};return Vn(n),n}function $n(e){return{$:2,b:function(n){n({$:0,a:Ln(e)})},c:null}}function zn(n,e){n.h.push(e),Vn(n)}var Dn=m(function(e,r){return{$:2,b:function(n){zn(e,r),n({$:0,a:f})},c:null}}),Nn=!1,An=[];function Vn(n){if(An.push(n),!Nn){for(Nn=!0;n=An.shift();)!function(e){for(;e.f;){var n=e.f.$;if(0===n||1===n){for(;e.g&&e.g.$!==n;)e.g=e.g.i;if(!e.g)return;e.f=e.g.b(e.f.a),e.g=e.g.i}else{if(2===n)return e.f.c=e.f.b(function(n){e.f=n,Vn(e)});if(5===n){if(0===e.h.length)return;e.f=e.f.b(e.h.shift())}else e.g={$:3===n?0:1,b:e.f.b,i:e.g},e.f=e.f.d}}}(n);Nn=!1}}function _n(n,e,r,t,o,a){e=D(vn,n,e?e.flags:void 0);Et(e)||E(2);var i={},e=r(e.a),c=e.a,u=a(l,c),a=function(n,e){var r,t;for(t in Fn){var o=Fn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=function(n,e){var t={g:e,h:void 0},o=n.c,a=n.d,i=n.e,c=n.f;return t.h=Ln(D(Mn,function n(r){return D(Mn,n,{$:5,b:function(n){var e=n.a;return 0===n.$?N(a,t,e,r):i&&c?A(o,t,e.i,e.j,r):N(o,t,i?e.i:e.j,r)}})},n.b))}(o,e)}return r}(i,l);function l(n,e){n=D(t,n,c);u(c=n.a,e),jn(i,n.b,o(c))}return jn(i,e.b,o(c)),a?{ports:a}:{}}l(function(n,e,r,t){return _n(e,t,n.gE,n.hp,n.hk,function(){return function(){}})});var Fn={},Bn=m(function(e,r){return{$:2,b:function(n){e.g(r),n({$:0,a:f})},c:null}}),kn=m(function(n,e){return D(Dn,n.h,{$:0,a:e})});function En(e){return function(n){return{$:1,k:e,l:n}}}function Rn(n){return{$:2,m:n}}m(function(n,e){return{$:3,n:n,o:e}});var qn,Wn=[],Un=!1;function jn(n,e,r){if(Wn.push({p:n,q:e,r:r}),!Un){Un=!0;for(var o;o=Wn.shift();)!function(n,e){var r,t={};for(r in Hn(!0,o.q,t,null),Hn(!1,e,t,null),n)zn(n[r],{$:"fx",a:t[r]||{i:P,j:P}})}(o.p,o.r);Un=!1}}function Hn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return D(n?Fn[e].e:Fn[e].f,function(n){for(var e=r;e;e=e.t)n=e.s(n);return n},t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:P,j:P},n?r.i={$:1,a:e,b:r.i}:r.j={$:1,a:e,b:r.j},r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Hn(n,i.a,r,t);return;case 3:return void Hn(n,e.o,r,{s:e.n,t:t})}}m(function(n,e){return e}),m(function(e,r){return function(n){return e(r(n))}});var Gn="undefined"!=typeof document?document:{};function Yn(n){return{$:0,a:n}}l(function(n,e,r,t){t=t.node;return t.parentNode.replaceChild(oe(n,function(){}),t),{}});var Qn=m(function(a,i){return m(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:re(n),e:r,f:a,b:t}})})(void 0),In=m(function(a,i){return m(function(n,e){for(var r=[],t=0;e.b;e=e.b){var o=e.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:re(n),e:r,f:a,b:t}})})(void 0);m(function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}}),m(function(n,e){return{$:5,l:[n,e],m:function(){return n(e)},k:void 0}}),s(function(n,e,r){return{$:5,l:[n,e,r],m:function(){return D(n,e,r)},k:void 0}}),l(function(n,e,r,t){return{$:5,l:[n,e,r,t],m:function(){return N(n,e,r,t)},k:void 0}}),r(function(n,e,r,t,o){return{$:5,l:[n,e,r,t,o],m:function(){return A(n,e,r,t,o)},k:void 0}}),t(function(n,e,r,t,o,a){return{$:5,l:[n,e,r,t,o,a],m:function(){return V(n,e,r,t,o,a)},k:void 0}}),o(function(n,e,r,t,o,a,i){return{$:5,l:[n,e,r,t,o,a,i],m:function(){return C(n,e,r,t,o,a,i)},k:void 0}}),z(function(n,e,r,t,o,a,i,c){return{$:5,l:[n,e,r,t,o,a,i,c],m:function(){return x(n,e,r,t,o,a,i,c)},k:void 0}}),a(function(n,e,r,t,o,a,i,c,u){return{$:5,l:[n,e,r,t,o,a,i,c,u],m:function(){return p(n,e,r,t,o,a,i,c,u)},k:void 0}});var Xn=m(function(n,e){return{$:"a0",n:n,o:e}}),On=m(function(n,e){return{$:"a1",n:n,o:e}}),Kn=m(function(n,e){return{$:"a2",n:n,o:e}}),Zn=m(function(n,e){return{$:"a3",n:n,o:e}});s(function(n,e,r){return{$:"a4",n:e,o:{f:n,o:r}}}),m(function(n,e){return"a0"===e.$?D(Xn,e.n,function(n,e){var r=Ut(e);return{$:e.$,a:r?N(qt,r<3?ne:ee,Wt(n),e.a):D(Rt,n,e.a)}}(n,e.o)):e});var Jn,ne=m(function(n,e){return{a:n(e.a),b:e.b}}),ee=m(function(n,e){return{aI:n(e.aI),d2:e.d2,dR:e.dR}});function re(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;"a2"!==t?(r=e[t]||(e[t]={}),"a3"===t&&"class"===o?te(r,o,a):r[o]=a):"className"===o?te(e,o,a):e[o]=a}return e}function te(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function oe(n,e){var r=n.$;if(5===r)return oe(n.k||(n.k=n.m()),e);if(0===r)return Gn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=oe(t,a)).elm_event_node_ref=a,i}if(3===r)return ae(i=n.h(n.g),e,n.d),i;var i=n.f?Gn.createElementNS(n.f,n.c):Gn.createElement(n.c);qn&&"a"==n.c&&i.addEventListener("click",qn(i)),ae(i,e,n.d);for(var c=n.e,u=0;u<c.length;u++)i.appendChild(oe(1===r?c[u]:c[u].b,e));return i}function ae(n,e,r){for(var t in r){var o=r[t];"a1"===t?function(n,e){var r,t=n.style;for(r in e)t[r]=e[r]}(n,o):"a0"===t?function(n,e,r){var t,o=n.elmFs||(n.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(t,i)}i=function(u,n){function l(n){var e=l.q,r=mn(e.a,n);if(Et(r)){for(var t,o=Ut(e),e=r.a,a=o?o<3?e.a:e.aI:e,r=1==o?e.b:3==o&&e.d2,i=(r&&n.stopPropagation(),(2==o?e.b:3==o&&e.dR)&&n.preventDefault(),u);t=i.j;){if("function"==typeof t)a=t(a);else for(var c=t.length;c--;)a=t[c](a);i=i.p}i(a,r)}}return l.q=n,l}(e,a),n.addEventListener(t,i,Jn&&{passive:Ut(a)<2}),o[t]=i}else n.removeEventListener(t,i),o[t]=void 0}}(n,e,o):"a3"===t?function(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}(n,o):"a4"===t?function(n,e){for(var r in e){var t=e[r],o=t.f,t=t.o;void 0!==t?n.setAttributeNS(o,r,t):n.removeAttributeNS(o,r)}}(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){Jn=!0}}))}catch(n){}function ie(n,e){var r=[];return ue(n,e,r,0),r}function ce(n,e,r,t){t={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(t),t}function ue(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void ce(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;o<r;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,u=i.length,l=u===c.length;l&&u--;)l=i[u]===c[u];if(l)return void(e.k=n.k);e.k=e.m();var f=[];return ue(n.k,e.k,f,0),void(0<f.length&&ce(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var p=e.k;4===p.$;)v=!0,"object"!=typeof d?d=[d,p.j]:d.push(p.j),p=p.k;return v&&s.length!==d.length?void ce(r,0,t,e):((v?function(n,e){for(var r=0;r<n.length;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||ce(r,2,t,d),void ue(m,p,r,t+1));case 0:return void(n.a!==e.a&&ce(r,3,t,e.a));case 1:return void le(n,e,r,t,se);case 2:return void le(n,e,r,t,de);case 3:if(n.h!==e.h)return void ce(r,0,t,e);f=fe(n.d,e.d);f&&ce(r,4,t,f);f=e.i(n.g,e.g);return void(f&&ce(r,5,t,f))}}}function le(n,e,r,t,o){var a;n.c===e.c&&n.f===e.f?((a=fe(n.d,e.d))&&ce(r,4,t,a),o(n,e,r,t)):ce(r,0,t,e)}function fe(n,e,r){var t,o,a,i,c;for(o in n)"a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o?o in e?(a=n[o])===(i=e[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(n,e){return n.$==e.$&&Tn(n.a,e.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null:(i=fe(n[o],e[o]||{},o))&&((t=t||{})[o]=i);for(c in e)c in n||((t=t||{})[c]=e[c]);return t}function se(n,e,r,t){var o=n.e,a=e.e,n=o.length,e=a.length;e<n?ce(r,6,t,{v:e,i:n-e}):n<e&&ce(r,7,t,{v:n,e:a});for(var i=n<e?n:e,c=0;c<i;c++){var u=o[c];ue(u,a[c],r,++t),t+=u.b||0}}function de(n,e,r,t){for(var o=[],a={},i=[],c=n.e,u=e.e,l=c.length,f=u.length,s=0,d=0,v=t;s<l&&d<f;){var m,p=(m=c[s]).a,g=(L=u[d]).a,b=m.b,h=L.b,T=void 0,x=void 0;if(p!==g){var S,P,y,M,C=c[s+1],w=u[d+1];if(C&&(P=C.b,x=g===(S=C.a)),w&&(M=w.b,T=p===(y=w.a)),T&&x)ue(b,M,o,++v),me(a,o,p,h,d,i),v+=b.b||0,pe(a,o,p,P,++v),v+=P.b||0,s+=2,d+=2;else if(T)v++,me(a,o,g,h,d,i),ue(b,M,o,v),v+=b.b||0,s+=1,d+=2;else if(x)pe(a,o,p,b,++v),v+=b.b||0,ue(P,h,o,++v),v+=P.b||0,s+=2,d+=1;else{if(!C||S!==y)break;pe(a,o,p,b,++v),me(a,o,g,h,d,i),v+=b.b||0,ue(P,M,o,++v),v+=P.b||0,s+=2,d+=2}}else ue(b,h,o,++v),v+=b.b||0,s++,d++}for(;s<l;)pe(a,o,(m=c[s]).a,b=m.b,++v),v+=b.b||0,s++;for(;d<f;){var L,$=$||[];me(a,o,(L=u[d]).a,L.b,void 0,$),d++}(0<o.length||0<i.length||$)&&ce(r,8,t,{w:o,x:i,y:$})}var ve="_elmW6BL";function me(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return ue(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}me(n,e,r+ve,t,o,a)}function pe(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return ue(t,a.z,i,o),void ce(e,9,o,{w:i,A:a})}pe(n,e,r+ve,t,o)}else{e=ce(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:e}}}function ge(n,e,r,t){!function n(e,r,t,o,a,i,c){var u=t[o];var l=u.r;for(;l===a;){var f,s=u.$;if(1===s?ge(e,r.k,u.s,c):8===s?(u.t=e,u.u=c,0<(f=u.s.w).length&&n(e,r,f,0,a,i,c)):9===s?(u.t=e,u.u=c,(s=u.s)&&(s.A.s=e,0<(f=s.w).length&&n(e,r,f,0,a,i,c))):(u.t=e,u.u=c),!(u=t[++o])||(l=u.r)>i)return o}var d=r.$;if(4===d){for(var v=r.k;4===v.$;)v=v.k;return n(e,v,t,o,a+1,i,e.elm_event_node_ref)}var m=r.e;var p=e.childNodes;for(var g=0;g<m.length;g++){var b=1===d?m[g]:m[g].b,h=++a+(b.b||0);if(a<=l&&l<=h&&(o=n(p[g],b,t,o,a,h,c),!(u=t[o])||(l=u.r)>i))return o;a=h}return o}(n,e,r,0,0,e.b,t)}function be(n,e,r,t){return 0===r.length?n:(ge(n,e,r,t),he(n,r))}function he(n,e){for(var r=0;r<e.length;r++){var t=e[r],o=t.t,t=function(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,r=oe(e,r);r.elm_event_node_ref||(r.elm_event_node_ref=n.elm_event_node_ref);t&&r!==n&&t.replaceChild(r,n);return r}(n,e.s,e.u);case 4:return ae(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return he(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;t<r.i;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];t<o.length;t++)n.insertBefore(oe(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=he(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(!n)return;for(var r=Gn.createDocumentFragment(),t=0;t<n.length;t++){var o=n[t].A;r.appendChild(2===o.c?o.s:oe(o.z,e.u))}return r}(r.y,e);n=he(n,r.w);for(var o=r.x,a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:oe(c.z,e.u);n.insertBefore(c,n.childNodes[i.r])}t&&n.appendChild(t);return n}(n,e);case 5:return e.s(n);default:E(10)}}(o,t);o===n&&(n=t)}return n}function Te(n){if(3===n.nodeType)return{$:0,a:n.textContent};if(1!==n.nodeType)return{$:0,a:""};for(var e=P,r=n.attributes,t=r.length;t--;)var o=r[t],e={$:1,a:D(Zn,o.name,o.value),b:e};for(var a=n.tagName.toLowerCase(),i=P,c=n.childNodes,t=c.length;t--;)i={$:1,a:Te(c[t]),b:i};return N(Qn,a,e,i)}var xe=l(function(e,n,r,i){return _n(n,i,e.gE,e.hp,e.hk,function(r,n){var t=e.hs,o=i.node,a=Te(o);return ye(n,function(n){var e=t(n),n=ie(a,e);o=be(o,a,n,r),a=e})})}),Se=(l(function(e,n,r,t){return _n(n,t,e.gE,e.hp,e.hk,function(t,n){var o=e.d_&&e.d_(t),a=e.hs,i=Gn.title,c=Gn.body,u=Te(c);return ye(n,function(n){qn=o;var e=a(n),r=Qn("body")(P)(e.c7),n=ie(u,r);c=be(c,u,n,t),u=r,qn=0,i!==e.hm&&(Gn.title=i=e.hm)})})}),"undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)}),Pe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)};function ye(r,t){t(r);var o=0;function a(){o=1===o?0:(Pe(a),t(r),1)}return function(n,e){r=n,e?(t(r),2===o&&(o=1)):(0===o&&Pe(a),o=2)}}m(function(n,e){return D(To,eo,{$:2,b:function(){e&&history.go(e),n()},c:null})}),m(function(n,e){return D(To,eo,{$:2,b:function(){history.pushState({},"",e),n()},c:null})}),m(function(n,e){return D(To,eo,{$:2,b:function(){history.replaceState({},"",e),n()},c:null})});var Me={addEventListener:function(){},removeEventListener:function(){}},Ce="undefined"!=typeof document?document:Me,we="undefined"!=typeof window?window:Me,Le=s(function(e,r,t){return $n({$:2,b:function(){function n(n){Ln(t(n))}return e.addEventListener(r,n,Jn&&{passive:!0}),function(){e.removeEventListener(r,n)}},c:null})}),$e=m(function(n,e){e=mn(n,e);return Et(e)?ot(e.a):at});function ze(r,t){return{$:2,b:function(e){Pe(function(){var n=document.getElementById(r);e(n?{$:0,a:t(n)}:{$:1,a:jt(r)})})},c:null}}function De(e){return{$:2,b:function(n){Pe(function(){n({$:0,a:e()})})},c:null}}function Ne(){var n=Ce.body,e=Ce.documentElement;return{k:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),l:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}}m(function(e,n){return ze(n,function(n){return n[e](),f})}),m(function(n,e){return De(function(){return we.scroll(n,e),f})}),s(function(n,e,r){return ze(n,function(n){return n.scrollLeft=e,n.scrollTop=r,f})});var Ae=t(function(a,i,c,u,l,n){var f=9728!==i&&9729!==i;return{$:2,b:function(r){var t=new Image;function o(n){var e=n.createTexture();return n.bindTexture(n.TEXTURE_2D,e),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,l),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,a),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,u),f&&n.generateMipmap(n.TEXTURE_2D),n.bindTexture(n.TEXTURE_2D,null),e}t.onload=function(){var n=t.width,e=t.height;r(0==(n&n-1)&&0==(e&e-1)||!f&&33071===c&&33071===u?{$:0,a:{$:0,gf:o,a:n,b:e}}:{$:1,a:D($o,n,e)})},t.onerror=function(){r({$:1,a:Lo})},"data:"!==n.slice(0,5)&&(t.crossOrigin="Anonymous"),t.src=n},c:null}}),Ve=0;function _e(n,e){for(;e.b;e=e.b)n(e.a)}function Fe(n){for(var e=0;n.b;n=n.b)e++;return e}function Be(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)}function ke(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)}var Ee="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Re=r(function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}}),qe=m(function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)}),We=m(function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)}),Ue=m(function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)}),je=m(function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),He=m(function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)}),Ge=m(function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)}),Ye=m(function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)}),Qe=m(function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)}),Ie=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],Xe=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},Be,ke,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function Oe(n,e,r){r=n.createShader(r);return n.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(r),r}function Ke(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function Ze(n,e,r,t){for(var c=r.a.eu,u=[],o=0;o<c;o++)u.push(String.fromCharCode(97+o));var a=Ke(n,e.type);if(void 0===a)throw Error("No info available for: "+e.type);var i=0,l=a.size*a.arraySize*c,f=new a.type(Fe(r.b)*l);_e(function(n){!function(e,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)e[t++]=1===r?o[a]:o[a][i];else u.forEach(function(n){for(i=0;i<r;i++)e[t++]=1===r?o[n][a]:o[n][a][i]})}(f,a.size*a.arraySize,i,n,t[e.name]||e.name),i+=l},r.b);r=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),r}function Je(n,e){if(0<e.a.eF){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint16Array(Fe(n)*e),o=0;return _e(function(n){if(1===e)t[o++]=n;else for(r=0;r<e;r++)t[o++]=n[String.fromCharCode(97+r)]},n),t}(e.c,e.a.eF);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.eu*Fe(e.b),indexBuffer:null,buffers:{}}}var nr=m(function(h,n){var T=h.f,x=T.gl;return x&&(x.viewport(0,0,x.drawingBufferWidth,x.drawingBufferHeight),T.depthTest.b||(x.depthMask(!0),T.depthTest.b=!0),T.stencilTest.c!==T.STENCIL_WRITEMASK&&(x.stencilMask(T.STENCIL_WRITEMASK),T.stencilTest.c=T.STENCIL_WRITEMASK),Be(T),ke(T),x.clear(x.COLOR_BUFFER_BIT|x.DEPTH_BUFFER_BIT|x.STENCIL_BUFFER_BIT),_e(function(n){if(n.d.b.b){var e,r,t,o,a;if(n.b.id&&n.c.id&&(i=T.programs[e=n.b.id+"#"+n.c.id]),!i){n.b.id?r=T.shaders[n.b.id]:n.b.id=Ve++,r||(r=Oe(x,n.b.src,x.VERTEX_SHADER),T.shaders[n.b.id]=r),n.c.id?t=T.shaders[n.c.id]:n.c.id=Ve++,t||(t=Oe(x,n.c.src,x.FRAGMENT_SHADER),T.shaders[n.c.id]=t);var i,c=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(x,r,t);(i={glProgram:c,attributes:Object.assign({},n.b.attributes,n.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,n,e,r){var t=e.glProgram,i=e.currentUniforms,c=0,u=n.f;for(var o={},l=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<l;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(n,e){var r=e.name,t=a.getUniformLocation(n,r);switch(e.type){case a.INT:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};case a.FLOAT:return function(n){i[r]!==n&&(a.uniform1f(t,n),i[r]=n)};case a.FLOAT_VEC2:return function(n){i[r]!==n&&(a.uniform2f(t,n[0],n[1]),i[r]=n)};case a.FLOAT_VEC3:return function(n){i[r]!==n&&(a.uniform3f(t,n[0],n[1],n[2]),i[r]=n)};case a.FLOAT_VEC4:return function(n){i[r]!==n&&(a.uniform4f(t,n[0],n[1],n[2],n[3]),i[r]=n)};case a.FLOAT_MAT4:return function(n){i[r]!==n&&(a.uniformMatrix4fv(t,!1,new Float32Array(n)),i[r]=n)};case a.SAMPLER_2D:var o=c++;return function(n){a.activeTexture(a.TEXTURE0+o);var e=u.textures.get(n);e||(e=n.gf(a),u.textures.set(n,e)),a.bindTexture(a.TEXTURE_2D,e),i[r]!==n&&(a.uniform1i(t,o),i[r]=n)};case a.BOOL:return function(n){i[r]!==n&&(a.uniform1i(t,n),i[r]=n)};default:return function(){}}}(t,s)}return o}(x,h,i,Object.assign({},n.b.uniforms,n.c.uniforms));for(var u=x.getProgramParameter(c,x.ACTIVE_ATTRIBUTES),l=0;l<u;l++){var f=x.getActiveAttrib(c,l),s=x.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}T.programs[e=n.b.id+"#"+n.c.id]=i}T.lastProgId!==e&&(x.useProgram(i.glProgram),T.lastProgId=e),o=i.uniformSetters,Object.keys(a=n.e).forEach(function(n){var e=o[n];e&&e(a[n])});var d=T.buffers.get(n.d);for(d||(d=Je(x,n.d),T.buffers.set(n.d,d)),l=0;l<i.activeAttributes.length;l++){s=i.activeAttributeLocations[l],void 0===d.buffers[(f=i.activeAttributes[l]).name]&&(d.buffers[f.name]=Ze(x,f,n.d,i.attributes)),x.bindBuffer(x.ARRAY_BUFFER,d.buffers[f.name]);var v=Ke(x,f.type);if(1===v.arraySize)x.enableVertexAttribArray(s),x.vertexAttribPointer(s,v.size,v.baseType,!1,0,0);else for(var m=4*v.size,p=m*v.arraySize,g=0;g<v.arraySize;g++)x.enableVertexAttribArray(s+g),x.vertexAttribPointer(s+g,v.size,v.baseType,!1,p,m*g)}for(T.toggle=!T.toggle,_e(al(T),n.a),l=0;l<9;l++){var b=T[Ie[l]];b.toggle!==T.toggle&&b.enabled&&(Xe[l](T),b.enabled=!1,b.toggle=T.toggle)}d.indexBuffer?(x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,d.indexBuffer),x.drawElements(n.d.a.ff,d.numIndices,x.UNSIGNED_SHORT,0)):x.drawArrays(n.d.a.ff,0,d.numIndices)}},h.g)),n}),er=s(function(n,e,r){return function(n,e,r,t){return{$:3,d:re(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},ur,lr)}),rr=m(function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a}),tr=m(function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push(function(n){n.clearDepth(e.a)})}),or=m(function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push(function(n){n.clearStencil(e.a)})}),ar=m(function(n){n.contextAttributes.antialias=!0}),ir=m(function(n,e){n.sceneSettings.push(function(n){n.clearColor(e.a,e.b,e.c,e.d)})}),cr=m(function(n){n.contextAttributes.preserveDrawingBuffer=!0});function ur(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};_e(function(n){return D(ol,e,n)},n.h);var r=Gn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach(function(n){n(t)}),t.getExtension("OES_standard_derivatives"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ee(function(){return D(nr,n,r)})):(r=Gn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function lr(n,e){return e.f=n.f,nr(e)}var fr=m(function(n,e){return new Float64Array([n,e])});function sr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1])}m(function(n,e){return new Float64Array([n,e[1]])}),m(function(n,e){return new Float64Array([e[0],n])}),m(function(n,e){var r=new Float64Array(2);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r}),m(function(n,e){var r=new Float64Array(2);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r}),m(function(n,e){var r=new Float64Array(2);r[0]=n[0]-e[0],r[1]=n[1]-e[1];e=1/sr(r);return r[0]=r[0]*e,r[1]=r[1]*e,r}),m(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return Math.sqrt(r*r+e*e)}),m(function(n,e){var r=n[0]-e[0],e=n[1]-e[1];return r*r+e*e}),m(function(n,e){var r=new Float64Array(2);return r[0]=e[0]*n,r[1]=e[1]*n,r}),m(function(n,e){return n[0]*e[0]+n[1]*e[1]});var dr=new Float64Array(3),vr=new Float64Array(3),mr=new Float64Array(3),pr=s(function(n,e,r){return new Float64Array([n,e,r])});function gr(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r}function br(n,e,r){return void 0===r&&(r=new Float64Array(3)),Tr(gr(n,e,r),r)}function hr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2])}function Tr(n,e){void 0===e&&(e=new Float64Array(3));var r=1/hr(n);return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e}function xr(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]}m(function(n,e){return new Float64Array([n,e[1],e[2]])}),m(function(n,e){return new Float64Array([e[0],n,e[2]])}),m(function(n,e){return new Float64Array([e[0],e[1],n])}),m(function(n,e){var r=new Float64Array(3);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r}),m(gr),m(br),m(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return Math.sqrt(r*r+t*t+e*e)}),m(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],e=n[2]-e[2];return r*r+t*t+e*e});var Sr=m(function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])});function Pr(n,e,r){return void 0===r&&(r=new Float64Array(3)),r[0]=n[1]*e[2]-n[2]*e[1],r[1]=n[2]*e[0]-n[0]*e[2],r[2]=n[0]*e[1]-n[1]*e[0],r}m(xr),m(Pr),m(function(n,e){var r,t=dr,o=new Float64Array(3);return t[0]=n[3],t[1]=n[7],t[2]=n[11],r=xr(e,t)+n[15],t[0]=n[0],t[1]=n[4],t[2]=n[8],o[0]=(xr(e,t)+n[12])/r,t[0]=n[1],t[1]=n[5],t[2]=n[9],o[1]=(xr(e,t)+n[13])/r,t[0]=n[2],t[1]=n[6],t[2]=n[10],o[2]=(xr(e,t)+n[14])/r,o});var yr=l(function(n,e,r,t){return new Float64Array([n,e,r,t])});function Mr(n){return Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]+n[3]*n[3])}m(function(n,e){return new Float64Array([n,e[1],e[2],e[3]])}),m(function(n,e){return new Float64Array([e[0],n,e[2],e[3]])}),m(function(n,e){return new Float64Array([e[0],e[1],n,e[3]])}),m(function(n,e){return new Float64Array([e[0],e[1],e[2],n])}),m(function(n,e){var r=new Float64Array(4);return r[0]=n[0]+e[0],r[1]=n[1]+e[1],r[2]=n[2]+e[2],r[3]=n[3]+e[3],r}),m(function(n,e){var r=new Float64Array(4);return r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3],r}),m(function(n,e){var r=new Float64Array(4);r[0]=n[0]-e[0],r[1]=n[1]-e[1],r[2]=n[2]-e[2],r[3]=n[3]-e[3];e=1/Mr(r);return r[0]=r[0]*e,r[1]=r[1]*e,r[2]=r[2]*e,r[3]=r[3]*e,r}),m(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return Math.sqrt(r*r+t*t+o*o+e*e)}),m(function(n,e){var r=n[0]-e[0],t=n[1]-e[1],o=n[2]-e[2],e=n[3]-e[3];return r*r+t*t+o*o+e*e}),m(function(n,e){var r=new Float64Array(4);return r[0]=e[0]*n,r[1]=e[1]*n,r[2]=e[2]*n,r[3]=e[3]*n,r}),m(function(n,e){return n[0]*e[0]+n[1]*e[1]+n[2]*e[2]+n[3]*e[3]});var Cr=new Float64Array(16),wr=new Float64Array(16);function Lr(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2*o/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*o/(t-r),i[6]=0,i[7]=0,i[8]=(e+n)/(e-n),i[9]=(t+r)/(t-r),i[10]=-(a+o)/(a-o),i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*a*o/(a-o),i[15]=0,i}function $r(n,e,r,t,o,a){var i=new Float64Array(16);return i[0]=2/(e-n),i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2/(t-r),i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-2/(a-o),i[11]=0,i[12]=-(e+n)/(e-n),i[13]=-(t+r)/(t-r),i[14]=-(a+o)/(a-o),i[15]=1,i}function zr(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[3],c=n[4],u=n[5],l=n[6],f=n[7],s=n[8],d=n[9],v=n[10],m=n[11],p=n[12],g=n[13],b=n[14],h=n[15],T=e[0],x=e[1],S=e[2],P=e[3],y=e[4],M=e[5],C=e[6],w=e[7],L=e[8],$=e[9],z=e[10],D=e[11],N=e[12],A=e[13],n=e[14],e=e[15];return r[0]=t*T+c*x+s*S+p*P,r[1]=o*T+u*x+d*S+g*P,r[2]=a*T+l*x+v*S+b*P,r[3]=i*T+f*x+m*S+h*P,r[4]=t*y+c*M+s*C+p*w,r[5]=o*y+u*M+d*C+g*w,r[6]=a*y+l*M+v*C+b*w,r[7]=i*y+f*M+m*C+h*w,r[8]=t*L+c*$+s*z+p*D,r[9]=o*L+u*$+d*z+g*D,r[10]=a*L+l*$+v*z+b*D,r[11]=i*L+f*$+m*z+h*D,r[12]=t*N+c*A+s*n+p*e,r[13]=o*N+u*A+d*n+g*e,r[14]=a*N+l*A+v*n+b*e,r[15]=i*N+f*A+m*n+h*e,r}function Dr(n,e,r){var t=new Float64Array(16);return t[0]=n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Nr(n,e,r){var t=new Float64Array(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n,t[13]=e,t[14]=r,t[15]=1,t}new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),t(Lr),l(function(n,e,r,t){var o=r*Math.tan(n*Math.PI/360),n=-o;return Lr(n*e,o*e,n,o,r,t)}),t($r),l(function(n,e,r,t){return $r(n,e,r,t,-1,1)}),m(zr),m(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=n[4],c=n[5],u=n[6],l=n[8],f=n[9],s=n[10],d=n[12],v=n[13],m=n[14],p=e[0],g=e[1],b=e[2],h=e[4],T=e[5],x=e[6],S=e[8],P=e[9],y=e[10],M=e[12],n=e[13],e=e[14];return r[0]=t*p+i*g+l*b,r[1]=o*p+c*g+f*b,r[2]=a*p+u*g+s*b,r[3]=0,r[4]=t*h+i*T+l*x,r[5]=o*h+c*T+f*x,r[6]=a*h+u*T+s*x,r[7]=0,r[8]=t*S+i*P+l*y,r[9]=o*S+c*P+f*y,r[10]=a*S+u*P+s*y,r[11]=0,r[12]=t*M+i*n+l*e+d,r[13]=o*M+c*n+f*e+v,r[14]=a*M+u*n+s*e+m,r[15]=1,r}),m(function(n,e){var r=new Float64Array(16),t=(e=Tr(e,dr))[0],o=e[1],a=e[2],i=Math.cos(n),e=1-i,n=Math.sin(n);return r[0]=t*t*e+i,r[1]=o*t*e+a*n,r[2]=a*t*e-o*n,r[3]=0,r[4]=t*o*e-a*n,r[5]=o*o*e+i,r[6]=o*a*e+t*n,r[7]=0,r[8]=t*a*e+o*n,r[9]=o*a*e-t*n,r[10]=a*a*e+i,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}),s(function(n,e,r){var t=new Float64Array(16),o=1/hr(e),a=e[0]*o,i=e[1]*o,c=e[2]*o,u=Math.cos(n),l=1-u,f=Math.sin(n),s=a*f,d=i*f,v=c*f,m=a*i*l,p=a*c*l,g=i*c*l,b=a*a*l+u,h=m+v,T=p-d,x=m-v,S=i*i*l+u,P=g+s,y=p+d,M=g-s,C=c*c*l+u,e=r[0],o=r[1],n=r[2],f=r[3],a=r[4],m=r[5],v=r[6],i=r[7],p=r[8],d=r[9],g=r[10],s=r[11],c=r[12],l=r[13],u=r[14],r=r[15];return t[0]=e*b+a*h+p*T,t[1]=o*b+m*h+d*T,t[2]=n*b+v*h+g*T,t[3]=f*b+i*h+s*T,t[4]=e*x+a*S+p*P,t[5]=o*x+m*S+d*P,t[6]=n*x+v*S+g*P,t[7]=f*x+i*S+s*P,t[8]=e*y+a*M+p*C,t[9]=o*y+m*M+d*C,t[10]=n*y+v*M+g*C,t[11]=f*y+i*M+s*C,t[12]=c,t[13]=l,t[14]=u,t[15]=r,t}),s(Dr),l(function(n,e,r,t){var o=new Float64Array(16);return o[0]=t[0]*n,o[1]=t[1]*n,o[2]=t[2]*n,o[3]=t[3]*n,o[4]=t[4]*e,o[5]=t[5]*e,o[6]=t[6]*e,o[7]=t[7]*e,o[8]=t[8]*r,o[9]=t[9]*r,o[10]=t[10]*r,o[11]=t[11]*r,o[12]=t[12],o[13]=t[13],o[14]=t[14],o[15]=t[15],o}),m(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],n=n[2];return r[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r[4]=e[4]*o,r[5]=e[5]*o,r[6]=e[6]*o,r[7]=e[7]*o,r[8]=e[8]*n,r[9]=e[9]*n,r[10]=e[10]*n,r[11]=e[11]*n,r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15],r}),s(Nr),l(function(n,e,r,t){var o=new Float64Array(16),a=t[0],i=t[1],c=t[2],u=t[3],l=t[4],f=t[5],s=t[6],d=t[7],v=t[8],m=t[9],p=t[10],g=t[11];return o[0]=a,o[1]=i,o[2]=c,o[3]=u,o[4]=l,o[5]=f,o[6]=s,o[7]=d,o[8]=v,o[9]=m,o[10]=p,o[11]=g,o[12]=a*n+l*e+v*r+t[12],o[13]=i*n+f*e+m*r+t[13],o[14]=c*n+s*e+p*r+t[14],o[15]=u*n+d*e+g*r+t[15],o}),m(function(n,e){var r=new Float64Array(16),t=n[0],o=n[1],a=n[2],i=e[0],c=e[1],u=e[2],l=e[3],f=e[4],s=e[5],d=e[6],v=e[7],m=e[8],p=e[9],g=e[10],n=e[11];return r[0]=i,r[1]=c,r[2]=u,r[3]=l,r[4]=f,r[5]=s,r[6]=d,r[7]=v,r[8]=m,r[9]=p,r[10]=g,r[11]=n,r[12]=i*t+f*o+m*a+e[12],r[13]=c*t+s*o+p*a+e[13],r[14]=u*t+d*o+g*a+e[14],r[15]=l*t+v*o+n*a+e[15],r}),s(function(n,e,r){var t=br(n,e,dr),o=Tr(Pr(r,t,vr),vr),a=Tr(Pr(t,o,mr),mr),e=Cr,r=wr;return e[0]=o[0],e[1]=a[0],e[2]=t[0],e[3]=0,e[4]=o[1],e[5]=a[1],e[6]=t[1],e[7]=0,e[8]=o[2],e[9]=a[2],e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,r[e[14]=0]=e[15]=1,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=1,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=1,r[11]=0,r[12]=-n[0],r[13]=-n[1],r[14]=-n[2],r[15]=1,zr(e,r)}),s(function(n,e,r){var t=new Float64Array(16);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=0,t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=0,t[8]=r[0],t[9]=r[1],t[10]=r[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t});var Ar=m(function(n,e){return n&e});function Vr(n){return D(lt,"\n    ",D(ft,"\n",n))}function _r(n){return N(st,m(function(n,e){return e+1}),0,n)}function Fr(n){return 97<=(n=gt(n))&&n<=122}function Br(n){return(n=gt(n))<=90&&65<=n}function kr(n){return Fr(n)||Br(n)||function(n){n=gt(n);return n<=57&&48<=n}(n)}function Er(n){return n}function Rr(n){return n}function qr(n){return N(oo,uo(Gr),ro(P),n)}m(function(n,e){return n|e}),m(function(n,e){return n^e});var Wr=m(function(n,e){return e<<n}),Me=(m(function(n,e){return e>>n}),m(function(n,e){return e>>>n})),Ur=1,jr=2,Hr=0,Gr=g,Yr=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=N(n,r.b,r.c,N(Yr,n,e,r.e));n=o,e=a,r=t}}),Qr=function(n){return N(Yr,s(function(n,e,r){return D(Gr,{a:n,b:e},r)}),P,n)},Ir=B,Xr=s(function(r,n,e){var t=e.c,e=e.d,o=m(function(n,e){return N(Ir,n.$?r:o,e,n.a)});return N(Ir,o,N(Ir,r,n,e),t)}),Or=function(n){return N(Xr,Gr,P,n)},Kr=function(n){return{$:1,a:n}},Zr=m(function(n,e){return{$:3,a:n,b:e}}),Jr=m(function(n,e){return{$:0,a:n,b:e}}),nt=m(function(n,e){return{$:1,a:n,b:e}}),et=function(n){return{$:0,a:n}},rt=function(n){return{$:2,a:n}},tt=R,ot=function(n){return{$:0,a:n}},at={$:1},it=en,ct=Sn,ut=an,lt=m(function(n,e){return D(J,n,y(e))}),ft=m(function(n,e){return b(D(Z,n,e))}),st=s(function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=D(n,r.a,e);n=o,e=a,r=t}}),dt=M,vt=s(function(n,e,r){for(;;){if(1<=h(n,e))return r;var t=n,o=e-1,a=D(Gr,e,r);n=t,e=o,r=a}}),mt=m(function(n,e){return N(vt,n,e,P)}),pt=m(function(n,e){return N(dt,n,D(mt,0,_r(e)-1),e)}),gt=function(n){var e=n.charCodeAt(0);return e<55296||56319<e?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},bt=function(n){return N(st,Gr,P,n)},ht=function(n){var e=n.charCodeAt(0);return isNaN(e)?at:ot(e<55296||56319<e?{a:n[0],b:n.slice(1)}:{a:n[0]+n[1],b:n.slice(2)})},Tt=m(function(n,e){return"\n\n("+ut(n+1)+(") "+Vr(xt(e)))}),xt=function(n){return D(St,n,P)},St=m(function(n,e){n:for(;;)switch(n.$){case 0:var r=n.a,t=n.b,o=function(){var n=ht(r);if(1===n.$)return!1;var e=n.a,n=e.b;return function(n){return Fr(n)||Br(n)}(e.a)&&D(it,kr,n)}(),a=t,o=D(Gr,o?"."+r:"['"+r+"']",e);n=a,e=o;continue n;case 1:var t=n.b,i="["+ut(n.a)+"]",a=t,o=D(Gr,i,e);n=a,e=o;continue n;case 2:var c=n.a;if(c.b){if(c.b.b){var u=(e.b?"The Json.Decode.oneOf at json"+D(lt,"",bt(e)):"Json.Decode.oneOf")+" failed in the following "+ut(_r(c))+" ways:";return D(lt,"\n\n",D(Gr,u,D(pt,Tt,c)))}n=a=t=c.a,e=o=e;continue n}return"Ran into a Json.Decode.oneOf with no possibilities"+(e.b?" at json"+D(lt,"",bt(e)):"!");default:i=n.a,c=n.b;return(u=e.b?"Problem with the value at json"+D(lt,"",bt(e))+":\n\n    ":"Problem with the given value:\n\n")+(Vr(D(ct,4,c))+"\n\n")+i}}),Pt=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),yt=[],Mt=Y,Ct=m(function(n,e){return O(e)/O(n)}),wt=Mt(D(Ct,2,32)),Lt=A(Pt,0,wt,yt,yt),$t=L,zt=(m(function(n,e){return n(e)}),m(function(n,e){return e(n)}),Q),Dt=function(n){return n.length},Nt=m(function(n,e){return 0<h(n,e)?n:e}),At=$,Vt=m(function(n,e){for(;;){var r=D(At,32,n),t=r.b,r=D(Gr,{$:0,a:r.a},e);if(!t.b)return bt(r);n=t,e=r}}),_t=m(function(n,e){for(;;){var r=Mt(e/32);if(1===r)return D(At,32,n).a;n=D(Vt,n,P),e=r}}),Ft=m(function(n,e){if(e.n){var r=32*e.n,t=zt(D(Ct,32,r-1)),n=n?bt(e.B):e.B,n=D(_t,n,e.n);return A(Pt,Dt(e.q)+r,D(Nt,5,t*wt),n,e.q)}return A(Pt,Dt(e.q),wt,yt,e.q)}),Bt=r(function(n,e,r,t,o){for(;;){if(e<0)return D(Ft,!1,{B:t,n:r/32|0,q:o});var a={$:1,a:N($t,32,e,n)};n=n,e=e-32,r=r,t=D(Gr,a,t),o=o}}),kt=m(function(n,e){if(0<n){var r=n%32,t=N($t,r,n-r,e);return V(Bt,e,n-r-32,n,P,t)}return Lt}),Et=function(n){return!n.$},Rt=sn,qt=dn,Wt=function(n){return{$:0,a:n}},Ut=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},jt=Rr,Ht=t(function(n,e,r,t,o,a){return{ez:a,eC:e,fl:t,fo:r,fr:n,fs:o}}),Gt=rn,Yt=function(n){return n.length},Qt=nn,It=m(function(n,e){return n<1?e:N(Qt,n,Yt(e),e)}),Xt=on,Ot=m(function(n,e){return n<1?"":N(Qt,0,n,e)}),Kt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;o<n.length;++o){var a=n.charCodeAt(o);if(a<48||57<a)return at;e=10*e+a-48}return o==t?at:ot(45==r?-e:e)},Zt=r(function(n,e,r,t,o){if(""===o||D(Gt,"@",o))return at;var a=D(Xt,":",o);if(a.b){if(a.b.b)return at;var i=a.a,a=Kt(D(It,i+1,o));if(1===a.$)return at;a=a;return ot(C(Ht,n,D(Ot,i,o),a,e,r,t))}return ot(C(Ht,n,o,at,e,r,t))}),Jt=l(function(n,e,r,t){if(""===t)return at;var o=D(Xt,"/",t);if(o.b){o=o.a;return V(Zt,n,D(It,o,t),e,r,D(Ot,o,t))}return V(Zt,n,"/",e,r,t)}),no=s(function(n,e,r){if(""===r)return at;var t=D(Xt,"?",r);if(t.b){t=t.a;return A(Jt,n,ot(D(It,t+1,r)),e,D(Ot,t,r))}return A(Jt,n,at,e,r)}),eo=(m(function(n,e){if(""===e)return at;var r=D(Xt,"#",e);if(r.b){r=r.a;return N(no,n,ot(D(It,r+1,e)),D(Ot,r,e))}return N(no,n,at,e)}),function(){for(;;)0}),ro=yn,nn=ro(0),to=l(function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){t=c.a,a=c.b;if(a.b){c=a.b;return D(n,o,D(n,i,D(n,t,D(n,a.a,500<r?N(st,n,e,bt(c)):A(to,n,e,r+1,c)))))}return D(n,o,D(n,i,D(n,t,e)))}return D(n,o,D(n,i,e))}return D(n,o,e)}return e}),oo=s(function(n,e,r){return A(to,n,e,0,r)}),ao=m(function(r,n){return N(oo,m(function(n,e){return D(Gr,r(n),e)}),P,n)}),io=Mn,co=m(function(e,n){return D(io,function(n){return ro(e(n))},n)}),uo=s(function(r,n,t){return D(io,function(e){return D(io,function(n){return ro(D(r,e,n))},t)},n)}),lo=Bn,fo=m(function(n,e){return $n(D(io,lo(n),e))}),on=s(function(n,e){return D(co,function(){return 0},qr(D(ao,fo(n),e)))}),tn=s(function(){return ro(0)}),Bn=m(function(n,e){return D(co,n,e)});function so(n){return{$:5,a:n}}function vo(n){return{$:3,a:n}}function mo(n){return{$:4,a:n}}function po(n){return{$:0,a:n}}function go(n){return N(st,m(function(n,e){return N(Uo,n.a,n.b,e)}),ko,n)}function bo(e){return D(_o,function(n){return D(Xo,Ho("Unrecognized key: "+n),D(Qo,D(Fo,e,Wt),D(Yo,n,jo)))},D(Go,"key",Io))}Fn.Task={b:nn,c:on,d:tn,e:Bn,f:void 0};var ho=En("Task"),To=m(function(n,e){return ho(D(co,n,e))}),tn=xe,xo={$:0},So=m(function(n,e){return{$:1,a:n,b:e}}),Po=s(function(n,e,r){return n(e(r))}),yo=Cn,Mo=m(function(n,e){return ho(D(yo,D(Po,D(Po,ro,n),Kr),D(io,D(Po,D(Po,ro,n),et),e)))}),Co=Rn,wo=De(function(){return{fz:Ne(),hu:{fS:we.pageXOffset,fT:we.pageYOffset,k:Ce.documentElement.clientWidth,l:Ce.documentElement.clientHeight}}}),Lo={$:0},$o=m(function(n,e){return{$:1,a:n,b:e}}),zo=m(function(n,o){var e=n.cH,r=n.cJ,t=n.cy,a=n.c1,i=n.ct;return A(l(function(n,e,r,t){return C(Ae,n,e,r,t,i,o)}),e,r,t,a)}),Do=m(function(e,r){return D(co,function(n){return{$:1,a:{F:n,g0:e,hq:r}}},D(zo,e,r))}),No=m(function(n,e){return D(Do,n,e)}),Ao={ct:!0,cy:10497,cH:9729,cJ:9987,c1:10497},Vo=Rn,_o=fn,Fo=s(function(n,e,r){return e(n(r))}),Bo={$:-2},ko=Bo,Eo=r(function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}}),Ro=r(function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return V(Eo,n,e,r,t,o);var a=t.d,i=t.e;return V(Eo,0,t.b,t.c,V(Eo,1,a.b,a.c,a.d,a.e),V(Eo,1,e,r,i,o))}var c=o.b,u=o.c,a=o.d,o=o.e;if(-1!==t.$||t.a)return V(Eo,n,c,u,V(Eo,0,e,r,t,a),o);var i;return V(Eo,0,e,r,V(Eo,1,t.b,t.c,t.d,i=t.e),V(Eo,1,c,u,a,o))}),qo=u,Wo=s(function(n,e,r){if(-2===r.$)return V(Eo,0,n,e,Bo,Bo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(D(qo,n,o)){case 0:return V(Ro,t,o,a,N(Wo,n,e,i),c);case 1:return V(Eo,t,o,e,i,c);default:return V(Ro,t,o,a,i,N(Wo,n,e,c))}}),Uo=s(function(n,e,r){r=N(Wo,n,e,r);if(-1!==r.$||r.a)return r;return V(Eo,1,r.b,r.c,r.d,r.e)}),jo=go(b([{a:"ArrowLeft",b:{$:2,a:-1}},{a:"ArrowRight",b:{$:2,a:1}},{a:"ArrowUp",b:{$:3,a:1}},{a:"ArrowDown",b:{$:3,a:-1}},{a:" ",b:{$:0}},{a:"Shift",b:{$:1}},{a:"c",b:{$:4}},{a:"p",b:{$:5}}])),Ho=function(n){return{$:1,a:n}},Go=ln,Yo=m(function(n,e){n:for(;;){if(-2===e.$)return at;var r=e.c,t=e.d,o=e.e;switch(D(qo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return ot(r);default:n=n,e=o;continue n}}}),Qo=m(function(n,e){return e.$?at:ot(n(e.a))}),Io=un,Xo=m(function(n,e){return e.$?n:e.a}),Oo=s(function(n,e,r){return{dG:r,fv:e,fD:n}}),Ko=ro(N(Oo,P,at,0)),Zo=function(r){return{$:2,b:function(n){var e=r.f;2===e.$&&e.c&&e.c(),r.f=null,n({$:0,a:f})},c:null}},Jo={$:2,b:function(n){n({$:0,a:Date.now()})},c:null},na={$:2,b:function(n){var e=Pe(function(){n({$:0,a:Date.now()})});return function(){Se(e)}},c:null},ea=kn,ra=$n,Bn=s(function(n,r,e){var t=e.fv,o={a:t,b:r};if(1!==o.a.$)return o.b.b?ro(N(Oo,r,t,e.dG)):D(io,function(){return Ko},Zo(o.a.a));if(o.b.b)return D(io,function(e){return D(io,function(n){return ro(N(Oo,r,ot(e),n))},Jo)},ra(D(io,ea(n),na)));return Ko}),ta=Rr,xe=s(function(e,r,n){function t(n){return D(lo,e,n.$?(0,n.a)(r-a):(0,n.a)(ta(r)))}var o=n.fD,a=n.dG;return D(io,function(n){return D(io,function(){return ro(N(Oo,o,ot(n),r))},qr(D(ao,t,o)))},ra(D(io,ea(e),na)))}),Cn=m(function(n,e){return e.$?{$:1,a:D(Po,n,e.a)}:{$:0,a:D(Po,n,e.a)}});function oa(n){return{a:v(n.a?"w_":"d_",n.b),b:n}}Fn["Browser.AnimationManager"]={b:Ko,c:Bn,d:xe,e:0,f:Cn};var aa=En("Browser.AnimationManager"),ia=function(n){return aa({$:1,a:n})},ca=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),ua=m(function(n,e){return{fm:e,fD:n}}),fn=ro(D(ua,P,ko)),la=s(function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=N(n,r.b,r.c,N(la,n,e,r.d));n=o,e=a,r=t}}),fa=t(function(u,l,f,n,e,r){var t=s(function(n,e,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:N(f,n,e,o)};var a=t.a,i=a.a,c=a.b,a=t.b;if(0<=h(i,n))return 0<h(i,n)?{a:t,b:N(f,n,e,o)}:{a:a,b:A(l,i,c,e,o)};n=n,e=e,r={a:a,b:N(u,i,c,o)}}}),r=N(la,t,{a:Qr(n),b:r},e),e=r.a,r=r.b;return N(st,m(function(n,e){return N(u,n.a,n.b,e)}),r,e)}),sa=m(function(n,e){return{ey:e,eK:n}}),da=s(function(e,r,n){return D(co,function(n){return{a:r,b:n}},N(Le,n.a?we:Ce,n.b,function(n){return D(ea,e,D(sa,r,n))}))}),va=m(function(n,e){return N(la,Uo,e,n)}),u=s(function(o,n,e){var r=s(function(n,e,r){var t=r.c;return{a:r.a,b:r.b,c:D(Gr,N(da,o,n,e),t)}}),t=s(function(n,e,r){var t=r.b,o=r.c;return{a:D(Gr,e,r.a),b:t,c:o}}),a=l(function(n,e,r,t){var o=t.c;return{a:t.a,b:N(Uo,n,e,t.b),c:o}}),i=D(ao,oa,n),e=C(fa,t,a,r,e.fm,go(i),{a:P,b:ko,c:P}),c=e.b,u=e.c;return D(io,function(n){return ro(D(ua,i,D(va,c,go(n))))},D(io,function(){return qr(u)},qr(D(ao,Zo,e.a))))}),ma=s(function(n,e,r){e=n(e);return e.$?r:D(Gr,e.a,r)}),pa=m(function(n,e){return N(oo,ma(n),P,e)}),ln=s(function(n,e,r){var t=e.eK,o=e.ey,e=D(pa,function(n){var e=n.b,e=e.c;return S(n.a,t)?D($e,e,o):at},r.fD);return D(io,function(){return ro(r)},qr(D(ao,lo(n),e)))}),un=m(function(n,e){return N(ca,e.a,e.b,D(Rt,n,e.c))});function ga(n){return N(Yc,1,"resize",D(Go,"target",N(qt,n,D(Go,"innerWidth",Xc),D(Go,"innerHeight",Xc))))}function ba(n){return n.a}function ha(n){return n}function Ta(n){return n}function xa(n){return n.F}function Sa(n){var e=(o=n.b).a,r=o.b,t=o.c,o=o.d;return D(ou,D(iu,n,cu),A(tu,-e,-r,-t,o))}function Pa(n){var e=n.b,r=e.a,t=e.b;return{eS:1-2*t*t-2*(n=e.c)*n,eT:2*r*t-2*(e=e.d)*n,eU:2*r*n+2*e*t,eW:2*r*t+2*e*n,eX:1-2*r*r-2*n*n,eY:2*t*n-2*e*r,e_:2*r*n-2*e*t,e$:2*t*n+2*e*r,e0:1-2*r*r-2*t*t}}function ya(n){var e=D(fu,n.cb,Sa(n.cp)),n=Pa(e);return{dH:ba(e),ef:{fS:n.eS,fT:n.eW,c2:n.e_},eg:{fS:n.eT,fT:n.eX,c2:n.e$},eh:{fS:n.eU,fT:n.eY,c2:n.e0}}}function Ma(n){return n=D(fu,n.cb,Sa(n.cp)),ba(n)}function Ca(n){return n.eh}function wa(n){return xa(n).G.$?n:A(ru,4e5,N(Fo,ya,Ca,n),Ma(n),n)}function La(n){return D(ou,n,Tu)}function $a(n){switch(n.$){case 2:return n.a.fQ;case 0:return n.a.fQ;case 1:default:return 0}}function za(n){var e=n.fS,r=n.fT;return e*e+r*r+(n=n.c2)*n}function Da(n){var e=n.fS,r=n.fT;return Pu(e*e+r*r+(n=n.c2)*n)}function Na(n){return{eS:n.eS,eT:n.eW,eU:n.e_,eW:n.eT,eX:n.eX,eY:n.e$,e_:n.eU,e$:n.eY,e0:n.e0}}function Aa(t){var n,e,r,o,a,i,c=t.du,u=t.d$,l=N(st,m(function(n,e){return $a(n)+e}),0,u),f=c?1/c:0,s=D(Gu,c/l,N(st,function(n){var e=$a(n),r=function(n){switch(n.$){case 2:return n.a.eG;case 0:return n.a.eG;case 1:default:return Wu}}(n),n=function(n){switch(n.$){case 2:return n.a.cQ;case 0:return n.a.cQ;case 1:default:return cu}}(n),r=A(ju,t.cp,D(zu,t.cp,n),e,r);return qu(r)},Wu,u)),d=(d=1/(s=(n=(d=s).eS)*((r=d.eX)*(i=d.e0)-(o=d.e$)*(a=d.eY))-(e=d.eT)*((c=d.eW)*i-a*(l=d.e_))+(u=d.eU)*(c*o-r*l)),s?{eS:(r*i-o*a)*d,eT:(u*o-e*i)*d,eU:(e*a-u*r)*d,eW:(a*l-c*i)*d,eX:(n*i-u*l)*d,eY:(c*u-n*a)*d,e_:(c*o-l*r)*d,e$:(l*e-n*o)*d,e0:(n*r-c*e)*d}:Wu);return T(t,{dk:d,cA:D(Hu,t.cb,d),cB:f})}function Va(n){return{$:4,a:D(Zu,n,P)}}function _a(n){return n}function Fa(n){return N(Ul,N(Wl,(e=n).fb,e.e8,.5),function(n){return N(Wl,n.fc,n.e9,.5)}(n),function(n){return N(Wl,n.fd,n.fa,.5)}(n));var e}function Ba(n){return n.fa}function ka(n){return n.fd}function Ea(n){return{a:D(jl,n.fb,function(n){return n.e8}(n)),b:D(jl,function(n){return n.fc}(n),function(n){return n.e9}(n)),c:D(jl,ka(n),Ba(n))}}function Ra(n){return n}function qa(n){var e=(t=Ea(n)).a,r=t.b,t=t.c;return{f9:Ra(Fa(n)),gx:e/2,gy:r/2,gz:t/2}}function Wa(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:2,a:f,b:l,c:u,d:c,e:i,f:a,g:o,h:t,i:r,j:e,k:n}}}}}}}}}}}}function Ua(n){return N(of,0,1,.04045<n?D(af,(n+.055)/1.055,2.4):n/12.92)}function ja(n){var e=function(n){return{ba:n.d,cn:n.c,dj:n.b,dT:n.a}}(n),r=e.dj,n=e.cn;return N(xl,Ua(e.dT),Ua(r),Ua(n))}function Ha(n){return function(n){var e=n.fw,r=n.dA;return V(tf,0,D(cf,ja,n.ek),D(cf,D(of,0,1),e),D(cf,D(of,0,1),r),{$:0,a:0})}({ek:n.ek,dA:{$:0,a:0},fw:n.fw})}function Ga(n){return N(oo,uf,P,n)}function Ya(n){return n<0?-n:n}function Qa(n){return Ya(n)}function Ia(n){var e=n.fw,r=n.dA;return V(tf,0,{$:0,a:ja(n.ek)},{$:0,a:N(of,0,1,e)},{$:0,a:N(of,0,1,r)},{$:0,a:0})}function Xa(n){return n}function Oa(n){return n=Xa(n),hf(n)||bf(n)||n<=0?gf:{$:0,a:n}}function Ka(n){return n.f9}function Za(n){return n}function Ja(n){return n.a4}function ni(n){var e=Za(Ja(n)),n=ha(Ka(n));return{$:2,a:D(ku,La(n),function(n){var e=4.1887902047863905*D(af,n,3);return{eG:D(Sf,e,n),cQ:cu,a4:n,fQ:e}}(e))}}function ei(v){return function(d){return function(s){return function(f){return function(l){return function(u){return function(c){return function(i){return function(a){return function(n){var e=v.a,r=v.b,t=v.c,o=Qf(f),t=Yf({fR:o.fR,fS:o.fS*e,fT:o.fT*r,c2:o.c2*t});return p(d,s,t,l,u,c,i,a,n)}}}}}}}}}}function ri(n){return Of(n)}function ti(n){return n.b?N(os,n,P,0):Lt}function oi(n){return!n}function ai(n){return ds(n)}function ii(n){return ps(Ra(n))}function ci(n){return n}function ui(n){return ps(ci(n))}function li(n){return n.I}function fi(n){return D(bs,n.e8,n.fb)&&D(bs,n.e9,n.fc)&&D(bs,n.fa,n.fd)?n:{e8:D(hs,n.fb,n.e8),e9:D(hs,n.fc,n.e9),fa:D(hs,n.fd,n.fa),fb:D(Ts,n.fb,n.e8),fc:D(Ts,n.fc,n.e9),fd:D(Ts,n.fd,n.fa)}}function si(n){return n.aB}function di(n){return n}function vi(){return{$:2,a:z(function(n,e,r,t,o,a,i,c){return V(il,D(Jl,!0,c),Ls,Xl,ws,{aU:N(xl,0,0,1),b:r,c:e,d:a,e:n,cX:i,f:o})})}}function mi(n){return n.gj}function pi(n){var e=Da(n);return{fS:n.fS/e,fT:n.fT/e,c2:n.c2/e}}function gi(n){return n}function bi(n){return gi(n.fZ)}function hi(n){return n.gi}function Ti(n){return n.fS}function xi(n){return n.fT}function Si(n){return n.c2}function Pi(n){var e=Si(n.eh),r=xi(n.eh),t=Ti(n.eh),o=Si(n.eg),a=xi(n.eg),i=Ti(n.eg),c=Si(n.ef),u=xi(n.ef);return 0<(n=Ti(n.ef))*a*e+u*o*t+c*i*r-c*a*t-u*i*e-n*o*r}function yi(n){return n.dH}function Mi(n){return{fS:-n.fS,fT:-n.fT,c2:-n.c2}}function Ci(n){return n.ef}function wi(n){return n.eg}function Li(n){var e=bi(n),r=Pi(e)?e:{dH:yi(o=e),ef:Ci(o),eg:wi(o),eh:Mi(Ca(o))},t=Ra(yi(r)),e=Ta(Ci(r)),o=Ta(wi(r)),r=Ta(Ca(r)),r=A(rd,t,e,o,r),n=hi(n);return{$:0,a:D(Fu,r,N(ed,Za(n.a),Za(n.b),Za(n.c)))}}function $i(n){return Qu(b([Li(n)]))}function zi(n){return n}function Di(n){return n}function Ni(n){return n.fS}function Ai(n){return n.fT}function Vi(n){return n.c2}function _i(n){var e=(i=Di(n)).c,r=Ni(c=i.a),t=Ai(c),o=Vi(c),a=Ni(u=i.b),n=Ai(u),i=Vi(u),c=Ni(e),u=Ai(e),e=Vi(e);return fi({e8:D(hs,r,D(hs,a,c)),e9:D(hs,t,D(hs,n,u)),fa:D(hs,o,D(hs,i,e)),fb:D(Ts,r,D(Ts,a,c)),fc:D(Ts,t,D(Ts,n,u)),fd:D(Ts,o,D(Ts,i,e))})}function Fi(n){var e=Di(n),r=e.a,t=e.b;return{a:{cK:e=ui(N(ud,r,t,n=e.c)),cQ:ii(r)},b:{cK:e,cQ:ii(t)},c:{cK:e,cQ:ii(n)}}}function Bi(n){return{I:D(ao,function(n){return{a:3*n,b:3*n+1,c:3*n+2}},D(mt,0,_r(n)-1)),aB:ti(Ga(D(ao,function(n){return b([n.a,n.b,n.c])},n)))}}function ki(n){return(n=function(n){if(n.$){var u=n.c;return ot(z(function(n,e,r,t,o,a,i,c){return V(il,D(Jl,t,c),$d,Xl,u,{b:r,c:e,d:a,e:n,cX:i,f:o})}))}return at}(n)).$?Ku:{$:2,a:n.a}}function Ei(n){return D(Gs,n.dH,n.eg)}function Ri(n){return{aH:0,an:{aQ:vu,aW:{c8:!1,bp:!1,a6:0,T:0},bT:0},bo:(r=(e={gP:Es/10.8,hh:-gu}).hh,t=e.gP,e=m(function(n,e){return b([{a:-t*n,b:t*e},{a:-t*n,b:-t*e},{a:t*n,b:t*e},{a:t*n,b:-t*e}])}),Ga(b([D(ao,function(n){return{b0:N(hu,n.a,n.b,0),hd:1,fH:r}},Ga(b([b([{a:t,b:0},{a:-t,b:0},{a:0,b:t},{a:0,b:-t},{a:2.7*t,b:0},{a:2.7*-t,b:0},{a:4.1*t,b:0},{a:4.1*-t,b:0}]),D(e,4.05,1.75),D(e,3.2,.9),D(e,2.2,1.75),D(e,2.4,3.4),D(e,1,2)]))),D(ao,function(n){return{b0:N(hu,n.a,n.b,0),hd:0,fH:r}},b([{a:0,b:3.6*t},{a:0,b:3.6*-t},{a:4*-t,b:3*t},{a:4*-t,b:3*-t},{a:4*t,b:3*t},{a:4*t,b:3*-t}]))]))),aM:{cn:0,cM:0},af:su,V:D(du,(n=Ha({ek:e=n.d6,fw:{$:0,a:.25}}),e=m(function(n,e){return N(hu,n,e,0)}),Xu({at:V(rf,n,D(e,-90,-90),D(e,-90,90),D(e,90,90),D(e,90,-90)),G:bu})),Fd)};var e,r,t}function qi(n){return N(st,m(function(n,e){return D(Gr,n,e)}),P,n.f$)}function Wi(n){return n.b?ot(n.a):at}function Ui(n){return S(n,lf)}function ji(n){return!n.$}function Hi(n){return n.hd?pu:mu}function Gi(n){return{fS:-n.fS,fT:-n.fT,c2:-n.c2}}function Yi(n){return 1===n.$}function Qi(n){return 1===n.$}function Ii(n){return{gV:Gi(n.gV),g1:n.g2,g2:n.g1}}function Xi(n){return n}function Oi(n){if(0<za(n)){var e=pi(n),n=Ya(e.fS)<.9?D(Zc,e,Xs):D(Zc,e,Os);return{a:n,b:D(Zc,e,n)}}return{a:Xs,b:Os}}function Ki(b){return function(g){return function(p){return function(m){return function(v){return function(d){return function(s){return function(f){return function(l){return function(n){var e=4/(b.r*b.r*1e7*13),r=4/(13*b.r),t=D(wu,p.cb,v),o=D(wu,p.cb,l),a=D(wu,p.cb,s),i=D(wu,g.cb,f),c=D(wu,g.cb,d),u=D(wu,g.cb,m);return D(Gr,V(Ev,Wv({a0:0,gV:u,a1:a}),b,g,p,{W:1e6,Z:-1e6,ad:0,ae:0,L:r,H:12/13,S:e,M:cu,D:D(Zc,a,u),E:D(Zc,u,a)}),D(Gr,V(Ev,Wv({a0:0,gV:c,a1:o}),b,g,p,{W:1e6,Z:-1e6,ad:0,ae:0,L:r,H:12/13,S:e,M:cu,D:D(Zc,o,c),E:D(Zc,c,o)}),D(Gr,V(Ev,Wv({a0:0,gV:i,a1:t}),b,g,p,{W:1e6,Z:-1e6,ad:0,ae:0,L:r,H:12/13,S:e,M:cu,D:D(Zc,t,i),E:D(Zc,i,t)}),n)))}}}}}}}}}}function Zi(n){return 0<n.du?ot(n.du):at}function Ji(n){return n.dH}function nc(n){return ba(n.cp)}function ec(n){return-n}function rc(n){if(t=D(Nt,Ya((r=n).fS),D(Nt,Ya(r.fT),Ya(r.c2)))){var e=r.c2/t,n=r.fT/t,r=r.fS/t,t=Pu(r*r+n*n+e*e);return ot({fS:r/t,fT:n/t,c2:e/t})}return at}function tc(n){return In(function(n){return"script"==n?"p":n}(n))}function oc(n){function e(n){return pp(1e4*n)/100}var r=n.b,t=n.c,o=n.d;return t=b(["rgba(",hp(e(n.a)),"%,",hp(e(r)),"%,",hp(e(t)),"%,",hp(pp(1e3*o)/1e3),")"]),D(lt,"",t)}function ac(n){return n}function ic(n){return N(Ol,{dt:n.dt,dU:n.dU,ee:n.ee},{bQ:n.bQ,b6:n.b6,ch:n.ch,ci:n.ci},{bQ:n.bQ,b6:n.b6,ch:n.ch,ci:n.ci})}function cc(n){return V(il,b([ic(n),A(Lp,!1,!1,!1,!1)]),Ap,Dp,Np,{})}function uc(n){return cc({bQ:7680,dt:15,dU:8,b6:516,ee:D(af,2,n+4),ch:5386,ci:5386})}function lc(n){return yi(n)}function fc(n){return.5*n}function sc(n){return A($p,515,n.ap,n.ak,n.aj)}function dc(n){return Mi(Ca(n))}function vc(n){return n.ht}function mc(e){var n=vc(e.f5),r={dH:lc(n),ef:function(n){return Ci(n)}(n),eg:function(n){return wi(n)}(n),eh:Mi(dc(n))},t=Va(e.go);if(1===(l=A(Gp,r,1,at,b([t]))).$)return P;var o=l.a,a=D(rg,Is,n),i=D(ls,.99,D(hs,Qa(e.gb),ec(Ba(o)))),c=Ea(o),u=function(n){var e=n,r=D(Nt,Ya(e.fS),D(Nt,Ya(e.fT),Ya(e.c2)));if(r){var t=e.c2/r,n=e.fT/r,e=e.fS/r;return Pu(e*e+n*n+t*t)*r}return 0}(N(tg,c.a,c.b,c.c)),r=D(ls,1.01,D(fs,u,ec(ka(o)))),l=D(Zp,e.f5,{fY:e.fY,gs:r,gS:i}),o=(c=eg(l).e5)?Ta(Mi(dc(n))):ha(lc(n)),i=(r=function(){var n=e.hn;switch(n.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:n.a};case 4:return{a:4,b:n.a};default:return{a:5,b:0}}}()).a,n=r.b,r=D(Mp,e.gq,e.hw),n=hl({eS:0,eT:o.fS,eU:Ml(r),eV:e.fE,eW:0,eX:o.fT,eY:Cl(r),eZ:Za(u),e_:0,e$:o.c2,e0:wl(r),e1:i,e2:0,e3:c,e4:0,e5:n}),f=C(wp,n,a,l,Yp,t,{X:P,ah:P,ai:P}),s=e.gJ;switch(s.$){case 0:return Ga(b([N(Sp,f.X,{a:d=s.a,b:xp},Ep),N(Sp,f.ah,Op,Ep)]));case 1:var d=s.a;return Ga(b([N(Sp,f.X,Op,Ep),b([Qp]),N(Sp,f.ai,d.bY,zp),b([uc(0)]),N(Sp,f.X,{a:d,b:xp},Kp),N(Sp,f.ah,Op,Ep)]));default:var v=s.a,d=s.b;return Ga(b([N(Sp,f.X,{a:d,b:xp},Ep),b([Qp]),D(Fp,f.ai,v),N(ng,f.X,d,_r(v)),N(Sp,f.ah,Op,Ep)]))}}function pc(n){return D(lg,ya(n),xa(n).at)}function gc(n){return n.ef}function bc(n){return n.eg}function hc(n){return D(Gs,n.dH,n.ef)}function Tc(n){return D(Gs,n.dH,n.eh)}function xc(n){var e={dH:n.bS,ef:bc(n.gw),eg:D(mg,gc(e=n.gw),bc(e)),eh:gc(n.gw)};return N(hg,Tc,n.bM,N(gg,hc,ec(n.bO),N(gg,Ei,n.bG,e)))}function Sc(n){return n}function Pc(n){return function(n){for(;;){if(S(n.gF,0)&&S(n.gG,0))return Ip;if(!D(fg,Qa(n.gF),Qa(n.gG))){var e=Ya(Sc(n.gG)/3.141592653589793),r=Ya(Sc(n.gF)/3.141592653589793),t=Ta(n.ho),o=t.fS,a=t.fT,i=t.c2,t=D(Mp,1,n.eo);return{cm:r*wl(t),f8:!1,cx:r*Cl(t),dQ:e/r,cS:r*Ml(t),d9:3,fS:o,fT:a,c2:i}}n={eo:n.eo,gF:n.gG,gG:n.gF,ho:Mi(n.ho)}}}({eo:n.eo,gF:n.eI,gG:0,ho:n.ho})}function yc(n){var e=fc(Qa(n.hr));return{dS:{$:0,a:Tg(e)},ht:n.ht}}function Mc(n){return{fS:Of(n),fT:ds(n)}}function Cc(n){var e=function(n){var e=n,r=Ya(e.c2),t=Ya(e.fT),n=Ya(e.fS);if(h(n,t)<1){if(h(n,r)<1){var o=Pu(e.c2*e.c2+e.fT*e.fT);return{fS:0,fT:-e.c2/o,c2:e.fT/o}}o=Pu(e.fT*e.fT+e.fS*e.fS);return{fS:-e.fT/o,fT:e.fS/o,c2:0}}if(h(t,r)<1){o=Pu(e.c2*e.c2+e.fS*e.fS);return{fS:e.c2/o,fT:0,c2:-e.fS/o}}o=Pu(e.fS*e.fS+e.fT*e.fT);return{fS:-e.fT/o,fT:e.fS/o,c2:0}}(n);return{a:e,b:{fS:n.fT*e.c2-n.c2*e.fT,fT:n.c2*e.fS-n.fS*e.c2,c2:n.fS*e.fT-n.fT*e.fS}}}function wc(n){return n}function Lc(n){return n.f8}function $c(n){return hl({eS:n.fS,eT:n.cS,eU:0,eV:0,eW:n.fT,eX:n.cx,eY:0,eZ:0,e_:n.c2,e$:n.cm,e0:0,e1:0,e2:n.d9,e3:n.dQ,e4:0,e5:0})}function zc(n){return e=ja(n),n=Ml(r=e),e=Cl(r),r=wl(r),N(Pp,.4124*n+.3576*e+.1805*r,.2126*n+.7152*e+.0722*r,.0193*n+.1192*e+.9505*r);var e,r}Fn["Browser.Events"]={b:fn,c:u,d:ln,e:0,f:un};var Dc,Nc,Ac,Vc,_c,Fc,Bc,kc,Ec,Rc,qc,Wc,Uc,jc,Hc,Gc=En("Browser.Events"),Yc=s(function(n,e,r){return Gc(N(ca,n,e,r))}),Qc=D(Yc,0,"keydown"),Ic=D(Yc,0,"keyup"),Xc=cn,Oc=m(function(n,e){return{$:3,a:n,b:e}}),Kc=m(function(n,e){return{fS:n.fS+e.fS,fT:n.fT+e.fT,c2:n.c2+e.c2}}),Zc=m(function(n,e){return{fS:n.fT*e.c2-n.c2*e.fT,fT:n.c2*e.fS-n.fS*e.c2,c2:n.fS*e.fT-n.fT*e.fS}}),Jc=m(function(n,e){return{fS:n*e.fS,fT:n*e.fT,c2:n*e.c2}}),nu=m(function(n,e){return{fS:n.fS-e.fS,fT:n.fT-e.fT,c2:n.c2-e.c2}}),eu=l(function(n,e,r,t){r=D(nu,r,ba(t.cb)),e=D(Jc,n,e),r=D(Zc,r,e);return T(t,{cu:D(Kc,t.cu,e),c$:D(Kc,t.c$,r)})}),ru=l(function(n,e,r,t){return 0<t.du?A(eu,n,Ta(e),ha(r),t):t}),tu=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),ou=m(function(n,e){return{$:0,a:n,b:e}}),au=m(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fS,c=e.fT,u=e.c2,l=-a*u+r*c-t*i,n=-a*c+o*i-r*u,e=-a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fS:e*-a+u*-r+n*-o-l*-t,fT:n*-a+u*-t+l*-r-e*-o,c2:l*-a+u*-o+e*-t-n*-r}}),iu=m(function(n,e){return D(au,n.b,D(nu,e,n.a))}),cu={fS:0,fT:0,c2:0},uu=m(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.a,c=e.b,n=e.c,e=e.d;return A(tu,r*e+t*n-o*c+a*i,-r*n+t*e+o*i+a*c,r*c-t*i+o*e+a*n,-r*i-t*c-o*n+a*e)}),lu=m(function(n,e){var r=n.a,t=n.b,o=n.c,a=n.d,i=e.fS,c=e.fT,u=e.c2,l=a*u+r*c-t*i,n=a*c+o*i-r*u,e=a*i+t*u-o*c,u=-r*i-t*c-o*u;return{fS:e*a+u*-r+n*-o-l*-t,fT:n*a+u*-t+l*-r-e*-o,c2:l*a+u*-o+e*-t-n*-r}}),fu=m(function(n,e){var r=n.b,t=e.b;return D(ou,D(Kc,n.a,D(lu,r,e.a)),D(uu,r,t))}),su={$:0},du=m(function(n,e){var r=n,t=e,n=t.gt;if(n.b){e=n.b;return T(t,{f$:D(Gr,T(r,{G:n.a}),t.f$),gt:e})}return T(t,{f$:D(Gr,T(r,{G:t.gU}),t.f$),gU:t.gU+1})}),vu=45,mu=100,pu=12,gu=1e4,bu={$:2},hu=s(function(n,e,r){return{fS:n,fT:e,c2:r}}),Tu=A(tu,0,0,0,1),xu=D(ou,cu,Tu),Su={f4:0,gu:.3},Pu=X,yu=m(function(n,e){return Pu(N(st,function(n){return Nt(za(n))},e*e,n.aB))}),Mu=m(function(n,e){var r=n.a4;return D(Nt,Da(n.cQ)+r,e)}),Cu=m(function(n,e){switch(n.$){case 0:return D(yu,n.a,e);case 2:return D(Mu,n.a,e);case 1:return 340282347e30;default:return D(Nt,e,Da(n.a))}}),wu=m(function(n,e){return D(lu,n.b,e)}),Lu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=D(Gr,D(wu,n,e.a),r);n=t,e=o,r=a}}),$u=m(function(n,e){return N(Lu,n,e,P)}),zu=m(function(n,e){var r=n.a,t=n.b,o=t.a,a=t.b,i=t.c,c=t.d,u=e.fS,l=e.fT,f=e.c2,n=c*f+o*l-a*u,t=c*l+i*u-o*f,e=c*u+a*f-i*l,f=-o*u-a*l-i*f;return{fS:e*c+f*-o+t*-i-n*-a+r.fS,fT:t*c+f*-a+n*-o-e*-i+r.fT,c2:n*c+f*-i+e*-a-t*-o+r.c2}}),Du=s(function(n,e,r){for(;;){if(!e.b)return r;var t=n,o=e.b,a=D(Gr,D(zu,n,e.a),r);n=t,e=o,r=a}}),Nu=m(function(n,e){return N(Du,n,e,P)}),Au=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a.aB,o=n,a=e.b,t=D(Gr,{cK:D(wu,n,e.a.cK),aB:bt(D(Nu,n,t))},r);n=o,e=a,r=t}}),Vu=m(function(n,e){return{eS:n.eS*e.eS+n.eT*e.eW+n.eU*e.e_,eT:n.eS*e.eT+n.eT*e.eX+n.eU*e.e$,eU:n.eS*e.eU+n.eT*e.eY+n.eU*e.e0,eW:n.eW*e.eS+n.eX*e.eW+n.eY*e.e_,eX:n.eW*e.eT+n.eX*e.eX+n.eY*e.e$,eY:n.eW*e.eU+n.eX*e.eY+n.eY*e.e0,e_:n.e_*e.eS+n.e$*e.eW+n.e0*e.e_,e$:n.e_*e.eT+n.e$*e.eX+n.e0*e.e$,e0:n.e_*e.eU+n.e$*e.eY+n.e0*e.e0}}),_u=m(function(n,e){n=Pa(n);return D(Vu,n,D(Vu,e,Na(n)))}),Fu=m(function(n,e){var r=e.aB,t=e.ec,o=e.fK,a=e.cQ,i=e.fQ,c=e.eG;return{bP:N(Au,n,e.bP,P),eG:D(_u,n,c),cQ:D(zu,n,a),ec:D($u,n,t),fK:D($u,n,o),aB:D(Nu,n,r),fQ:i}}),Bu=m(function(n,e){var r=e.cQ;return{cK:D(wu,n,e.cK),cQ:D(zu,n,r)}}),ku=m(function(n,e){var r=e.a4,t=e.fQ;return{eG:e.eG,cQ:D(zu,n,e.cQ),a4:r,fQ:t}}),Eu=s(function(n,e,r){for(;;){if(!e.b)return r;var t=e.a,o=n,a=e.b,i=D(Gr,function(){switch(t.$){case 0:return{$:0,a:D(Fu,n,t.a)};case 1:return{$:1,a:D(Bu,n,t.a)};case 2:return{$:2,a:D(ku,n,t.a)};default:return{$:3,a:D(zu,n,t.a)}}}(),r);n=o,e=a,r=i}}),Ru=m(function(n,e){return N(Eu,n,e,P)}),qu=m(function(n,e){return{eS:n.eS+e.eS,eT:n.eT+e.eT,eU:n.eU+e.eU,eW:n.eW+e.eW,eX:n.eX+e.eX,eY:n.eY+e.eY,e_:n.e_+e.e_,e$:n.e$+e.e$,e0:n.e0+e.e0}}),Wu={eS:0,eT:0,eU:0,eW:0,eX:0,eY:0,e_:0,e$:0,e0:0},Uu=l(function(n,e,r,t){var o=-n*r*t,a=-n*e*t,i=-n*e*r;return{eS:n*(r*r+t*t),eT:i,eU:a,eW:i,eX:n*(t*t+e*e),eY:o,e_:a,e$:o,e0:n*(e*e+r*r)}}),ju=l(function(n,e,r,t){var o=n.a.fS,a=n.a.fT,i=n.a.c2,t=D(_u,n,t),e=A(Uu,r,o-e.fS,a-e.fT,i-e.c2);return D(qu,t,e)}),Hu=m(function(n,e){n=Pa(n);return D(Vu,Na(n),D(Vu,e,n))}),Gu=m(function(n,e){return{eS:n*e.eS,eT:n*e.eT,eU:n*e.eU,eW:n*e.eW,eX:n*e.eX,eY:n*e.eY,e_:n*e.e_,e$:n*e.e$,e0:n*e.e0}}),Yu=m(function(n,e){var r=function(n){var e=N(st,m(function(n,e){return e+$a(n)}),0,n);return 0<e?N(st,function(n){return Kc(D(Jc,$a(n)/e,function(){switch(n.$){case 0:return n.a.cQ;case 3:return n.a;case 2:default:return n.a.cQ}}()))},cu,n):cu}(n),t=La(r),o=Sa(t),a=D(Ru,o,n),r=D(fu,xu,t),o=D(fu,r,o);return Aa({ej:.01,cl:cu,el:N(st,Cu,0,a),cp:t,F:e,cu:cu,G:-1,dk:Wu,cA:Wu,cB:0,eR:.01,du:0,e6:Su,d$:a,c$:cu,cb:r,c0:cu,ed:D(Ru,o,n)})}),Qu=m(function(n,e){n=N(st,m(function(n,e){return D(Gr,n,e)}),P,n);return D(Yu,n,e)}),Iu={fS:0,fT:0,c2:1},Xu=Qu(b([{$:1,a:{cK:Iu,cQ:cu}}])),Ou={$:0},Ku=Ou,Zu=m(function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=D(Gr,r,e)}}),Ju=m(function(n,e){return{$:1,a:n,b:e}}),nl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"cr"}},el={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aU"}},rl={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"bf",sceneProperties:"e"}},tl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"c4",colorTexture:"cr",sceneProperties:"e"}},ol=m(function(n,e){switch(e.$){case 0:return D(rr,n,e);case 1:return D(tr,n,e);case 2:return D(or,n,e);case 3:return D(ar,n,e);case 4:return D(ir,n,e);default:return D(cr,n,e)}}),al=m(function(n,e){switch(e.$){case 0:return D(qe,n,e);case 1:return D(We,n,e);case 2:return D(Ue,n,e);case 3:return D(je,n,e);case 4:return D(He,n,e);case 5:return D(Ge,n,e);case 6:return D(Ye,n,e);case 7:return D(Qe,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}}),il=Re,cl=m(function(n,e){return h(n,e)<0?n:e}),ul=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return{e8:e,e9:t,fa:a,fb:n,fc:r,fd:o};var c=i.a,u=i.b,l=c.fS,f=c.fT,c=c.c2;n=D(cl,l,n),e=D(Nt,l,e),r=D(cl,f,r),t=D(Nt,f,t),o=D(cl,c,o),a=D(Nt,c,a),i=u}}),ll=m(function(n,e){var r=n.fS,t=n.fT,n=n.c2;return x(ul,r,r,t,t,n,n,e)}),fl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"aa",lights12:"bY",lights34:"cE",lights56:"cF",lights78:"cG",materialColor:"dv",sceneProperties:"e",viewMatrix:"f"}},sl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"aa",lights12:"bY",lights34:"cE",lights56:"cF",lights78:"cG",materialColorTexture:"dw",normalMapTexture:"bm",sceneProperties:"e",useNormalMap:"bw",viewMatrix:"f"}},dl=(kn=function(n){return{$:5,a:n}})(1029),vl=kn(1028),ml=s(function(n,e,r){return 1===e?D(Gr,n?dl:vl,r):r}),pl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ek",enabledLights:"aa",lights12:"bY",lights34:"cE",lights56:"cF",lights78:"cG",metallic:"dA",roughness:"fw",sceneProperties:"e",viewMatrix:"f"}},gl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"c6",constantBaseColor:"da",constantMetallic:"db",constantRoughness:"dc",enabledLights:"aa",lights12:"bY",lights34:"cE",lights56:"cF",lights78:"cG",metallicTexture:"dB",normalMapTexture:"bm",roughnessTexture:"dZ",sceneProperties:"e",useNormalMap:"bw",viewMatrix:"f"}},bl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cR"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"aw",sceneProperties:"e",viewMatrix:"f"}},hl=function(n){var e=new Float64Array(16);return e[0]=n.eS,e[1]=n.eW,e[2]=n.e_,e[3]=n.e2,e[4]=n.eT,e[5]=n.eX,e[6]=n.e$,e[7]=n.e3,e[8]=n.eU,e[9]=n.eY,e[10]=n.e0,e[11]=n.e4,e[12]=n.eV,e[13]=n.eZ,e[14]=n.e1,e[15]=n.e5,e},Tl=l(function(n,e,r,t){t=ha(t),r=ha(r),e=ha(e),n=ha(n);return hl({eS:n.fS,eT:e.fS,eU:r.fS,eV:t.fS,eW:n.fT,eX:e.fT,eY:r.fT,eZ:t.fT,e_:n.c2,e$:e.c2,e0:r.c2,e1:t.c2,e2:0,e3:0,e4:0,e5:0})}),xe=(Bn=m(function(n,e){return{$:0,a:n,b:e}}))({eu:1,eF:0,ff:6}),xl=pr,Sl=xe(b([{cR:N(xl,0,0,0)},{cR:N(xl,1,0,1)},{cR:N(xl,1,1,2)},{cR:N(xl,0,1,3)}])),Pl=m(function(n,e){return{$:1,a:n,b:e}}),yl=m(function(n,e){if(e.$)return{a:e.a.F,b:1};return{a:n,b:0}}),Ml=function(n){return n[0]},Cl=function(n){return n[1]},wl=function(n){return n[2]},Ll=yr,$l=A(Ll,0,0,0,0),zl=m(function(n,e){return e.$?{a:e.a.F,b:$l}:{a:n,b:A(Ll,Ml(e=e.a),Cl(e),wl(e),1)}}),Dl=m(function(n,e){var r,t={a:n,b:e};if(t.a.$)return D(Pl,{a:r=t.a.a.F,b:$l},D(yl,r,e));if(t.b.$)return D(Pl,D(zl,r=t.b.a.F,n),D(yl,r,e));return{$:0,a:t.a.a}}),Nl=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),Al=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),Vl=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),_l=fr,Fl=D(_l,0,0),Bl=m(function(n,e){return e.$?{a:e.a.F,b:Fl}:{a:n,b:function(n){return D(_l,n,1)}(e.a)}}),kl=l(function(n,e,r,t){var o,a=A(Vl,n,e,r,t);if(a.a.$)return A(Al,{a:o=a.a.a.F,b:$l},D(Bl,o,e),D(Bl,o,r),D(yl,o,t));if(a.b.$)return A(Al,D(zl,o=a.b.a.F,n),{a:o,b:Fl},D(Bl,o,r),D(yl,o,t));if(a.c.$)return A(Al,D(zl,o=a.c.a.F,n),D(Bl,o,e),{a:o,b:Fl},D(yl,o,t));if(a.d.$)return A(Al,D(zl,o=a.d.a.F,n),D(Bl,o,e),D(Bl,o,r),{a:o,b:1});return N(Nl,a.a.a,a.b.a,a.c.a)}),El=Sr,Rl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cR"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"aw",sceneProperties:"e",viewMatrix:"f"}},ql={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cR"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"aw",sceneProperties:"e",viewMatrix:"f"}},Wl=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),Ul=s(function(n,e,r){return{fS:n,fT:e,c2:r}}),jl=m(function(n,e){return e-n}),Hl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cR"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"aw",sceneProperties:"e",viewMatrix:"f"}},Gl=r(function(r,C,w,L,$){var n=D(ll,C,b([w,L,$])),n=qa(n);return D(Ju,n,function(){switch(r.$){case 0:if(r.b.$){var u=r.b.a.F;return z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,0,c),Hl,nl,Sl,{cr:u,b:r,c:e,d:a,aw:A(Tl,C,w,L,$),e:n,f:o})})}var l=r.b.a;return z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,0,c),bl,el,Sl,{aU:l,b:r,c:e,d:a,aw:A(Tl,C,w,L,$),e:n,f:o})});case 1:if(r.b.$){u=r.b.a.F,s=r.c;return z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,0,c),Hl,tl,Sl,{c4:_a(s),cr:u,b:r,c:e,d:a,aw:A(Tl,C,w,L,$),e:n,f:o})})}var f=r.b.a,s=r.c;return z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,0,c),bl,rl,Sl,{c4:s,bf:D(El,_a(s),f),b:r,c:e,d:a,aw:A(Tl,C,w,L,$),e:n,f:o})});case 2:var n=D(Dl,r.b,r.c);if(n.$){var e=n.a,d=e.a,e=n.b,v=e.a,m=e.b;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,0,c),ql,sl,Sl,{aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dw:d,b:r,c:e,bm:v,d:a,aw:A(Tl,C,w,L,$),e:n,bw:m,f:o})})}var p=n.a;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,0,c),Rl,fl,Sl,{aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dv:p,b:r,c:e,d:a,aw:A(Tl,C,w,L,$),e:n,f:o})});default:e=A(kl,r.b,r.c,r.d,r.e);if(e.$){var n=e.a,g=n.a,b=n.b,n=e.b,h=n.a,T=n.b,n=e.c,x=n.a,S=n.b,n=e.d,v=n.a,m=n.b;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,0,c),ql,gl,Sl,{c6:g,da:b,db:S,dc:T,aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dB:x,b:r,c:e,bm:v,d:a,aw:A(Tl,C,w,L,$),dZ:h,e:n,bw:m,f:o})})}var P=e.a,y=e.b,M=e.c;return z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,0,c),Rl,pl,Sl,{ek:P,aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dA:M,b:r,c:e,d:a,aw:A(Tl,C,w,L,$),fw:y,e:n,f:o})})}}())}),Yl=s(function(n,e,r){return{$:3,a:n,b:e,c:r}})({eu:1,eF:3,ff:4}),Ql=(Cn=b([{aL:D(_l,0,1)},{aL:D(_l,1,1)},{aL:D(_l,2,1)},{aL:D(_l,3,1)},{aL:D(_l,0,-1)},{aL:D(_l,1,-1)},{aL:D(_l,2,-1)},{aL:D(_l,3,-1)}]),fn=b([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),D(Yl,Cn,fn)),Il={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aL"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",quadVertexPositions:"aw",sceneProperties:"e",shadowLight:"cX",viewMatrix:"f"}},Xl={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Ol=s(function(n,e,r){var t=n.dU,o=n.dt,a=n.ee,i=m(function(n,e){return e(n)}),c=m(function(n,e){return e(n)}),n=function(n){return D(Fo,i(n.b6),D(Fo,c(n.bQ),D(Fo,c(n.ch),c(n.ci))))};return D(n,r,D(n,e,N(Wa,t,o,a)))}),Kl=N(Ol,{dt:0,dU:0,ee:15},{bQ:7680,b6:519,ch:7680,ci:7683},{bQ:7680,b6:519,ch:7680,ci:7682}),Zl=N(Ol,{dt:0,dU:0,ee:15},{bQ:7680,b6:519,ch:7680,ci:7682},{bQ:7680,b6:519,ch:7680,ci:7683}),Jl=m(function(n,e){return D(Gr,n?Zl:Kl,e)}),nf=l(function(u,l,f,s){return{$:2,a:z(function(n,e,r,t,o,a,i,c){return V(il,D(Jl,t,c),Il,Xl,Ql,{b:r,c:e,d:a,aw:A(Tl,u,l,f,s),e:n,cX:i,f:o})})}}),ef=o(function(n,e,r,t,o,a,i){r=V(Gl,r,t,o,a,i),e={a:n,b:e};return e.a?e.b?Va(b([r,A(nf,t,o,a,i)])):r:e.b?A(nf,t,o,a,i):Ku}),rf=r(function(n,e,r,t,o){return x(ef,!0,!1,n,e,r,t,o)}),tf=r(function(n,e,r,t,o){return{$:3,a:n,b:e,c:r,d:t,e:o}}),of=s(function(n,e,r){return h(r,n)<0?n:0<h(r,e)?e:r}),af=q,cf=m(function(n,e){return e.$?{$:1,a:e.a}:{$:0,a:n(e.a)}}),uf=m(function(n,e){return e.b?N(oo,Gr,e,n):n}),lf={$:1},ff=m(function(n,e){return{f9:e,a4:Qa(n)}}),sf=m(function(n,e){return D(ff,e,n)}),df={fS:0,fT:0,c2:0},vf=l(function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}}),mf=s(function(n,e,r){return A(vf,n/255,e/255,r/255,1)}),pf=(on={ek:N(mf,140,142,141),fw:.5},Ia({ek:on.ek,dA:1,fw:on.fw})),u=Rr,gf={$:1},bf=function(n){return n===1/0||n===-1/0},hf=K,Tf=m(function(n,e){return D(ou,n,e.b)}),xf=m(function(n,e){var r=e,e=D(fu,r.cb,Sa(r.cp)),e=D(fu,D(Tf,ha(n),e),r.cp);return T(r,{cb:e,ed:D(Ru,e,r.d$)})}),Sf=m(function(n,e){e*=2*n/5*e;return{eS:e,eT:0,eU:0,eW:0,eX:e,eY:0,e_:0,e$:0,e0:e}}),ln=function(n){return Qu(b([ni(n)]))},Pf=m(function(n,e){return{fS:e.fS-n.fS,fT:e.fT-n.fT,c2:e.c2-n.c2}}),yf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"cQ",uv:"U"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Mf=l(function(u,n,l,f){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,f,c),yf,nl,l,{cr:u,b:r,c:e,d:a,e:n,f:o})}))}),Cf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"cQ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},wf=l(function(u,n,l,f){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,f,c),Cf,el,l,{aU:u,b:r,c:e,d:a,e:n,f:o})}))}),Lf=m(function(n,e){return{$:3,a:n,b:e}}),$f={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aU",pointRadius:"cP",sceneProperties:"e"}},zf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"cQ"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"cP",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Df=l(function(u,l,n,f){return D(Lf,n,z(function(n,e,r,t,o,a,i,c){return V(il,c,zf,$f,f,{aU:u,b:r,c:e,cP:l,d:a,e:n,f:o})}))}),Nf=r(function(u,l,n,f,s){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,s,c),Cf,rl,f,{bf:D(El,_a(l),u),b:r,c:e,d:a,e:n,f:o})}))}),Af={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"bf",pointRadius:"cP",sceneProperties:"e"}},Vf=r(function(u,l,f,n,s){return D(Lf,n,z(function(n,e,r,t,o,a,i,c){return V(il,c,zf,Af,s,{bf:D(El,_a(l),u),b:r,c:e,cP:f,d:a,e:n,f:o})}))}),_f={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cK",position:"cQ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ff=l(function(l,n,f,s){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,s,c),_f,fl,f,{aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dv:l,b:r,c:e,d:a,e:n,f:o})}))}),Bf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"cK",position:"cQ",tangent:"fG",uv:"U"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},kf=t(function(l,f,s,n,d,v){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,v,c),Bf,sl,d,{aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dw:l,b:r,c:e,bm:f,d:a,e:n,bw:s,f:o})}))}),Ef=t(function(l,f,s,n,d,v){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,v,c),_f,pl,d,{ek:l,aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dA:s,b:r,c:e,d:a,fw:f,e:n,f:o})}))}),Rf=r(function(u,l,n,f,s){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){return V(il,N(ml,t,s,c),yf,tl,f,{c4:_a(l),cr:u,b:r,c:e,d:a,e:n,f:o})}))}),qf={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"cK",position:"cQ",uv:"U"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Wf=l(function(l,n,f,s){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,s,c),qf,sl,f,{aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dw:l,b:r,c:e,bm:l,d:a,e:n,bw:0,f:o})}))}),Uf=a(function(l,f,s,d,v,m,n,p,g){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,g,c),qf,gl,p,{c6:l,da:f,db:m,dc:d,aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dB:v,b:r,c:e,bm:l,d:a,dZ:s,e:n,bw:0,f:o})}))}),jf=m(function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.F;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Ku;case 5:case 6:case 7:d=e.c,M=e.d;return A(Mf,r,qa(y=e.a),d,M);case 8:case 9:default:return Ku}}else{var t=n.b.a;switch(e.$){case 0:return Ku;case 1:case 2:case 3:case 4:case 5:case 6:case 7:d=e.c,M=e.d;return A(wf,t,qa(y=e.a),d,M);case 8:case 9:d=e.c;return A(wf,t,qa(y=e.a),d,0);default:d=e.d;return A(Df,t,e.b,qa(y=e.a),d)}}case 1:if(n.b.$){r=n.b.a.F,a=n.c;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Ku;case 5:case 6:case 7:d=e.c,M=e.d;return V(Rf,r,a,qa(y=e.a),d,M);case 8:case 9:default:return Ku}}else{var o=n.b.a,a=n.c;switch(e.$){case 0:return Ku;case 1:case 2:case 3:case 4:case 5:case 6:case 7:d=e.c,M=e.d;return V(Nf,o,a,qa(y=e.a),d,M);case 8:case 9:d=e.c;return V(Nf,o,a,qa(y=e.a),d,0);default:d=e.d;return V(Vf,o,a,e.b,qa(y=e.a),d)}}case 2:var i=D(Dl,n.b,n.c);if(i.$){var c=i.a,u=c.a,c=i.b,l=c.a,f=c.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ku;case 6:d=e.c,v=e.d;return A(Wf,u,qa(y=e.a),d,v);case 7:d=e.c,v=e.d;return C(kf,u,l,f,qa(y=e.a),d,v);case 8:case 9:default:return Ku}}else{var s=i.a;switch(e.$){case 0:case 1:return Ku;case 2:var d=e.c,v=e.d;return A(Ff,s,qa(y=e.a),d,v);case 3:return Ku;case 4:var d=e.c,v=e.d;return A(Ff,s,qa(y=e.a),d,v);case 5:return Ku;case 6:case 7:d=e.c,v=e.d;return A(Ff,s,qa(y=e.a),d,v);case 8:case 9:default:return Ku}}default:c=A(kl,n.b,n.c,n.d,n.e);if(c.$){var i=c.a,m=i.a,p=i.b,i=c.b,g=i.a,b=i.b,i=c.c,h=i.a,T=i.b,i=c.d,l=i.a,f=i.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ku;case 6:d=e.c,M=e.d;return w(Uf,m,p,g,b,h,T,qa(y=e.a),d,M);case 7:y=e.a,d=e.c,M=e.d;return function(h){return function(b){return function(g){return function(p){return function(m){return function(v){return function(d){return function(s){return function(n){return function(f){return function(l){return D(Ju,n,z(function(n,e,r,t,o,a,i,c){var u=i.a,i=i.b;return V(il,N(ml,t,l,c),Bf,gl,f,{c6:h,da:b,db:v,dc:p,aa:i,bY:u.bY,cE:u.cE,cF:u.cF,cG:u.cG,dB:m,b:r,c:e,bm:d,d:a,dZ:g,e:n,bw:s,f:o})}))}}}}}}}}}}}(m)(p)(g)(b)(h)(T)(l)(f)(qa(y))(d)(M);case 8:case 9:default:return Ku}}else{var x=c.a,S=c.b,P=c.c;switch(e.$){case 0:case 1:return Ku;case 2:d=e.c,M=e.d;return C(Ef,x,S,P,qa(y=e.a),d,M);case 3:return Ku;case 4:d=e.c,M=e.d;return C(Ef,x,S,P,qa(y=e.a),d,M);case 5:return Ku;case 6:case 7:var y,d=e.c,M=e.d;return C(Ef,x,S,P,qa(y=e.a),d,M);case 8:case 9:default:return Ku}}}}),Hf=m(function(n,e){return{$:5,a:n,b:e}}),Gf=m(function(n,e){var r=n.a,t=n.b,o=n.c,n=e.f9;return{f9:{fS:r*n.fS,fT:t*n.fT,c2:o*n.c2},gx:r*e.gx,gy:t*e.gy,gz:o*e.gz}}),Yf=function(n){return new Float64Array([n.fS,n.fT,n.c2,n.fR])},Qf=function(n){return{fS:n[0],fT:n[1],c2:n[2],fR:n[3]}},If=m(function(n,e){switch(e.$){case 0:return Ou;case 5:return D(Hf,e.a,D(If,n,e.b));case 1:var r=e.b;return D(Ju,D(Gf,n,e.a),D(ei,n,r));case 3:return e;case 2:return{$:2,a:D(ei,n,r=e.a)};default:r=e.a;return{$:4,a:D(ao,If(n),r)}}}),Xf=m(function(n,e){return D(If,n,e)}),Of=U,Kf=l(function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}}),Zf=l(function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}}),Jf=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),ns=l(function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}}),es=l(function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}}),rs=l(function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}}),ts=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),un=function(n){switch(n.$){case 0:return n;case 1:return A(ts,n.a,n.b,n.c,1);case 2:return A(Kf,n.a,n.b,n.c,1);case 3:return A(Zf,n.a,n.b,n.c,1);case 4:return A(Jf,n.a,n.b,n.c,1);case 5:return A(rs,n.a,n.b,n.c,1);case 6:return A(ns,n.a,n.b,n.c,1);case 7:return A(es,n.a,n.b,n.c,1);case 8:case 9:default:return n}},os=s(function(n,e,r){for(;;){var t=D(At,32,n),o=t.a,t=t.b;if(h(Dt(o),32)<0)return D(Ft,!0,{B:e,n:r,q:o});n=t,e=D(Gr,{$:1,a:o},e),r=r+1}}),as=m(function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}}),is=m(function(n,e){return!D(as,D(Po,oi,n),e)}),cs=m(function(r,n){return N(oo,m(function(n,e){return r(n)?D(Gr,n,e):e}),P,n)}),us=m(function(n,e){function r(n){var e=n.a,r=n.b,n=n.c;return 0<=e&&h(e,t)<0&&0<=r&&h(r,t)<0&&0<=n&&h(n,t)<0}var t=n.a;return D(is,r,e)?{I:e,aB:n}:{I:D(cs,r,e),aB:n}}),ls=m(function(n,e){return n*e}),fs=m(function(n,e){return e+n}),ss=m(function(n,e){return n/e}),ds=j,vs=r(function(n,e,r,t,o){for(;;){var a=t(e/r),a=D(Gr,a,o);if(S(e,n))return a;n=n,e=e-1,r=r,t=t,o=a}}),cn=m(function(n,e){return n<1?P:V(vs,0,n,n,e,P)}),ms={$:0},ps=function(n){return new Float64Array([n.fS,n.fT,n.c2])},gs=m(function(n,e){var r=n.cQ,t=n.U,o=t.a,t=t.b;return D(Gr,{cK:ui(n.cK),cQ:ii(r),U:D(_l,o,t)},e)}),bs=m(function(n,e){return h(e,n)<1}),hs=m(function(n,e){return D(Nt,n,e)}),Ts=m(function(n,e){return D(cl,n,e)}),xs=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return fi({e8:e,e9:t,fa:a,fb:n,fc:r,fd:o});var c=i.a,u=i.b,l=wl(c.cQ),f=Cl(c.cQ),c=Ml(c.cQ);n=D(cl,n,c),e=D(Nt,e,c),r=D(cl,r,f),t=D(Nt,t,f),o=D(cl,o,l),a=D(Nt,a,l),i=u}}),Ss=m(function(n,e){var r=wl(n.cQ),t=Cl(n.cQ),n=Ml(n.cQ);return x(xs,n,n,t,t,r,r,e)}),Ps=m(function(n,e){var r=n,n=e,e=Of(n);return{fS:e*Of(r),fT:e*ds(r),c2:ds(n)}}),ys=(X=D(mt,0,71),Re=D(cn,72,D(Wl,0,6.283185307179586)),Dc=Mt(36),Nc=D(mt,0,Dc-1),Ac=D(cn,Dc,D(Wl,1.5707963267948966,-1.5707963267948966)),Re=ti(Ga(D(ao,function(e){return D(ao,function(n){return{cK:di(D(Ps,e,n)),cQ:N(Ul,D(ls,ri(n)*ri(e),1),D(ls,ri(n)*ai(e),1),D(ls,ai(n),1)),U:{a:D(ss,e,6.283185307179586),b:D(ss,D(fs,1.5707963267948966,n),3.141592653589793)}}},Ac)},Re))),Vc=m(function(n,e){return n*(Dc+1)+e}),X=Ga(D(ao,function(o){return Ga(D(ao,function(n){var e=D(Vc,o+1,n),r=D(Vc,o,n),t=D(Vc,o+1,n+1),n=D(Vc,o,n+1);return b([{a:n,b:t,c:e},{a:n,b:e,c:r}])},Nc))},X)),un(function(n){var e=N(Xr,gs,P,si(n));if(e.b){var r=e.a,t=e.b,e=D(Yl,e,li(n)),t=D(Ss,r,t);return A(ns,t,n,e,0)}return ms}(D(us,Re,X)))),Ms=W,kn=m(function(n,e){for(;;){var r=D(Ms,144,2*n+3),t=D(Ms,144,2*n+2),o=2*n+1,a=2*n,r=D(Gr,{a:144,b:a,c:t},D(Gr,{a:a,b:r,c:t},D(Gr,{a:a,b:o,c:r},D(Gr,{a:o,b:145,c:r},e))));if(!n)return r;n=n-1,e=r}}),Cs=s(function(n,e,r){return.5<r?e+(1-r)*(n-e):n+r*(e-n)}),pr=m(function(n,e){for(;;){var r=N(Cs,0,6.283185307179586,n/72),r=D(Gr,{ck:r,cL:0,cT:1},D(Gr,{ck:r,cL:1,cT:1},e));if(!n)return r;n=n-1,e=r}}),ws=(xe=D(pr,71,b([{ck:0,cL:0,cT:0},{ck:0,cL:1,cT:0}])),yr=D(kn,71,P),D(Yl,xe,yr)),Ls={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"ck",offsetScale:"cL",radiusScale:"cT"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cX",viewMatrix:"f"}},$s=m(function(n,e){return{eJ:S(n.eJ,e.eJ),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,O:e.O+(n.O*e.s+n.P*e.v+n.Q*e.y)*e.cV,P:e.P+(n.O*e.t+n.P*e.w+n.Q*e.z)*e.cV,Q:e.Q+(n.O*e.u+n.P*e.x+n.Q*e.A)*e.cV,cV:n.cV*e.cV}}),zs=m(function(n,e){var r=e;switch(r.$){case 0:return Ku;case 5:var t=r.b,o=D($s,r.a,n);return D(Hf,o,t);case 1:case 3:case 2:default:return D(Hf,n,r)}}),Ds=m(function(n,e){return D(zs,function(n){n=ci(n);return{eJ:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,O:n.fS,P:n.fT,Q:n.c2,cV:1}}(n),e)}),Ns=l(function(n,e,r,t){r=D(jf,r,ys),r=(e={a:n,b:e}).a?e.b?Va(b([r,vi()])):r:e.b?vi():Ku,e=Ja(t);return D(Ds,D(Pf,df,Ka(t)),D(Xf,{a:e,b:e,c:e},r))}),fr=m(function(n,e){return A(Ns,!0,!0,n,e)}),As=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),Vs=s(function(n,e,r){return{$:2,a:n,b:e,c:r}}),_s=m(function(n,e){return{$:0,a:n,b:e}}),Fs=function(n){switch(n.$){case 0:return D(_s,n.a,n.b);case 1:return N(As,n.a,n.b,n.c);case 2:return N(Vs,n.a,n.b,n.c);default:return V(tf,n.a,n.b,n.c,n.d,n.e)}},Bs=m(function(n,e){var r=e;if(n.$)return Aa(T(r,{du:0}));e=n.a,n=r.d$;return!n.b||!n.b.b&&1===n.a.$?r:Aa(T(r,{du:e}))}),Sr=m(function(n,e){return T(e,{e6:n})}),q=(Cn=D(sf,df,2),fn=D(fr,Fs(pf),Cn),D(xf,N(hu,0,0,2),D(Bs,Oa(1),D(Sr,u({f4:.8,gu:.3}),D(ln,Cn,{at:fn,G:lf}))))),ks=s(function(n,e,r){return{fS:n,fT:e,c2:r}}),K=40,Es=161,U=131,Rs=s(function(n,e,r){var t=n,o=r,a=.5*e,i=Of(a),c=ds(a),u=t.dH,l=o.fS-u.fS,f=o.fT-u.fT,s=o.c2-u.c2,d=t.gj,v=d.fS*c,n=i*v,r=v*v,e=d.fT*c,a=i*e,o=v*e,t=e*e,c=d.c2*c,i=i*c,v=v*c,e=e*c,c=c*c;return{fS:u.fS+(1-2*(t+c))*l+2*(o-i)*f+2*(v+a)*s,fT:u.fT+2*(o+i)*l+(1-2*(r+c))*f+2*(e-n)*s,c2:u.c2+2*(v-a)*l+2*(e+n)*f+(1-2*(r+t))*s}}),qs=m(function(n,e){var r=.5*n,n=ds(r),r=Of(r),e=pi(e);return A(tu,e.fS*n,e.fT*n,e.c2*n,r)}),Ws=s(function(n,e,r){var t=r.b;return D(ou,r.a,D(uu,D(qs,e,n),t))}),Us=s(function(n,e,r){var t=r,o=D(fu,t.cb,Sa(t.cp)),r=N(Rs,n,e,ba(o)),o=N(Ws,Ta(mi(n)),function(n){return n}(e),D(Tf,ha(r),o)),o=D(fu,o,t.cp);return T(t,{cA:D(Hu,o,t.dk),cb:o,ed:D(Ru,o,t.d$)})}),js=m(function(n,e){var r=e.b;return D(ou,D(Kc,n,e.a),r)}),Hs=m(function(n,e){var r=e,e=D(fu,r.cb,Sa(r.cp)),e=D(fu,D(js,function(n){return n}(n),e),r.cp);return T(r,{cb:e,ed:D(Ru,e,r.d$)})}),Gs=m(function(n,e){return{gj:e,dH:n}}),Ys={fS:1,fT:0,c2:0},c=D(Gs,df,Ys),Re=(j=m(function(n,e){return N(hu,n,e,0)}),cn=Es/2,D(Hs,N(ks,0,0,K),N(Us,c,3.141592653589793,Xu({at:V(rf,Fs(pf),D(j,-cn,-cn),D(j,-cn,cn),D(j,cn,cn),D(j,cn,-cn)),G:bu})))),X={f$:P,gc:P,gd:P,gt:P,eA:cu,gU:0,hc:Lt},W={fS:0,fT:0,c2:-1},Qs=kn={fS:0,fT:0,c2:1},Is={dH:df,ef:Ys,eg:pr={fS:0,fT:1,c2:0},eh:Qs},Xs={fS:1,fT:0,c2:0},Os={fS:0,fT:1,c2:0},Ks=b([Xs,Os,Iu]),Zs={fS:-1,fT:0,c2:0},Js={fS:0,fT:-1,c2:0},nd={fS:0,fT:0,c2:-1},ed=s(function(n,e,r){var t=r/2,o=e/2,a=n/2,i=n*e*r,c={fS:-a,fT:o,c2:t},u={fS:a,fT:o,c2:t},l={fS:a,fT:-o,c2:t},f={fS:-a,fT:-o,c2:t},s={fS:-a,fT:o,c2:-t},d={fS:a,fT:o,c2:-t},v={fS:a,fT:-o,c2:-t},t={fS:-a,fT:-o,c2:-t},n={eS:i/12*(e*e+r*r),eT:0,eU:0,eW:0,eX:i/12*(n*n+r*r),eY:0,e_:0,e$:0,e0:i/12*(e*e+n*n)};return{bP:b([{cK:nd,aB:b([s,d,v,t])},{cK:Iu,aB:b([f,l,u,c])},{cK:Js,aB:b([l,f,t,v])},{cK:Os,aB:b([d,s,c,u])},{cK:Zs,aB:b([t,f,c,s])},{cK:Xs,aB:b([v,d,u,l])}]),eG:n,cQ:cu,ec:Ks,fK:Ks,aB:b([t,v,d,s,f,l,u,c]),fQ:i}}),rd=l(function(n,e,r,t){var o=t.c2,a=r.c2,i=e.c2,c=t.fT,u=r.fT,l=e.fT,f=t.fS,t=r.fS,r=e.fS,e=r+u+o;if(0<e){var s=2*Pu(e+1);return D(ou,n,A(tu,(a-c)/s,(f-i)/s,(l-t)/s,.25*s))}if(0<h(r,u)&&0<h(r,o)){s=2*Pu(1+r-u-o);return D(ou,n,A(tu,.25*s,(t+l)/s,(f+i)/s,(a-c)/s))}if(0<h(u,o)){s=2*Pu(1+u-r-o);return D(ou,n,A(tu,(t+l)/s,.25*s,(c+a)/s,(f-i)/s))}s=2*Pu(1+o-r-u);return D(ou,n,A(tu,(f+i)/s,(c+a)/s,.25*s,(l-t)/s))}),td=z(function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{e8:e,e9:t,fa:a,fb:n,fc:r,fd:o};var u=c.b,l=zi(i(c.a));n=D(Ts,l.fb,n),e=D(hs,l.e8,e),r=D(Ts,l.fc,r),t=D(hs,l.e9,t),o=D(Ts,l.fd,o),a=D(hs,l.fa,a),i=i,c=u}}),od=s(function(n,e,r){e=zi(n(e));return p(td,e.fb,e.e8,e.fc,e.e9,e.fd,e.fa,n,r)}),ad=m(function(n,e){return{fS:e.fT*n.c2-e.c2*n.fT,fT:e.c2*n.fS-e.fS*n.c2,c2:e.fS*n.fT-e.fT*n.fS}}),id={fS:0,fT:0,c2:0},cd=m(function(n,e){var r=n,t=e,o=D(Nt,Ya(t.fS),D(Nt,Ya(t.fT),Ya(t.c2)));if(o){n=t.c2/o,e=t.fT/o,t=t.fS/o,o=Pu(t*t+e*e+n*n);return{fS:r*t/o,fT:r*e/o,c2:r*n/o}}return id})(1),ud=s(function(n,e,r){r=D(Pf,e,r),e=D(Pf,n,e);return cd(D(ad,r,e))}),ld=m(function(n,e){return{$:2,a:n,b:e}})({eu:3,eF:0,ff:4}),xe=s(function(n,e,r){return{a:n,b:e,c:r}}),fd=(yr=D(ls,-.5,1),fr=D(ls,-.5,1),Sr=D(ls,-.5,1),u=N(Ul,Sr,fr,yr),ln=D(ls,.5,1),Cn=N(Ul,Sr,fr,ln),fn=D(ls,.5,1),c=N(Ul,Sr,fn,yr),j=N(Ul,Sr,fn,ln),cn=D(ls,.5,1),Sr=N(Ul,cn,fr,yr),yr=N(Ul,cn,fn,yr),fr=N(Ul,cn,fr,ln),ln=N(Ul,cn,fn,ln),un(function(n){if(n.b){var e=n.a,r=n.b,t=ld(D(ao,Fi,n)),r=N(od,_i,e,r);return A(Kf,r,n,t,0)}return ms}(b([N(xe,u,yr,Sr),N(xe,u,c,yr),N(xe,Cn,fr,ln),N(xe,Cn,ln,j),N(xe,Sr,yr,ln),N(xe,Sr,ln,fr),N(xe,u,j,c),N(xe,u,Cn,j),N(xe,u,Sr,fr),N(xe,u,fr,Cn),N(xe,c,ln,yr),N(xe,c,j,ln)])))),sd={$:0},dd=s(function(n,e,r){return{$:1,a:n,b:e,c:r}}),vd=s(function(n,e,r){var t=e.a,o=e.b,e=n(e.c),o=n(o),n=n(t),t=ui(N(ud,n,o,e)),n={cK:t,cQ:ii(n)},o={cK:t,cQ:ii(o)},e={cK:t,cQ:ii(e)};return D(Gr,n,D(Gr,o,D(Gr,e,r)))}),md=l(function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?at:ot(N(n,e.a,r.a,t.a))}),pd=4294967295>>>32-wt,gd=_,bd=s(function(n,e,r){for(;;){var t=D(gd,pd&e>>>n,r);if(t.$)return D(gd,pd&e,t.a);n=n-wt,e=e,r=t.a}}),hd=m(function(n,e){var r=e.a,t=e.b,o=e.c,e=e.d;return n<0||-1<h(n,r)?at:-1<h(n,r>>>5<<5)?ot(D(gd,pd&n,e)):ot(N(bd,t,n,o))}),Td=m(function(n,e){return D(hd,n,si(e))}),xd=m(function(n,e){e=ha(e),n=ha(n);return{a:{a:n.fS,b:n.fT,c:n.c2},b:{a:e.fS,b:e.fT,c:e.c2}}}),Sd=N(xl,0,0,0),Pd=t(function(n,e,r,t,o,a){var i=a.a,c=a.b,u=a.c,a=D(Yo,D(xd,n,e),o);if(a.$){o={cK:Sd,cQ:ii(e)},e={cK:Sd,cQ:ii(n)},n=u+1;return{a:D(Gr,{a:r,b:u,c:n},D(Gr,{a:r,b:n,c:t},i)),b:D(Gr,o,D(Gr,e,c)),c:u+2}}return{a:D(Gr,{a:r,b:a.a,c:t},i),b:c,c:u}}),yd=r(function(n,e,r,t,o){for(;;){if(!r.b)return{a:o.a,b:bt(o.b)};var a=r.a,i=a.a,c=a.b,u=r.b,l=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,a=n,c=e,i=u,u=t+3,v=C(Pd,l,s,d,t,e,C(Pd,f,l,v,d,e,C(Pd,s,f,t,v,e,o)));n=a,e=c,r=i,t=u,o=v}}),Md=r(function(n,e,r,t,o){for(;;){if(!e.b)return{a:t,b:o,c:r};var a=e.a,i=a.a,c=a.b,u=e.b,l=n(a.c),f=n(c),s=n(i),a=r+2,c=r+1,i=r,s=N(Uo,D(xd,s,l),a,N(Uo,D(xd,l,f),c,N(Uo,D(xd,f,s),i,o)));n=n,e=u,r=r+3,t=D(Gr,{a:i,b:c,c:a},t),o=s}}),Cd=s(function(n,e,r){var t,o=D(pa,function(n){var e=n.a,r=n.b,n=n.c;return A(md,s(function(n,e,r){return{a:n,b:e,c:r}}),D(Td,e,t),D(Td,r,t),D(Td,n,t))},li(t=r)),a=N(oo,vd(e),P,o),r=V(Md,e,o,0,P,ko),o=V(yd,e,r.b,o,0,{a:r.a,b:P,c:r.c}),r=o.a,o=o.b,a=o.b?v(a,o):a;return N(dd,n,D(us,ti(a),r),D(Yl,a,r))}),wd=(ln=function(n){switch(n.$){case 0:return sd;case 1:case 2:var e=n.a,r=D(ao,Di,n.b);return N(Cd,e,Rr,Bi(r));case 3:return N(Cd,e=n.a,Rr,n.b);case 4:case 5:case 6:case 7:var e;return N(Cd,e=n.a,function(n){return n.cQ},n.b);case 8:case 9:default:return sd}})(fd),Ld=m(function(n,e){return D(zs,function(n){var e=Ra(yi(n)),r=Ta(Ca(n)),t=Ta(wi(n)),o=Ta(Ci(n));return{eJ:Pi(n),s:o.fS,t:o.fT,u:o.c2,v:t.fS,w:t.fT,x:t.c2,y:r.fS,z:r.fT,A:r.c2,O:e.fS,P:e.fT,Q:e.c2,cV:1}}(n),e)}),$d={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"cK",position:"cQ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cX",viewMatrix:"f"}},zd=l(function(n,e,r,t){r=D(jf,r,fd),r=(e={a:n,b:e}).a?e.b?Va(b([r,ki(wd)])):r:e.b?ki(wd):Ku,e=hi(t);return D(Ld,bi(t),D(Xf,{a:e.a,b:e.b,c:e.c},r))}),Dd=m(function(n,e){return A(zd,!0,!1,n,e)}),Nd=m(function(n,e){return{fZ:gi(n),gi:{a:Qa(e.a),b:Qa(e.b),c:Qa(e.c)}}}),Ad=D(Gs,df,pr),Vd=m(function(n,e){n=D(Nd,Is,{a:e,b:n,c:.1});return N(Us,Ad,1.5707963267948966,D($i,n,{at:D(Dd,Fs(pf),n),G:bu}))}),_d=m(function(n,e){var r=n.eh,t=n.eg,n=n.ef;return{fS:n.fS*e.fS+t.fS*e.fT+r.fS*e.c2,fT:n.fT*e.fS+t.fT*e.fT+r.fT*e.c2,c2:n.c2*e.fS+t.c2*e.fT+r.c2*e.c2}}),Ar=s(function(n,t,e){var r=D(Hs,N(ks,0,0,e/2),D(Vd,t,e)),o={a:5,b:30},a=o.a,i=o.b,o=D(Gs,N(hu,a,0,a),Ys),c=D(ao,function(n){var e=90/i*n,r=N(ks,Of(3.141592653589793*e/180)*a,0,-ds(3.141592653589793*e/180)*a);return function(n){return N(Us,Ei(ya(n)),(e-90)/180*3.141592653589793,n)}((n=D(Hs,N(ks,a,0,a),D(Vd,t,2)),D(Hs,D(_d,ya(n),r),n)))},D(ao,Er,D(mt,1,i-1))),u=D(ao,Hs(N(ks,0,0,e-2*a)),D(ao,D(Us,o,3.141592653589793),c));switch(n){case 0:return D(Gr,r,u);case 1:return D(Gr,r,c);case 2:return D(Gr,r,v(c,u));default:return b([r])}}),Me=D(Gs,df,Qs),Wr=(_={aE:15,l:.08*U,k:.17*U},Wr=2*Pu(2*D(af,10,2)),_=Ga(b([D(ao,Hs(N(ks,0,U/4+_.k/4,0)),N(Ar,2,U/2-_.k/2,K)),D(ao,Hs(N(ks,0,-U/4-_.k/4,0)),N(Ar,2,U/2-_.k/2,K)),D(ao,Hs(N(ks,0,0,_.l)),N(Ar,0,_.k,K-_.l)),D(ao,Hs(N(ks,-_.aE,0,0)),N(Ar,2,_.k,_.l)),b([N(Us,Me,1.5707963267948966,D(Hs,N(ks,-_.k/2,_.aE/2,_.l/2),D(Vd,_.aE,_.l))),N(Us,Me,-1.5707963267948966,D(Hs,N(ks,-_.k/2,-_.aE/2,_.l/2),D(Vd,_.aE,_.l))),N(Us,Ad,1.5707963267948966,D(Hs,N(ks,-_.l,0,-_.aE/2),D(Vd,_.k,_.aE)))])])),Ga(b([D(ao,Hs(N(ks,Es/2,0,0)),D(ao,D(Us,Me,3.141592653589793),_)),D(ao,Hs(N(ks,Es/2-10,-U/2+10,0)),D(ao,D(Us,Me,2.356194490192345),N(Ar,2,Wr,K))),D(ao,Hs(N(ks,0,-U/2,0)),D(ao,D(Us,Me,1.5707963267948966),N(Ar,2,Es,K))),D(ao,Hs(N(ks,-Es/2+10,-U/2+10,0)),D(ao,D(Us,Me,.7853981633974483),N(Ar,2,Wr,K))),D(ao,Hs(N(ks,-Es/2,0,0)),_),D(ao,Hs(N(ks,-Es/2+10,U/2-10,0)),D(ao,D(Us,Me,-.7853981633974483),N(Ar,2,Wr,K))),D(ao,Hs(N(ks,0,U/2,0)),D(ao,D(Us,Me,-1.5707963267948966),N(Ar,2,Es,K))),D(ao,Hs(N(ks,Es/2-10,U/2-10,0)),D(ao,D(Us,Me,-2.356194490192345),N(Ar,2,Wr,K)))]))),K=s(function(n,e,r){return T(r,{eA:D(Jc,function(n){return n}(n),Ta(e))})}),Fd=D(du,q,D(du,Re,(X=N(K,9.807,W,X),N(st,du,X,Wr)))),Bd=Co(P),kd=m(function(r,n){return T(n,{f$:N(st,m(function(n,e){return D(Gr,function(n){return T(r(n),{G:n.G})}(n),e)}),P,n.f$)})}),Ed={$:1},Rd=m(function(n,e){return A(zd,!0,!0,n,e)}),qd={aD:0,ar:df,aV:at,aX:0,aY:0,bq:0,T:0,c_:0,bt:0},Wd=Va,Ud=m(function(n,e){return{fS:e.fS+n.fS,fT:e.fT+n.fT,c2:e.c2+n.c2}}),jd=m(function(n,e){return{dH:D(Ud,n,yi(e)),ef:Ci(e),eg:wi(e),eh:Ca(e)}}),Hd=m(function(n,e){return{fS:n*e.fS,fT:n*e.fT,c2:n*e.c2}}),Gd=function(){var n=b([T(qd,{ar:N(hu,1,1,0)}),T(qd,{ar:N(hu,1,-1,0)}),T(qd,{ar:N(hu,-1,1,0)}),T(qd,{ar:N(hu,-1,-1,0)})]),e={a:2.8,b:2,c:.5},r=D(Nd,Is,e),t=N(hu,-35,0,1.1),o=(o={ek:N(mf,0,180,180),fw:.5},Ia({ek:o.ek,dA:0,fw:o.fw})),o=Wd(b([D(Rd,o,D(Nd,Is,e)),D(Dd,o,D(Nd,D(jd,D(Hd,-.3,Ci(Is)),D(jd,D(Hd,.5,Ca(Is)),Is)),{a:2.2,b:1.8,c:.5}))]));return D(xf,t,D(Bs,Oa(1190),D($i,r,{at:o,G:{$:0,a:n}})))}(),Yd=m(function(n,e){var r=e.c2-n.c2,t=e.fT-n.fT,e=e.fS-n.fS,n=D(Nt,Ya(e),D(Nt,Ya(t),Ya(r)));if(n){r=r/n,t=t/n,e=e/n;return Pu(e*e+t*t+r*r)*n}return 0}),Qd=s(function(n,e,r){return 0<h(e-r.fH,n)})(gu),Id=m(function(n,e){return za(D(nu,n,e))}),Xd=m(function(n,e){var r=D(Id,ba(n.cb),ba(e.cb)),t=n.el+e.el;return 0<t*t-r&&!!(n.du+e.du)}),Od=m(function(n,e){return n.fS*e.fS+n.fT*e.fT+n.c2*e.c2}),Kd=l(function(n,e,r,t){for(;;){if(!e.b)return r;var o=e.a,a=e.b,i=D(Od,o.cK,n);t=0<t-i?(n=n,e=a,r=o,i):(n=n,e=a,r=r,t)}}),Zd=m(function(n,e){if(n.b){var r=n.a;return ot(A(Kd,e,n.b,r,D(Od,r.cK,e)))}return at}),Jd=s(function(n,e,r){return{fS:e.fS+n*(r.fS-e.fS),fT:e.fT+n*(r.fT-e.fT),c2:e.c2+n*(r.c2-e.c2)}}),nv=r(function(n,e,r,t,o){var a=D(Od,n,r)+e,e=D(Od,n,t)+e;return a<0?D(Gr,e<0?t:N(Jd,a/(a-e),r,t),o):e<0?D(Gr,t,D(Gr,N(Jd,a/(a-e),r,t),o)):o}),ev=l(function(n,e,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;if(!a.b)return N(n,o,e,r);var i=n,c=e,o=N(n,o,a.a,r);n=i,e=c,r=o,t=a}}),rv=s(function(n,e,r){if(r.b&&r.b.b)return A(ev,n,r.a,e,r);return e}),tv=m(function(n,e){var r=n.aB,t=n.cK;return N(rv,m(function(n,e){e=pi(D(nu,n,e)),e=D(Zc,t,e),n=-D(Od,n,e);return D(rv,D(nv,e,n),P)}),e,r)}),ov=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,d=D(Od,e.cK,f)+r;o=0<d?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(c=r,u=s,l=D(Gr,{gV:a=n,g1:{fS:f.fS-d*(i=e).cK.fS,fT:f.fT-d*e.cK.fT,c2:f.c2-d*e.cK.c2},g2:f},o),n=a,e=i,r=c,t=u,l)}}),av=l(function(n,e,r,t){var o=e.aB,e=(e=n.aB).b?e.a:cu,e=-D(Od,n.cK,e);return V(ov,r,n,e,D(tv,n,o),t)}),iv=l(function(n,e,r,t){for(;;){if(!t.b)return{cI:r,dC:e};var o=t.a,o=o.fS*n.fS+o.fT*n.fT+o.c2*n.c2;n=n,e=0<e-o?o:e,r=0<r-o?r:o,t=t.b}}),cv=s(function(n,e,r){e=A(iv,r,340282347e30,-340282347e30,e.aB),r=A(iv,r,340282347e30,-340282347e30,n.aB),n=e.cI-r.dC,e=r.cI-e.dC;return e<0||n<0?at:ot(0<e-n?n:e)}),uv=o(function(n,e,r,t,o,a,i){for(;;){if(!t.b)return 0<D(Od,D(nu,e.cQ,n.cQ),a)?ot(Gi(a)):ot(a);var c=t.a,u=t.b;if(o.b){var l=o.b,f=D(Zc,c,o.a);if(0<Ya((c=f).fS)-1e-6||0<Ya(c.fT)-1e-6||0<Ya(c.c2)-1e-6){c=pi(f),f=N(cv,n,e,c);if(1===f.$)return at;f=f.a;i=f-i<0?(n=n,e=e,r=r,t=t,o=s=l,a=c,f):(n=n,e=e,r=r,t=t,o=s=l,a=a,i)}else n=n,e=e,r=r,t=t,o=s=l,a=a,i=i}else{var s=r;n=n,e=e,r=r,t=u,o=s,a=a,i=i}}}),lv=r(function(n,e,r,t,o){for(;;){if(!r.b)return x(uv,n,e,e.ec,n.ec,e.ec,t,o);var a=r.a,i=r.b,c=N(cv,n,e,a);if(1===c.$)return at;c=c.a;o=c-o<0?(n=n,e=e,r=i,t=a,c):(n=n,e=e,r=i,t=t,o)}}),fv=m(function(n,e){return V(lv,n,e,v(n.fK,e.fK),cu,340282347e30)}),sv=s(function(n,e,r){var t=D(fv,n,e);if(t.$)return r;var o=t.a,t=Gi(o),o=D(Zd,n.bP,o);if(o.$)return r;o=o.a,e=D(Zd,e.bP,t);return e.$?r:A(av,o,e.a,t,r)}),dv=l(function(n,e,r,t){for(;;){if(!e.b)return t;var o,a,i,c,u=e.a.aB,l=e.a.cK,f=e.b,u=D(Od,l,D(nu,u.b?u.a:cu,n));if(u<0)return at;t=h(u,r)<0?(a=f,c=ot({gV:Gi(l),g1:o=n,g2:D(Kc,n,D(Jc,i=u,l))}),n=o,e=a,r=i,c):(n=o=n,e=a=f,r=i=r,c=t)}}),vv=l(function(n,e,r,t){r=A(dv,e,r.bP,340282347e30,at);return r.$?t:D(Gr,n(r.a),t)}),mv=r(function(n,e,r,t,o){for(;;){if(!t.b)return o;var a,i,c,u,l,f=t.a,s=t.b,d=(f.fS-e.fS)*r.fS+(f.fT-e.fT)*r.fT+(f.c2-e.c2)*r.c2;o=0<d?(n=a=n,e=i=e,r=c=r,t=u=s,l=o):(i=e,u=s,l=D(Gr,(a=n)({gV:c=r,g1:{fS:f.fS-d*r.fS,fT:f.fT-d*r.fT,c2:f.c2-d*r.c2},g2:f}),o),n=a,e=i,r=c,t=u,l)}}),pv=l(function(n,e,r,t){return V(mv,n,e.cQ,e.cK,r.aB,t)}),gv=l(function(n,e,r,t){var o=e.cQ,e=e.cK,o=(r.fS-o.fS)*e.fS+(r.fT-o.fT)*e.fT+(r.c2-o.c2)*e.c2;return 0<o?t:D(Gr,n({gV:e,g1:{fS:r.fS-o*e.fS,fT:r.fT-o*e.fT,c2:r.c2-o*e.c2},g2:r}),t)}),bv=l(function(n,e,r,t){var o=e.cK,a=e.cQ,e=r.cQ,r={fS:e.fS-r.a4*o.fS,fT:e.fT-r.a4*o.fT,c2:e.c2-r.a4*o.c2},a=(r.fS-a.fS)*o.fS+(r.fT-a.fT)*o.fT+(r.c2-a.c2)*o.c2;return 0<a?t:D(Gr,n({gV:o,g1:{fS:r.fS-a*o.fS,fT:r.fT-a*o.fT,c2:r.c2-a*o.c2},g2:r}),t)}),hv=m(function(n,e){n=D(nu,n,e),e=Da(n);return{fS:n.fS/e,fT:n.fT/e,c2:n.c2/e}}),Tv=l(function(n,e,r,t){for(;;){if(n(r))return r;if(!t.b)return r;var o=t.b,a=D(e,t.a,r);n=n,e=e,r=a,t=o}}),xv=s(function(n,e,r){function t(n){var e=za(n);return e-o<0?{a:ot(n),b:e}:r}var o=r.b,a=D(nu,e,n),i=pi(a),c=-D(Od,n,i);if(c<0)return{$:0,a:t(n)};if(0<c*c-za(a))return{$:0,a:t(e)};c=D(Kc,n,D(Jc,c,i)),i=za(c);return i-o<0?{$:1,a:{a:c,b:i}}:{$:0,a:r}}),Sv=m(function(n,e){return A(Tv,Qi,m(function(n,e){return e.$?e:N(xv,n.a,n.b,e.a)}),e,n)}),Pv=m(function(n,e){return N(st,Sv,{$:0,a:{a:at,b:n*n}},e)}),yv=m(function(n,e){return{$:1,a:n,b:e}}),Mv=m(function(n,o){return N(rv,s(function(n,e,r){var t=D(Zc,o,D(nu,e,n));return D(Od,t,n)<0?D(Gr,{a:n,b:e},r):r}),P,n)}),Cv=l(function(n,e,r,t){var o=r.b?-D(Od,e,r.a):-1;if(o-n<0&&0<o){r=D(Mv,r,e);return r.b?{$:0,a:D(Gr,r,t)}:D(yv,e,o)}return{$:0,a:t}}),wv=s(function(r,t,n){var e=n.bP,n=m(function(n,e){return{a:ot(D(nu,r,D(Jc,e,n))),b:t-e}}),o=m(function(n,e){return{a:ot(D(Kc,n,r)),b:t-Pu(e)}}),e=A(Tv,Yi,m(function(n,e){if(e.$)return e;e=e.a;return A(Cv,t,n.cK,(n=n.aB,N(st,m(function(n,e){return D(Gr,D(nu,n,r),e)}),P,n)),e)}),{$:0,a:P},e);return e.$?D(n,e.a,e.b):function(n){var e=D(Pv,t,n);if(e.$){n=e.a;return D(o,n.a,n.b)}if(e.a.a.$)return e.a;e=e.a;return D(o,e.a.a,e.b)}(e.a)}),Lv=l(function(n,e,r,t){var o=e.cQ,e=N(wv,o,e.a4,r),r=e.a,e=e.b;if(r.$)return t;r=r.a,o=D(hv,r,o);return D(Gr,n({gV:o,g1:{fS:r.fS+e*o.fS,fT:r.fT+e*o.fT,c2:r.c2+e*o.c2},g2:r}),t)}),$v=m(function(n,e){var r=e.c2-n.c2,t=e.fT-n.fT,n=e.fS-n.fS;return Pu(n*n+t*t+r*r)}),zv=l(function(n,e,r,t){var o=e.a4,a=e.cQ,i=D(hv,r,a),e=D($v,r,a)-o;return 0<e?t:D(Gr,n({gV:i,g1:D(Kc,a,D(Jc,o-e,i)),g2:r}),t)}),Dv=s(function(n,e,r){var t=e.a4,o=n.a4,a=e.cQ,i=n.cQ,e=D($v,a,i)-o-t,n=D(hv,a,i);return 0<e?r:D(Gr,{gV:n,g1:D(Kc,i,D(Jc,o-e,n)),g2:D(Kc,a,D(Jc,-t,n))},r)}),Nv=s(function(n,e,r){switch(n.$){case 0:var t=n.a;switch(e.$){case 0:return N(sv,t,e.a,r);case 1:return A(pv,Ii,e.a,t,r);case 2:return A(Lv,Ii,e.a,t,r);default:return A(vv,Ii,e.a,t,r)}case 1:var o=n.a;switch(e.$){case 1:return r;case 0:return A(pv,Rr,o,e.a,r);case 2:return A(bv,Rr,o,e.a,r);default:return A(gv,Rr,o,e.a,r)}case 2:var a=n.a;switch(e.$){case 1:return A(bv,Ii,e.a,a,r);case 0:return A(Lv,Rr,a,e.a,r);case 2:return N(Dv,a,e.a,r);default:return A(zv,Rr,a,e.a,r)}default:var i=n.a;switch(e.$){case 1:return A(gv,Ii,e.a,i,r);case 0:return A(vv,Rr,i,e.a,r);case 2:return A(zv,Ii,e.a,i,r);default:return r}}}),Av=r(function(n,e,r,t,o){for(;;)if(r.b){var a=n,i=e,c=r.b,u=t,l=N(Nv,n,r.a,o);n=a,e=i,r=c,t=u,o=l}else{if(!e.b)return o;n=a=e.a,e=i=e.b,t=u=r=c=t,o=l=o}}),Vv=m(function(n,e){return n.b?V(Av,n.a,n.b,e,e,P):P}),_v=l(function(e,n,r,t){for(;;)if(r.b){var o=r.a,a=e,i=n,c=l=r.b,u=function(){if(D(Xd,e,o)){var n=D(Vv,e.ed,o.ed);return n.b?D(Gr,{f0:e,f1:o,ge:n},t):t}return t}();e=a,n=i,r=c,t=u}else{if(!n.b)return t;var l;e=a=n.a,n=i=l=n.b,r=c=l,t=u=t}}),Fv=r(function(n,e,r,t,o){var a=e.g1,i=e.g2,c=e.gV,u=o.L,l=o.H,e=o.D,o=o.E,e=(n+1)*(D(Od,t.c0,c)-D(Od,r.c0,c))+D(Od,t.cl,o)+D(Od,r.cl,e);return-((i.fS-a.fS)*c.fS+(i.fT-a.fT)*c.fT+(i.c2-a.c2)*c.c2)*u-e*l}),Bv=s(function(n,e,r){var t=r.D,o=r.E;return n.cB+e.cB+t.fS*(n.cA.eS*t.fS+n.cA.eT*t.fT+n.cA.eU*t.c2)+t.fT*(n.cA.eW*t.fS+n.cA.eX*t.fT+n.cA.eY*t.c2)+t.c2*(n.cA.e_*t.fS+n.cA.e$*t.fT+n.cA.e0*t.c2)+o.fS*(e.cA.eS*o.fS+e.cA.eT*o.fT+e.cA.eU*o.c2)+o.fT*(e.cA.eW*o.fS+e.cA.eX*o.fT+e.cA.eY*o.c2)+o.c2*(e.cA.e_*o.fS+e.cA.e$*o.fT+e.cA.e0*o.c2)+r.S}),kv=l(function(n,e,r,t){var o=t.D,a=t.M,i=t.E,t=0<r.du?n:cu,n=0<e.du?n:cu;return a.fS*(r.cB*r.cu.fS+t.fS)+a.fT*(r.cB*r.cu.fT+t.fT)+a.c2*(r.cB*r.cu.c2+t.c2)-(a.fS*(e.cB*e.cu.fS+n.fS)+a.fT*(e.cB*e.cu.fT+n.fT)+a.c2*(e.cB*e.cu.c2+n.c2))+o.fS*(e.cA.eS*e.c$.fS+e.cA.eT*e.c$.fT+e.cA.eU*e.c$.c2)+o.fT*(e.cA.eW*e.c$.fS+e.cA.eX*e.c$.fT+e.cA.eY*e.c$.c2)+o.c2*(e.cA.e_*e.c$.fS+e.cA.e$*e.c$.fT+e.cA.e0*e.c$.c2)+i.fS*(r.cA.eS*r.c$.fS+r.cA.eT*r.c$.fT+r.cA.eU*r.c$.c2)+i.fT*(r.cA.eW*r.c$.fS+r.cA.eX*r.c$.fT+r.cA.eY*r.c$.c2)+i.c2*(r.cA.e_*r.c$.fS+r.cA.e$*r.c$.fT+r.cA.e0*r.c$.c2)}),Ev=r(function(n,e,r,t,o){return{ex:{W:o.W,Z:o.Z,ad:N(n,r,t,o)-e.r*A(kv,e.eA,r,t,o),ae:1/N(Bv,r,t,o),L:o.L,H:o.H,S:o.S,M:o.M,D:o.D,E:o.E},fC:0}}),Rv=l(function(n,e,r,t){var o=4/(n.r*n.r*1e7*13),a=4/(13*n.r),i=D(hv,ba(r.cb),ba(e.cb)),c=t/2,t=D(Jc,c,i),c=D(Jc,-c,i);return Gr(V(Ev,D(Fv,0,{gV:i,g1:D(Kc,t,ba(e.cb)),g2:D(Kc,c,ba(r.cb))}),n,e,r,{W:1e6,Z:-1e6,ad:0,ae:0,L:a,H:12/13,S:o,M:i,D:D(Zc,i,t),E:D(Zc,c,i)}))}),qv=s(function(n,e,r){var t=r.D,o=r.M,r=r.E;return t.fS*n.cl.fS+t.fT*n.cl.fT+t.c2*n.cl.c2-(o.fS*n.c0.fS+o.fT*n.c0.fT+o.c2*n.c0.c2)+(o.fS*e.c0.fS+o.fT*e.c0.fT+o.c2*e.c0.c2)+(r.fS*e.cl.fS+r.fT*e.cl.fT+r.c2*e.cl.c2)}),Wv=l(function(n,e,r,t){var o=n.gV,a=n.a1,i=n.a0,c=t.L,n=t.H,t=N(qv,e,r,t);return-(i-D(Od,o,a))*c-t*n}),Uv=t(function(n,e,r,t,o,a){var i=D(wu,r.cb,o),c=D(wu,e.cb,t),u=4/(n.r*n.r*1e7*13),l=4/(13*n.r),o=i,t=i,i=Oi(c),c=i.a,i=i.b;return D(Gr,V(Ev,Wv({a0:0,gV:c,a1:t}),n,e,r,{W:1e6,Z:-1e6,ad:0,ae:0,L:l,H:12/13,S:u,M:cu,D:D(Zc,t,c),E:D(Zc,c,t)}),D(Gr,V(Ev,Wv({a0:0,gV:i,a1:o}),n,e,r,{W:1e6,Z:-1e6,ad:0,ae:0,L:l,H:12/13,S:u,M:cu,D:D(Zc,o,i),E:D(Zc,i,o)}),a))}),jv=t(function(e,r,t,n,o,a){var i=4/(e.r*e.r*1e7*13),c=4/(13*e.r),u=D(wu,t.cb,o),l=D(wu,r.cb,n);return N(st,function(n){return Gr(V(Ev,D(Fv,0,{gV:n,g1:D(Kc,ba(r.cb),l),g2:D(Kc,ba(t.cb),u)}),e,r,t,{W:1e6,Z:-1e6,ad:0,ae:0,L:c,H:12/13,S:i,M:n,D:D(Zc,n,l),E:D(Zc,u,n)}))},a,Ks)}),Hv=l(function(n,e,r,t){switch(t.$){case 0:return V(jv,n,e,r,t.a,t.b);case 1:var o=t.b,a=t.d;return D(Fo,V(jv,n,e,r,t.a,t.c),V(Uv,n,e,r,o,a));case 2:var i=t.b,c=t.c,u=t.d,l=t.f,o=t.g,a=t.h;return D(Fo,V(jv,n,e,r,t.a,t.e),w(Ki,n,e,r,i,l,c,o,u,a));default:return A(Rv,n,e,r,t.a)}}),Gv=l(function(n,e,r,t){return{f2:e.G,f3:r.G,dg:N(st,N(Hv,n,e,r),P,t)}}),Yv=s(function(n,e,r){var t=r.H;return-N(qv,n,e,r)*t}),Qv=o(function(n,e,r,t,o,a,i){var c=4/(n.r*n.r*1e7*13),u=4/(13*n.r),l=D(nu,a.g2,ba(o.cb)),f=D(nu,a.g1,ba(t.cb)),s=Oi(a.gV),d=s.a,s=s.b;return D(Gr,V(Ev,D(Fv,r,a),n,t,o,{W:1e6,Z:0,ad:0,ae:0,L:u,H:12/13,S:c,M:a.gV,D:D(Zc,a.gV,f),E:D(Zc,l,a.gV)}),D(Gr,V(Ev,Yv,n,t,o,{W:e,Z:-e,ad:0,ae:0,L:u,H:12/13,S:c,M:d,D:D(Zc,d,f),E:D(Zc,l,d)}),D(Gr,V(Ev,Yv,n,t,o,{W:e,Z:-e,ad:0,ae:0,L:u,H:12/13,S:c,M:s,D:D(Zc,s,f),E:D(Zc,l,s)}),i)))}),Iv=m(function(n,e){e=.5*(n+e),e=1+e-Ya(1-e);return.25*(e+Ya(e))}),Xv=m(function(n,e){return D(Iv,n.f4,e.f4)}),Ov=m(function(n,e){return D(Iv,n.gu,e.gu)}),Kv=m(function(n,e){var r=e.f0,t=e.f1,o=e.ge,a=0<r.cB+t.cB?D(Ov,r.e6,t.e6)*n.eB/(r.cB+t.cB):0,e=D(Xv,r.e6,t.e6);return{f2:r.G,f3:t.G,dg:N(st,V(Qv,n,a,e,r,t),P,o)}}),Zv=m(function(n,e){return D(kt,n,function(){return e})}),Jv=F,nm=l(function(n,e,r,t){var o=pd&e>>>n,a=D(gd,o,t);if(a.$){var i=N(Jv,pd&e,r,a.a);return N(Jv,o,{$:1,a:i},t)}a=A(nm,n-wt,e,r,a.a);return N(Jv,o,{$:0,a:a},t)}),em=s(function(n,e,r){var t=r.a,o=r.b,a=r.c,i=r.d;return n<0||-1<h(n,t)?r:-1<h(n,t>>>5<<5)?A(Pt,t,o,a,N(Jv,pd&n,e,i)):A(Pt,t,o,A(nm,o,n,e,a),i)}),rm=m(function(n,e){if(e.b){var r={c7:T(e.a,{G:-1}),bx:0,by:0,bz:0,bB:0,bC:0,bD:0},n=D(Zv,n,r);return{a:N(st,function(n){return D(em,n.G,{c7:n,bx:0,by:0,bz:0,bB:0,bC:0,bD:0})},n,e),b:ot(r)}}return{a:Lt,b:at}}),tm=r(function(n,e,r,t,o){for(;;){if(!o.b)return{f0:n,f1:e,df:t,dg:r};var a=o.a.fC,i=o.a.ex,c=o.b,u=e.c7.cA,l=n.c7.cA,f=i.D,s=i.M,d=i.E,v=i.Z,m=i.W,p=i.ae*(i.ad-(f.fS*n.bB+f.fT*n.bC+f.c2*n.bD-(s.fS*n.bx+s.fT*n.by+s.c2*n.bz)+(s.fS*e.bx+s.fT*e.by+s.c2*e.bz)+(d.fS*e.bB+d.fT*e.bC+d.c2*e.bD))-i.S*a),v=a+p-v<0?v-a:0<a+p-m?m-a:p,m=v*n.c7.cB,p=v*e.c7.cB;n=0<n.c7.du?{c7:n.c7,bx:n.bx-m*s.fS,by:n.by-m*s.fT,bz:n.bz-m*s.c2,bB:n.bB+(l.eS*f.fS+l.eT*f.fT+l.eU*f.c2)*v,bC:n.bC+(l.eW*f.fS+l.eX*f.fT+l.eY*f.c2)*v,bD:n.bD+(l.e_*f.fS+l.e$*f.fT+l.e0*f.c2)*v}:n,e=0<e.c7.du?{c7:e.c7,bx:e.bx+p*s.fS,by:e.by+p*s.fT,bz:e.bz+p*s.c2,bB:e.bB+(u.eS*d.fS+u.eT*d.fT+u.eU*d.c2)*v,bC:e.bC+(u.eW*d.fS+u.eX*d.fT+u.eY*d.c2)*v,bD:e.bD+(u.e_*d.fS+u.e$*d.fT+u.e0*d.c2)*v}:e,r=D(Gr,{ex:i,fC:a+v},r),t=t+Ya(v),o=c}}),om=t(function(n,e,r,t,o,a){for(;;)if(t.b){var i,c=t.a.f2,u=t.a.f3,l=t.a.dg,f=t.b,s=c-o.c7.G&&o.c7.du?N(em,o.c7.G,o,a):a,d=c-o.c7.G?D(hd,c,a):ot(o);a=d.$?(n=v=n,e=m=e,r=p=r,t=g=f,o=o,s):(i=d.a,(d=D(hd,u,s)).$?(n=v=n,e=m=e,r=p=r,t=g=f,o=o,s):(n=v=n,e=m=(l=V(tm,i,d.a,P,e,l)).df,r=p=D(Gr,{f2:c,f3:u,dg:l.dg},r),t=g=f,o=l.f0,0<l.f1.c7.du?N(em,u,l.f1,s):s))}else{if(!n||e-1e-6<0)return N(em,o.c7.G,o,a);var v=n-1,m=0,p=P,g=bt(r);n=v,e=m,r=p,t=g,o=o,a=a}}),am=k,im=m(function(e,n){var r=n.d,t=function(n){return n.$?{$:1,a:D(am,e,n.a)}:{$:0,a:D(am,t,n.a)}};return A(Pt,n.a,n.b,D(am,t,n.c),D(am,e,r))}),cm=m(function(n,e){var r=n.fS,t=n.fT,o=n.c2,a=e.b,i=a.a,c=a.b,n=a.c,a=a.d;return D(ou,e.a,A(tu,i+.5*(r*a+t*n-o*c),c+.5*(t*a+o*i-r*n),n+.5*(o*a+r*c-t*i),a+.5*(-r*i-t*c-o*n)))}),um=m(function(n,e){var r=n.r,t=n.eA,o=e.c7,a=e.bx,i=e.by,c=e.bz,u=e.bB,l=e.bC,n=e.bD,e=D(af,1-o.eR,r),i={fS:(t.fS+o.cu.fS*o.cB)*r+o.c0.fS*e+a,fT:(t.fT+o.cu.fT*o.cB)*r+o.c0.fT*e+i,c2:(t.c2+o.cu.c2*o.cB)*r+o.c0.c2*e+c},t=Da(i),e=t&&o.el&&0<=t*r-o.el?D(Jc,o.el/(t*r),i):i,c=D(af,1-o.ej,r),t={fS:(o.cA.eS*o.c$.fS+o.cA.eT*o.c$.fT+o.cA.eU*o.c$.c2)*r+o.cl.fS*c+u,fT:(o.cA.eW*o.c$.fS+o.cA.eX*o.c$.fT+o.cA.eY*o.c$.c2)*r+o.cl.fT*c+l,c2:(o.cA.e_*o.c$.fS+o.cA.e$*o.c$.fT+o.cA.e0*o.c$.c2)*r+o.cl.c2*c+n},c=(u=D(js,{fS:e.fS*r,fT:e.fT*r,c2:e.c2*r},D(cm,{fS:t.fS*r,fT:t.fT*r,c2:t.c2*r},o.cb)),l=u.a,c=Pu((n=(c=u.b).a)*n+(e=c.b)*e+(r=c.c)*r+(u=c.d)*u),D(ou,l,A(tu,n/c,e/c,r/c,u/c)));return{ej:o.ej,cl:t,el:o.el,cp:o.cp,F:o.F,cu:cu,G:o.G,dk:o.dk,cA:D(Hu,c,o.dk),cB:o.cB,eR:o.eR,du:o.du,e6:o.e6,d$:o.d$,c$:cu,cb:c,c0:i,ed:D(Ru,c,o.d$)}}),lm=s(function(e,n,r){n=D(im,function(n){return 0<n.c7.G+1&&0<n.c7.du?D(um,e,n):n.c7},n);return T(r,{f$:D(cs,function(n){return 0<n.G+1},Or(n)),hc:n})}),fm=m(function(n,e){var o={r:n,eA:e.eA,eB:Da(e.eA)},r=N(st,m(function(n,e){return D(Gr,D(Kv,o,n),e)}),P,e.gd),n=D(rm,e.gU,e.f$),a=n.a,n=n.b,r=N(st,m(function(n,e){var r=n.f3,t=n.gc,n=D(hd,n.f2,a);if(1===n.$)return e;n=n.a,r=D(hd,r,a);return 1===r.$?e:D(Gr,A(Gv,o,n.c7,r.a.c7,t),e)}),r,e.gc),n=n.$?a:C(om,20,0,P,r,n.a,a);return N(lm,o,n,e)}),sm=m(function(n,e){return D(fm,Xi(n),function(r){return T(r,{gd:function(){var n=r.f$;if(n.b){var e=n.b;return A(_v,n.a,e,e,P)}return P}()})}(e))}),dm={er:ot(-30),dd:4.4,de:2.3,bd:W,cv:Ys,di:5,dx:1e5,dy:.6,dD:0,a4:.5,dX:pr,dY:.01,bu:.3,d3:160},vm=m(function(n,e){var r=n.eh,t=n.eg,n=n.ef;return{fS:n.fS*e.fS+t.fS*e.fT+r.fS*e.c2,fT:n.fT*e.fS+t.fT*e.fT+r.fT*e.c2,c2:n.c2*e.fS+t.c2*e.fT+r.c2*e.c2}}),mm=l(function(n,e,r,t){var o=D(nu,r,ba(t.cb)),a=D(Jc,n,e),i=D(Zc,o,a),c=i.fS,u=i.fT,r=i.c2,n=t.cl,e=t.cA,o=t.c0,i=t.cB;return T(t,{cl:{fS:n.fS+e.eS*c+e.eT*u+e.eU*r,fT:n.fT+e.eW*c+e.eX*u+e.eY*r,c2:n.c2+e.e_*c+e.e$*u+e.e0*r},c0:{fS:o.fS+i*a.fS,fT:o.fT+i*a.fT,c2:o.c2+i*a.c2}})}),pm=l(function(n,e,r,t){return 0<t.du?A(mm,n,Ta(e),ha(r),t):t}),gm=s(function(n,e,r){return h(n,e)<1?N(of,n,e,r):N(of,e,n,r)}),bm=m(function(n,e){return e.fS*n.fS+e.fT*n.fT+e.c2*n.c2}),hm=m(function(e,n){return D(as,function(n){return S(n,e)},n)}),Tm=m(function(t,n){var e=m(function(n,e){var r=e.a,e=e.b;return t(n)?{a:D(Gr,n,r),b:e}:{a:r,b:D(Gr,n,e)}});return N(oo,e,{a:P,b:P},n)}),xm=m(function(n,e){var r=e,e=D(Tm,D(Fo,Rr,n),r.f$),n=e.a,e=e.b,t=N(st,D(Fo,function(n){return n.G},Gr),P,e);return T(r,{f$:n,gc:N(st,m(function(n,e){return D(hm,n.f2,t)||D(hm,n.f3,t)?e:D(Gr,n,e)}),P,r.gc),gt:v(t,r.gt)})}),Sm=m(function(n,e){return h(e,n)<0}),Pm=m(function(n,e){var r=n.dH,t=n.eh,o=n.eg,n=n.ef;return{fS:r.fS+e.fS*n.fS+e.fT*o.fS+e.c2*t.fS,fT:r.fT+e.fS*n.fT+e.fT*o.fT+e.c2*t.fT,c2:r.c2+e.fS*n.c2+e.fT*o.c2+e.c2*t.c2}}),ym=m(function(n,e){return D(Gs,D(Pm,n,e.dH),D(vm,n,e.gj))}),Mm=m(function(n,e){return D(au,n.b,e)}),Cm=m(function(n,e){var i=n.gj,c=n.gv;return N(st,m(function(n,e){var r=n.cK,t=n.aB,o=t.b?t.a:cu,n=D(Od,i,r);if(n<0){o=D(nu,o,c),n=D(Od,r,o)/n;if(n<0)return e;var a={fS:i.fS*n+c.fS,fT:i.fT*n+c.fT,c2:i.c2*n+c.c2};return N(rv,s(function(n,e,r){return r&&0<D(Od,D(nu,a,n),D(nu,e,n))}),!0,t)&&(e.$||n-e.a.bM<0)?ot({bM:n,cK:r,b0:a}):e}return e}),at,e.bP)}),wm=m(function(n,e){var r=n.gv,t=n.gj,o=e.cK,n=e.cQ,e=D(Od,t,o);if(e<0){n=D(nu,n,r),e=D(Od,o,n)/e;return e<0?at:ot({bM:e,cK:o,b0:{fS:t.fS*e+r.fS,fT:t.fT*e+r.fT,c2:t.c2*e+r.c2}})}return at}),Lm=m(function(n,e){var r=n.gv,t=n.gj,o=e.cQ,a=e.a4,n=2*(t.fS*(r.fS-o.fS)+t.fT*(r.fT-o.fT)+t.c2*(r.c2-o.c2)),e=t.fS*t.fS+t.fT*t.fT+t.c2*t.c2,a=n*n-4*e*((r.fS-o.fS)*(r.fS-o.fS)+(r.fT-o.fT)*(r.fT-o.fT)+(r.c2-o.c2)*(r.c2-o.c2)-a*a);if(a<0)return at;e=(-n-Pu(a))/(2*e);if(e<0)return at;t={fS:r.fS+t.fS*e,fT:r.fT+t.fT*e,c2:r.c2+t.c2*e},o=D(nu,t,o);return ot({bM:e,cK:o,b0:t})}),$m=m(function(n,e){switch(e.$){case 1:return D(wm,n,e.a);case 2:return D(Lm,n,e.a);case 0:return D(Cm,n,e.a);default:return at}}),zm=m(function(r,n){return N(st,m(function(n,e){n=D($m,r,n);if(n.$)return e;n=n.a;return e.$||n.bM-e.a.bM<0?ot(n):e}),at,n.ed)}),Dm=m(function(t,n){n=n.f$;return N(st,m(function(n,e){var r=D(zm,t,n);if(r.$)return e;r=r.a;return e.$||r.bM-e.a.bM<0?ot({c7:n,bM:r.bM,cK:r.cK,b0:r.b0}):e}),at,n)}),Nm=m(function(n,e){var r=D(Dm,{gj:Ta(mi(n)),gv:ha(Ji(n))},e);if(r.$)return at;n=r.a.c7,e=r.a.b0,r=r.a.cK;return ot({c7:n,cK:D(Mm,D(fu,n.cb,Sa(n.cp)),r),b0:D(iu,D(fu,n.cb,Sa(n.cp)),e)})}),Am=m(function(n,e){return e*n}),Vm=m(function(n,e){return e.fS*n.fS+e.fT*n.fT+e.c2*n.c2}),_m=m(function(n,e){return e.fS*n.fS+e.fT*n.fT+e.c2*n.c2}),Fm=m(function(n,e){return{fS:e.fS-n.fS,fT:e.fT-n.fT,c2:e.c2-n.c2}}),Bm=m(function(n,e){var r=e,e=ba(r.cb),n=ha(n),e=D(Zc,r.cl,{fS:n.fS-e.fS,fT:n.fT-e.fT,c2:n.c2-e.c2});return D(Kc,e,r.c0)}),km=m(function(n,e){return T(e,{F:n})}),Em=r(function(n,e,r,t,o){for(;;){if(!t.b)return D(km,{at:xa(r).at,G:{$:0,a:bt(o)}},r);var a,i,c,u,l=t.a,f=t.b,s=l.aV;o=(t=(r=(e=(n=(l=s.$?(u=D(ls,.99,l.aX),T(l,{aX:D(ls,.99,l.aX),bq:D(fs,l.bq,u)})):(a=s.a.cK,i=D(Bm,s.a.b0,r),c=D(vm,e,dm.cv),s=D(_m,a,c),T(l,{aX:u=D(bm,i,D(Fm,D(Hd,s,a),di(c)))*Xi(n)/Za(dm.a4),bq:D(fs,l.bq,l.aX)})),n),e),r),f),D(Gr,l,o))}}),Rm=s(function(n,e,r){return{fS:r.fS+e*n.fS,fT:r.fT+e*n.fT,c2:r.c2+e*n.c2}}),qm=o(function(n,e,r,t,o,a,i){for(;;){if(!i.b)return V(Em,n,r,t,o,P);var c=i.a,u=i.b,l=D(vm,r,Mi(dm.bd)),f=a?D(ls,c.cZ,c.cY):c.cY,s=a?D(ls,c.cZ,c.cw):c.cw,d=D(Pm,r,nc(t)),d=D(ls,1-dm.dY,D(Vm,l,D(Pf,c.bJ,d))),d=N(Rm,l,d,c.bJ);n=n,r=r,t=A(pm,f,c.c3,d,A(pm,s,c.dh,c.bJ,t)),o=o,a=a,i=u}}),Wm=m(function(n,e){var r=n.cA,t=ci(e),n=t.fS,e=t.fT,t=t.c2;return{fS:r.eS*n+r.eT*e+r.eU*t,fT:r.eW*n+r.eX*e+r.eY*t,c2:r.e_*n+r.e$*e+r.e0*t}}),Um=s(function(n,e,r){var t=D(Pm,ya(n),nc(n)),t=D(Pf,t,e),e=D(ad,t,di(r)),t=D(ad,D(Wm,n,e),t),t=D(bm,di(r),t),n=Zi(n);return n.$?t:1/Xa(n.a)+t}),jm=t(function(n,e,r,t,o,a){var i=D(Bm,r,e),c=D(Bm,r,n),e=N(Um,e,r,t),r=N(Um,n,r,t),t=D(bm,D(Fm,i,c),di(t));return N(gm,ec(o),o,-t/(r+e)/a)}),Hm=l(function(n,e,r,t){var o=D(Bm,r,e),r=D(Bm,r,n),e=(e=Zi(e)).$?0:1/Xa(e.a),e=1/(((n=Zi(n)).$?0:1/Xa(n.a))+e);return-.2*D(bm,D(Fm,o,r),di(t))*e}),Gm=s(function(n,e,r){var t=n,o=r,a=.5*e,i=Of(a),c=ds(a),u=t.gj,l=u.fS*c,f=i*l,n=l*l,r=u.fT*c,e=i*r,a=l*r,t=r*r,c=u.c2*c,i=i*c,l=l*c,r=r*c,c=c*c;return{fS:(1-2*(t+c))*o.fS+2*(a-i)*o.fT+2*(l+e)*o.c2,fT:2*(a+i)*o.fS+(1-2*(n+c))*o.fT+2*(r-f)*o.c2,c2:2*(l-e)*o.fS+2*(r+f)*o.fT+(1-2*(n+t))*o.c2}}),Ym=m(function(n,e){return{fS:n*e.fS,fT:n*e.fT,c2:n*e.c2}}),Qm=a(function(n,e,r,t,o,a,i,c,u){for(;;){if(!a.b)return x(qm,n,e,r,t,c,u,i);var l,f,s,d,v,m,p,g,b=a.a,h=a.b,T=b.aV;u=T.$?(n=n,e=e,r=r,t=t,o=o,a=h,i=i,c=D(Gr,b,c),u):(l=T.a.b0,g=T.a.cK,f=T.a.c7,m=D(vm,r,N(Gm,D(Gs,b.ar,dm.bd),b.T,dm.dX)),s=D(ls,dm.di,b.c_),p=S(b.aD,0)?0:D(Am,n,b.aD),v=D(bm,di(g),di(m)),d=D(Xo,g,rc(D(Fm,D(Ym,v,di(g)),di(m)))),T=D(Xo,g,rc(D(ad,di(g),di(d)))),v=D(fs,C(jm,t,f,l,T,p,o),D(Am,n,b.aY)),m=A(Hm,t,f,l,d),g=D(fs,D(Am,m,m),D(ls,.25,D(Am,v,v))),g=(p=D(Sm,D(Am,s,s),g))?1:D(ss,s,Pu(g)),n=n,e=e,r=r,t=t,o=o,a=h,i=D(Gr,{c3:d,eq:f,bJ:l,dh:T,cw:v,cY:m,cZ:g},i),c=D(Gr,b,c),u||p)}}),Im=z(function(n,e,r,t,o,a,i,c){for(;;){if(!o.b)return w(Qm,n,e,r,a,c,i,P,P,!1);var u,l,f,s,d,v,m=o.a,p=o.b,g=D(ym,r,D(Gs,m.ar,dm.bd)),b=D(Nm,g,D(xm,function(n){return S(xa(n).G,bu)},e));c=b.$?(n=n,e=e,r=r,t=t,o=p,a=a,i=D(Gr,T(m,{aV:at,bt:dm.bu}),i),c):(u=b.a.c7,v=b.a.cK,s=b.a.b0,d=D(fs,dm.bu,dm.a4),f=ya(u),l=D(vm,f,v),b=D(Pm,f,s),v=D(Yd,b,Ji(g)),D(Sm,d,v)?(f=N(gm,dm.dD,dm.dy,D(jl,dm.a4,v)),s=Za(D(jl,f,dm.bu)),d=D(bm,di(l),D(Bm,b,t)),d=(g=-1<h(v=D(bm,di(l),di(mi(g))),-.1)?{a:0,b:10}:{a:-d/v,b:-1/v}).b,g=(v=g.a)<0?dm.dd:dm.de,v=D(Am,n,N(gm,0,dm.dx,D(Xo,0,D(Qo,Xa,Zi(t)))*(dm.d3*s*d-g*v))),n=n,e=e,r=r,t=t,o=p,a=A(pm,v,l,b,a),i=D(Gr,T(m,{aV:ot({c7:u,cK:l,b0:b}),c_:v,bt:f}),i),c+1):(n=n,e=e,r=r,t=t,o=p,a=a,i=D(Gr,T(m,{aV:at,bt:dm.bu}),i),c))}}),Xm=r(function(n,e,r,t,o){if(t.b&&t.b.b&&t.b.b.b&&t.b.b.b.b&&!t.b.b.b.b.b){var a=t.b,i=a.a,c=a.b,u=c.a,l=c.b.a,a=4e3*r.a6,c=r.c8?4e3:0,t=T(t.a,{aD:c,aY:a,T:20*r.T/180*3.141592653589793}),r=T(i,{aD:c,aY:a,T:20*r.T/180*3.141592653589793}),u=T(u,{aD:c,aY:a}),a=T(l,{aD:c,aY:a});return p(Im,n,e,ya(o),o,b([t,r,u,a]),o,P,0)}return o}),Om=s(function(n,e,r){var t=xa(r).G;if(t.$)return r;t=t.a;return(n.an.aW.bp&&0<n.an.aQ?N(ru,3e4,D(vm,ya(r),dm.cv),Ma(r)):Rr)(V(Xm,.001*e,n.V,n.an.aW,t,r))}),Km=s(function(n,e,r){var t,o=r.aH+e,a=r.af;switch(a.$){case 2:return r;case 3:return 3e3<o-a.a?T(Ri(n),{aM:r.aM}):T(r,{aH:o,V:D(sm,e/1e3,D(kd,D(Om,r,e),r.V))});case 0:return T(r,2e3<o?{aH:o,af:Ed,V:D(du,Gd,r.V)}:{aH:o});default:var i=r.an,c=m(function(n,e){return n?e+1:e}),u=-1<h(i.aQ,mu),l=i.aW,f=D(Xo,N(hu,0,0,0),D(Qo,Ma,Wi(D(cs,D(Fo,xa,D(Fo,function(n){return n.G},ji)),qi(r.V))))),s=function(n){var e=n.b0;return!u&&0<h(o-n.fH,gu)&&Za(D(Yd,f,e))<2.5},d=D(Xo,N(hu,0,0,0),D(Qo,Ma,Wi(D(cs,D(Fo,xa,D(Fo,function(n){return n.G},Ui)),qi(r.V))))),v=0<h(D(Po,Za,Ni)(d),Es/2),d=h(D(Po,Za,Ni)(d),-Es/2)<0;return T(r,{aH:o,an:T(i,{aQ:(t=function(n){var e,e=(e=D(ao,Hi,D(cs,s,r.bo)),N(st,tt,0,e));return D(cl,mu,e+n)}(i.aQ),l.bp?D(Nt,0,t-.5):t)}),bo:D(ao,function(n){return D(Qd,o,n)&&s(n)?T(n,{fH:o}):n},r.bo),aM:{cn:D(c,v,r.aM.cn),cM:D(c,d,r.aM.cM)},af:v||d?{$:3,a:o}:r.af,V:D(sm,e/1e3,D(kd,D(Om,r,e),r.V))})}}),k=m(function(n,t){function r(n){var e=t.ao;if(3!==e.$)return t;var r=e.b;return T(t,{ao:D(Oc,n(e.a),r)})}function o(e){return r(function(n){return T(n,{an:e(n.an)})})}function e(e){return o(function(n){return T(n,{aW:e(n.aW)})})}var a={a:t.ao,b:n};n:for(;;)switch(a.a.$){case 2:switch(a.b.$){case 1:break n;case 2:return{a:T(t,{ao:D(Oc,Ri(i=a.a.a),i)}),b:Bd};default:return{a:t,b:Bd}}case 3:switch(a.b.$){case 1:break n;case 0:var i,c=a.a,u=c.a;return{a:r(D(Km,i=c.b,a.b.a)),b:Bd};case 3:u=a.a.a;switch((d=a.b.a).$){case 0:return{a:r(function(n){return T(n,{V:D(kd,wa,n.V)})}),b:Bd};case 1:return{a:e(function(n){return T(n,{bp:!0})}),b:Bd};case 2:var l=d.a;return{a:e(function(n){return T(n,{T:l})}),b:Bd};case 3:l=d.a;return{a:e(function(n){return T(n,{a6:l})}),b:Bd};case 4:return{a:o(function(n){return T(n,{bT:n.bT?0:1})}),b:Bd};default:var f=u.af;if(2!==f.$)return{a:r(function(n){return T(n,{af:{$:2,a:n.af}})}),b:Bd};var s=f.a;return{a:r(function(n){return T(n,{af:s})}),b:Bd}}case 4:var d;switch((d=a.b.a).$){case 0:return{a:t,b:Bd};case 1:return{a:e(function(n){return T(n,{bp:!1})}),b:Bd};case 2:l=d.a;return{a:e(function(n){return T(n,{T:function(n){return S(l,n.T)?0:n.T}(n)})}),b:Bd};case 3:l=d.a;return{a:e(function(n){return T(n,{a6:function(n){return S(l,n.a6)?0:n.a6}(n)})}),b:Bd};case 4:default:return{a:t,b:Bd}}case 5:return{a:t,b:Bd};default:return{a:t,b:Bd}}case 0:switch(a.b.$){case 1:break n;case 5:if(a.b.a.$){var v=a.b.a.a;return{a:T(t,{ao:{$:1,a:function(){if(v.$){var n=v.b;return"Image not powers of 2: "+ut(v.a)+(" "+ut(n))}return"Load error"}()}}),b:Bd}}return{a:T(t,{ao:{$:2,a:{d6:a.b.a.a}}}),b:Bd};default:return{a:t,b:Bd}}default:if(1===a.b.$)break n;return{a:t,b:Bd}}n=a.b;return{a:T(t,{cW:{l:n.b,k:n.a}}),b:Bd}}),Zm={$:2},Jm=Qn("button"),np=Pn,ep=m(function(n,e){return D(Kn,n,np(e))})("className"),rp=Qn("div"),tp=Qn("h1"),op=Xn,ap=m(function(n,e){return D(op,n,{$:0,a:e})}),ip=Qn("p"),cp=Yn,up=G,lp=m(function(n,e){var r=n.eg,n=n.ef;return D(up,e.fS*r.fS+e.fT*r.fT+e.c2*r.c2,e.fS*n.fS+e.fT*n.fT+e.c2*n.c2)}),fp=function(n){return{$:0,a:n}},sp={$:3},dp=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),vp=m(function(n,e){return Ga(D(ao,n,e))}),mp=function(n){return{$:1,a:n}},pp=I,gp=function(n){return{$:2,a:n}},bp=On,hp=an,Tp=s(function(n,e,r){return N(er,n,e,r)}),xp=A(Ll,1,1,1,1),Sp=s(function(n,e,r){return D(ao,function(n){return D(n,e,r)},n)}),Pp=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),yp=m(function(n,e){var r=e.fS,e=e.fT;return N(Pp,n*r/e,n,n*(1-r-e)/e)}),Mp=m(function(n,e){return r=D(yp,n,e),N(xl,3.2406*(n=r.a)-1.5372*(e=r.b)-.4986*(r=r.c),-.9689*n+1.8758*e+.0415*r,.0557*n-.204*e+1.057*r);var r}),Cp=r(function(n,e,r,t,o){return C(o,n,A(Ll,t.cV,t.cV,t.cV,t.eJ?1:-1),function(n){return hl({eS:n.s,eT:n.v,eU:n.y,eV:n.O,eW:n.t,eX:n.w,eY:n.z,eZ:n.P,e_:n.u,e$:n.x,e0:n.A,e1:n.Q,e2:0,e3:0,e4:0,e5:1})}(t),t.eJ,e,r)}),wp=t(function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=D($s,o.a,t),o=i,a=a;continue n;case 1:return{X:D(Gr,V(Cp,n,e,r,t,o.b),a.X),ah:a.ah,ai:a.ai};case 3:i=D(Gr,V(Cp,n,e,r,t,o.b),a.ah);return{X:a.X,ah:i,ai:a.ai};case 2:var c=D(Gr,V(Cp,n,e,r,t,o.a),a.ai);return{X:a.X,ah:a.ah,ai:c};default:c=o.a;return N(st,A(wp,n,e,r,t),a,c)}}),Lp=l(function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}}),$p=l(function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}}),On=m(function(n,e){return{$:6,a:n,b:e}}),zp=b([function(n){return A($p,518,n.ap,n.ak,n.aj)}({aj:1,ak:0,ap:!1}),A(Lp,!1,!1,!1,!1),D(On,0,1)]),Dp={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Np=Bn({eu:1,eF:0,ff:5})(b([{cQ:D(_l,-1,-1)},{cQ:D(_l,1,-1)},{cQ:D(_l,-1,1)},{cQ:D(_l,1,1)}])),Ap={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cQ"},uniforms:{}},Vp=cc({bQ:7681,dt:0,dU:8,b6:519,ee:15,ch:7681,ci:7681}),_p=s(function(n,e,r){return Ga(b([N(Sp,n,r,zp),b([uc(e),Vp])]))}),Fp=m(function(n,e){return Ga(D(pt,_p(n),e))}),On=function(n){return A($p,513,n.ap,n.ak,n.aj)}({aj:1,ak:0,ap:!0}),Bp=s(function(n,e,r){return{$:0,a:n,b:e,c:r}}),Bn=m(function(n,e){return N(Bp,32774,n,e)}),kp=(I={cj:0,ba:D(Bn,1,771),cm:0,cq:D(Bn,770,771),cx:0,cS:0},_c=I.cS,Fc=I.cx,Bc=I.cm,kc=I.cj,Bn=I.cq,I=I.ba,D(m(function(n,e){var r=n.c,t=e.a,o=e.b,e=e.c;return function(l){return function(u){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(e){return function(n){return{$:0,a:l,b:u,c:c,d:i,e:a,f:o,g:t,h:r,i:e,j:n}}}}}}}}}}}(n.a)(n.b)(r)(t)(o)(e)(_c)(Fc)(Bc)(kc)}),Bn,I)),Ep=b([On,kp]),Rp=m(function(n,e){var r=n.eh,t=n.eg,n=n.ef;return{fS:e.fS*n.fS+e.fT*n.fT+e.c2*n.c2,fT:e.fS*t.fS+e.fT*t.fT+e.c2*t.c2,c2:e.fS*r.fS+e.fT*r.fT+e.c2*r.c2}}),qp=m(function(n,e){var r=n.dH,t=e.fS-r.fS,o=e.fT-r.fT,a=e.c2-r.c2,e=n.eh,r=n.eg,n=n.ef;return{fS:t*n.fS+o*n.fT+a*n.c2,fT:t*r.fS+o*r.fT+a*r.c2,c2:t*e.fS+o*e.fT+a*e.c2}}),Wp=m(function(n,e){return{dH:D(qp,n,yi(e)),ef:D(Rp,n,Ci(e)),eg:D(Rp,n,wi(e)),eh:D(Rp,n,Ca(e))}}),Up=m(function(n,e){e=zi(e),n=zi(n);return{e8:D(hs,n.e8,e.e8),e9:D(hs,n.e9,e.e9),fa:D(hs,n.fa,e.fa),fb:D(Ts,n.fb,e.fb),fc:D(Ts,n.fc,e.fc),fd:D(Ts,n.fd,e.fd)}}),jp=m(function(n,e){var r=fc(Qa(n.b)),t=fc(Qa(n.a)),o=fc(Qa(n.c)),a=function(n){return{a:n.fS,b:n.fT,c:n.c2}}(e),n=a.a,e=a.b,a=a.c;return{e8:D(fs,t,n),e9:D(fs,r,e),fa:D(fs,o,a),fb:D(jl,t,n),fc:D(jl,r,e),fd:D(jl,o,a)}}),Hp=l(function(n,e,r,t){var o=r.f9,a=2*r.gz*e,i=2*r.gy*e,c=2*r.gx*e,u=Ta(Ca(n)),l=Ya(c*u.fS)+Ya(i*u.fT)+Ya(a*u.c2),r=Ta(wi(n)),u=Ya(c*r.fS)+Ya(i*r.fT)+Ya(a*r.c2),r=Ta(Ci(n)),r=Ya(c*r.fS)+Ya(i*r.fT)+Ya(a*r.c2),e=D(jp,{a:r,b:u,c:l},D(qp,n,N(hu,o.fS*e,o.fT*e,o.c2*e)));return ot(t.$?e:D(Up,t.a,e))}),Gp=l(function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=u=e,r=l=r,t=a;continue n;case 1:var i=A(Hp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 2:n=c=n,e=u=e,r=l=r,t=a;continue n;case 3:i=A(Hp,n,e,o.a,r);n=c=n,e=u=e,r=l=i,t=a;continue n;case 4:var c=n,u=e,l=A(Gp,n,e,r,o.a);n=c,e=u,r=l,t=a;continue n;default:var f=o.a,s=o.b,d=D(Wp,function(n){return{dH:{fS:n.O,fT:n.P,c2:n.Q},ef:{fS:n.s,fT:n.t,c2:n.u},eg:{fS:n.v,fT:n.w,c2:n.x},eh:{fS:n.y,fT:n.z,c2:n.A}}}(f),n),f=e*f.cV;n=c=n,e=u=e,r=l=A(Gp,d,f,r,b([s])),t=a;continue n}}}),Yp={eJ:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,O:0,P:0,Q:0,cV:1},Qp=cc({bQ:7681,dt:0,dU:8,b6:519,ee:255,ch:7681,ci:7681}),Ip={cm:0,f8:!1,cx:0,dQ:0,cS:0,d9:0,fS:0,fT:0,c2:0},Xp=m(function(n,e){return hl({eS:n.fS,eT:n.cS,eU:e.fS,eV:e.cS,eW:n.fT,eX:n.cx,eY:e.fT,eZ:e.cx,e_:n.c2,e$:n.cm,e0:e.c2,e1:e.cm,e2:n.d9,e3:n.dQ,e4:e.d9,e5:e.dQ})}),Op={a:{bY:D(Xp,Ip,Ip),cE:D(Xp,Ip,Ip),cF:D(Xp,Ip,Ip),cG:D(Xp,Ip,Ip)},b:A(Ll,0,0,0,0)},Kp=b([sc({aj:1,ak:0,ap:!0}),ic({bQ:7680,dt:240,dU:0,b6:514,ee:0,ch:7680,ci:7680}),kp]),Zp=m(function(n,e){var r=e.fY,t=Qa(e.gS),o=Qa(e.gs),e=n.dS;if(e.$){n=e.a;return bf(o)?hl({eS:2/(r*n),eT:0,eU:0,eV:0,eW:0,eX:2/n,eY:0,eZ:0,e_:0,e$:0,e0:0,e1:-1,e2:0,e3:0,e4:0,e5:1}):hl({eS:2/(r*n),eT:0,eU:0,eV:0,eW:0,eX:2/n,eY:0,eZ:0,e_:0,e$:0,e0:-2/(o-t),e1:-(o+t)/(o-t),e2:0,e3:0,e4:0,e5:1})}e=e.a;return bf(o)?hl({eS:1/(r*e),eT:0,eU:0,eV:0,eW:0,eX:1/e,eY:0,eZ:0,e_:0,e$:0,e0:-1,e1:-2*t,e2:0,e3:0,e4:-1,e5:0}):hl({eS:1/(r*e),eT:0,eU:0,eV:0,eW:0,eX:1/e,eY:0,eZ:0,e_:0,e$:0,e0:-(o+t)/(o-t),e1:-2*o*t/(o-t),e2:0,e3:0,e4:-1,e5:0})}),Jp=m(function(n,e){return 1==(1&n>>e)?0:1}),ng=s(function(r,t,n){return Ga(D(ao,function(n){var e=n<<4,n=A(Ll,D(Jp,n,0),D(Jp,n,1),D(Jp,n,2),D(Jp,n,3));return N(Sp,r,{a:t,b:n},function(n){return b([sc({aj:1,ak:0,ap:!0}),ic({bQ:7680,dt:240,dU:n,b6:514,ee:0,ch:7680,ci:7680}),kp])}(e))},D(mt,1,D(af,2,n)-1)))}),eg=function(n){return{eS:n[0],eW:n[1],e_:n[2],e2:n[3],eT:n[4],eX:n[5],e$:n[6],e3:n[7],eU:n[8],eY:n[9],e0:n[10],e4:n[11],eV:n[12],eZ:n[13],e1:n[14],e5:n[15]}},rg=m(function(n,e){var r,t;return r=D(Wp,e,n),t=Ra(yi(r)),e=Ta(Ca(r)),n=Ta(wi(r)),r=Ta(Ci(r)),hl({eS:r.fS,eT:n.fS,eU:e.fS,eV:t.fS,eW:r.fT,eX:n.fT,eY:e.fT,eZ:t.fT,e_:r.c2,e$:n.c2,e0:e.c2,e1:t.c2,e2:0,e3:0,e4:0,e5:1})}),tg=s(function(n,e,r){return{fS:n,fT:e,c2:r}}),og=m(function(e,n){var r=b([mp(1),gp(0),fp(!0),A(dp,0,0,0,0)]),t=function(){var n=e.fW;switch(n.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:D(Gr,sp,r),b:"1",c:1};default:return{a:r,b:"0",c:n.a}}}(),o=t.a,a=t.b,i=t.c,c=e.gi,u=c.a,l=ac(c.b),f=D(bp,"height",ut(l)+"px"),t=ac(u),s=t/l,c=D(vp,function(n){return mc({fY:s,f5:e.f5,gb:e.gb,go:n.go,gq:n.gq,gJ:n.gJ,fE:i,hn:n.hn,hw:n.hw})},n),u=D(bp,"width",ut(t)+"px"),n=oc(e.f_);return N(tc,"div",b([D(bp,"padding","0px"),u,f]),b([{a:a,b:N(Tp,o,b([(t=pp(t*i),D(Zn,"width",ut(t))),function(n){return D(Zn,"height",ut(n))}(pp(l*i)),u,f,D(bp,"display","block"),D(bp,"background-color",n)]),c)}]))}),ag={fS:.31271,fT:.32902},ig=m(function(n,e){var r=n,t=Ta(e.gj),o=t.fS,n=t.fT,t=t.c2,e=D(Mp,e.eI,e.eo);return{cm:wl(e),f8:r,cx:Cl(e),dQ:0,cS:Ml(e),d9:1,fS:-o,fT:-n,c2:-t}}),cg=m(function(n,e){var r=n.eg,t=e.fS*r.fS+e.fT*r.fT+e.c2*r.c2,o=n.ef,n=e.fS*o.fS+e.fT*o.fT+e.c2*o.c2;return D(up,e.fS*(o.fT*r.c2-o.c2*r.fT)+e.fT*(o.c2*r.fS-o.fS*r.c2)+e.c2*(o.fS*r.fT-o.fT*r.fS),Pu(n*n+t*t))}),ug=m(function(n,e){var r=e.c2-n.c2,t=e.fT-n.fT,e=e.fS-n.fS,n=D(Nt,Ya(e),D(Nt,Ya(t),Ya(r)));if(n){r=r/n,t=t/n,e=e/n,n=Pu(e*e+t*t+r*r);return ot({fS:e/n,fT:t/n,c2:r/n})}return at}),lg=m(function(n,e){return D(Ld,n,e)}),fg=m(function(n,e){return 0<h(e,n)}),sg=Qa,dg={$:1},vg={$:0},mg=m(function(n,e){return{fS:n.fT*e.c2-n.c2*e.fT,fT:n.c2*e.fS-n.fS*e.c2,c2:n.fS*e.fT-n.fT*e.fS}}),pg=s(function(n,e,r){return{dH:N(Rs,n,e,yi(r)),ef:N(Gm,n,e,Ci(r)),eg:N(Gm,n,e,wi(r)),eh:N(Gm,n,e,Ca(r))}}),gg=s(function(n,e,r){return N(pg,n(r),e,r)}),bg=s(function(n,e,r){return D(jd,D(Hd,e,n),r)}),hg=s(function(n,e,r){return N(bg,mi(n(r)),e,r)}),Tg=H,xg=m(function(n,e){return{dH:n,ef:Ci(e),eg:wi(e),eh:Ca(e)}}),H=m(function(n,e){return e/n}),Sg=m(function(n,e){var r=n.cQ;return D(Gr,{cK:ui(n.cK),cQ:ii(r)},e)}),Pg=m(function(n,e){var r=n.eg,n=n.ef;return{fS:e.fS*n.fS+e.fT*r.fS,fT:e.fS*n.fT+e.fT*r.fT,c2:e.fS*n.c2+e.fT*r.c2}}),yg=Rr({dH:df,ef:Ys,eg:pr}),Mg=(Ec=D(H,72,6.283185307179586),Rc=di(kn),qc=di(W),Wc=D(ls,.5,1),Uc=N(Ul,0,0,Wc),jc=D(ls,-.5,1),Hc=N(Ul,0,0,jc),W=D(ao,function(n){var e=D(ls,n,Ec),r=di(D(Pg,yg,Mc(e))),t=D(ls,ri(e),1),o=D(ls,ai(e),1),a=N(Ul,t,o,Wc),i=N(Ul,t,o,jc),e=D(Ms,72,n+1),t=D(ls,e,Ec),o=di(D(Pg,yg,Mc(t))),n=D(ls,ri(t),1),e=D(ls,ai(t),1),t=N(Ul,n,e,jc),e=N(Ul,n,e,Wc);return b([{a:{cK:qc,cQ:Hc},b:{cK:qc,cQ:t},c:{cK:qc,cQ:i}},{a:{cK:r,cQ:i},b:{cK:o,cQ:t},c:{cK:o,cQ:e}},{a:{cK:r,cQ:i},b:{cK:o,cQ:e},c:{cK:r,cQ:a}},{a:{cK:Rc,cQ:Uc},b:{cK:Rc,cQ:a},c:{cK:Rc,cQ:e}}])},D(mt,0,71)),W=Bi(Ga(W)),un(function(n){var e=N(Xr,Sg,P,si(n));if(e.b){var r=e.a,t=e.b,e=D(Yl,e,li(n)),t=D(Ss,r,t);return A(Jf,t,n,e,0)}return ms}(W))),Cg=ln(Mg),wg=l(function(n,e,r,t){var o=function(n){var e=mi(n),r=Cc(e);return{dH:Ji(n),ef:r.a,eg:r.b,eh:e}}(function(n){return n.m}(t)),r=D(jf,r,Mg),r=(e={a:n,b:e}).a?e.b?Va(b([r,ki(Cg)])):r:e.b?ki(Cg):Ku,e=function(n){return n.a4}(t),t=function(n){return n.N}(t);return D(Ld,o,D(Xf,{a:e,b:e,c:t},r))}),ln=m(function(n,e){return A(wg,!0,!0,n,e)}),Lg=s(function(n,e,r){return{m:D(Gs,n,e),N:Qa(r.N),a4:Qa(r.a4)}}),pr=N(Lg,df,pr,{N:.3,a4:dm.a4}),$g=D(ln,Fs(pf),pr),zg=m(function(o,n){return D(ao,function(n){var e=ya(o),r=D(Pm,e,n.ar),t=D(vm,e,dm.bd),r=D(Ud,D(Hd,n.bt,t),r),e=N(pg,D(Gs,r,t),n.T,D(xg,r,e));return D(lg,e,$g)},n)}),Dg=m(function(n,e){var r=n.dH,n=n.gX;return(e.fS-r.fS)*n.fS+(e.fT-r.fT)*n.fT+(e.c2-r.c2)*n.c2}),Ng=function(n){var e=N(of,1667,25e3,n),n=4e3<e?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:1e9*-.2661239/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{fS:n,fT:2222<e?4e3<e?n*n*n*3.081758-n*n*5.8733867+3.75112997*n-.37001483:n*n*n*-.9549476-n*n*1.37418593+2.09137015*n-.16748867:n*n*n*-1.1063814-n*n*1.3481102+2.18555832*n-.20219683}}(5600),pr=l(function(n,e,r,t){return A(vf,n,e,r,t)}),Ag=A(pr,0,0,0,0),Vg=m(function(n,e){return{$:2,a:n,b:e}}),_g={$:0,a:Op.a},Fg=z(function(n,e,r,t,o,a,i,c){var u=D(Tm,Lc,b([wc(n),wc(e),wc(r),wc(t)])),l=u.a;if(l.b){var f=v(l,u.b);if(f.b&&f.b.b&&f.b.b.b&&f.b.b.b.b&&!f.b.b.b.b.b){var s=f.a,d=f.b,u=d.a,f=d.b,d=f.a,f=f.b.a;return D(Vg,D(ao,$c,l),{bY:D(Xp,s,u),cE:D(Xp,d,f),cF:D(Xp,o,a),cG:D(Xp,i,c)})}return _g}return{$:0,a:{bY:D(Xp,n,e),cE:D(Xp,r,t),cF:D(Xp,o,a),cG:D(Xp,i,c)}}}),Bg=m(function(n,e){return p(Fg,n,e,Ip,Ip,Ip,Ip,Ip,Ip)}),kg=m(function(n,e){return A(wg,!0,!1,n,e)}),Eg=m(function(n,e){n=D(Mp,1,n);return N(As,0,{$:0,a:n},e)}),Rg=m(function(n,e){return A(Ns,!0,!1,n,e)}),qg=m(function(n,e){var r,t=e.b0,o=e.hd,a=N(Lg,t,Qs,{N:.3,a4:.75}),i=D(Eg,(r=N(mf,255,127,0),i=zc(r),{fS:(e=i.a)/(i=e+(r=i.b)+i.c),fT:r/i}),5e3),i=n?i:Fs(pf),n={a:o,b:n};if(n.a||!n.b)return D(kg,i,a);t=D(Ud,N(ks,0,0,1.5),t);return Wd(b([D(kg,i,a),D(Rg,i,D(sf,t,.6))]))}),Wg=m(function(n,e){return{gX:e,dH:n}}),Ug=m(function(n,e){var t,o,a,r=n.k,i=n.l,c=e.V,u=e.an,l=e.bo,f=e.aH,s=e.aM,d=e.af,v=D(ig,!0,{eo:Ng,gj:D(Ps,.7853981633974483,-1.0471975511965976),eI:1e4}),n=Pc({eo:ag,eI:15e3,ho:Qs}),m=Wi(D(cs,D(Fo,xa,D(Fo,function(n){return n.G},ji)),qi(c))),p=(t=D(Fo,ya,yi),o=N(hu,30,0,10),a=Wi(D(cs,D(Fo,xa,D(Fo,function(n){return n.G},Ui)),qi(c))),e=function(){var n={a:u.bT,b:a,c:m};n:for(;;){if(n.a){if(n.b.$||n.c.$)break n;return{bG:D(lp,yg,Mi(D(Xo,Ys,rc((r=n.c.a).c0)))),bM:30,bO:.05235987755982988,bS:D(Ud,N(ks,0,0,4),t(r))}}if(n.b.$||n.c.$)break n;var e=n.b.a,r=n.c.a;return{bG:D(Xo,0,D(Qo,lp(yg),D(ug,t(e),t(r)))),bM:D(fs,30,D(Yd,t(e),t(r))),bO:D(cg,yg,D(Xo,Ys,D(ug,D(Ud,N(ks,0,0,-3),t(e)),D(Ud,N(ks,0,30,0),t(r))))),bS:t(e)}}return{bG:0,bM:30,bO:0,bS:o}}(),yc({hr:.41887902047863906,ht:xc({bG:e.bG,bM:e.bM,bO:e.bO,bS:e.bS,gw:yg})})),l=Ga(b([D(ao,pc,D(cs,function(n){if(2!==xa(n).G.$)return!0;var e,n=(e=ya(n),D(Wg,e.dH,e.eh)),e=lc(vc(p));return D(fg,0,D(Dg,n,e))},qi(c))),(c={a:m,b:D(Qo,D(Fo,xa,function(n){return n.G}),m)}).a.$||c.b.$||c.b.a.$?P:D(zg,c.a.a,c.b.a.a),D(ao,function(n){return D(qg,D(Qd,f,n),n)},l)]));return b([(n={fW:dg,f_:Ag,f5:p,gb:.1,gi:{a:zt(r),b:zt(i)},go:l,gq:sg(1e4),gJ:D(Bg,v,n),hn:vg,hw:ag},D(og,{fW:n.fW,f_:n.f_,f5:n.f5,gb:n.gb,gi:n.gi},b([{go:n.go,gq:n.gq,gJ:n.gJ,hn:n.hn,hw:n.hw}]))),D(rp,b([ep("hud-pane hud-top-center")]),b([D(ip,P,b([cp("blue: "+ut(s.cn)+(" orange: "+ut(s.cM)))]))])),D(rp,b([ep("hud-pane hud-bottom-left")]),b([D(ip,P,b([cp("Drive - Arrow keys")])),D(ip,P,b([cp("Boost - Shift")])),D(ip,P,b([cp("Toggle Camera - C")])),D(ip,P,b([cp("Jump (buggy) - Spacebar")]))])),D(rp,b([ep("hud-pane hud-bottom-right")]),b([D(ip,b([D(bp,"font-size","48px")]),b([cp(ut(pp(u.aQ)))])),D(ip,P,b([cp("BOOST")]))])),3===d.$?D(tp,b([ep("hud-pane center-popup")]),b([cp("GOOAAALLLL!!!!!")])):cp("")])}),k=tn({gE:function(){return{a:{ao:xo,cW:{l:0,k:0}},b:Co(b([D(Mo,so,D(No,Ao,"static/rl-map.png")),D(To,function(n){n=n.hu;return D(So,n.k,n.l)},wo)]))}},hk:function(n){n=n.ao;return 3!==n.$?ga(m(function(n,e){return D(So,n,e)})):Vo(b(2===n.a.af.$?[ga(m(function(n,e){return D(So,n,e)})),Qc(bo(vo)),Ic(bo(mo))]:[ga(m(function(n,e){return D(So,n,e)})),ia(po),Qc(bo(vo)),Ic(bo(mo))]))},hp:k,hs:function(e){return D(rp,b([ep("container")]),function(){var n=e.ao;switch(n.$){case 0:return b([D(ip,b([ep("center-popup")]),b([cp("Loading...")]))]);case 2:return b([D(ip,b([ep("center-popup")]),b([D(tp,P,b([cp("Rocket League")])),D(Jm,b([D(ap,"click",Wt(Zm))]),b([cp("Start")]))]))]);case 3:return D(Ug,e.cW,n.a);default:return b([D(ip,P,b([cp("Error: "+n.a)]))])}}())}});k={Main:{init:k(Wt(0))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?E(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,k):n.Elm=k}(this);